Summary:
 - Directory: c:\Users\HIRWA\Desktop\VirMar-RWANDA
 - Files processed: 198
 - Total lines: 15566
 - Duration: 10.89 seconds
================================================================================
Directory Structure:

├── backend/
│   ├── configs/
│   │   ├── middleware/
│   │   │   ├── potect.buyerRoute.js
│   │   │   ├── protect.admin.js
│   │   │   ├── protect.sellerRoute.js
│   │   │   └── protectRoutes.js
│   │   ├── mongo.connect.js
│   │   ├── token.config.buyer.js
│   │   └── token.config.seller.js
│   ├── controllers/
│   │   ├── analyticscontrollers.js
│   │   ├── buyer.controllers.js
│   │   ├── escrow.controllers.js
│   │   ├── inventory.controllers.js
│   │   ├── order.controllers.js
│   │   ├── seller.controllers.js
│   │   ├── shipping.controllers.js
│   │   └── transact.controllers.js
│   ├── models/
│   │   ├── analytics.model.js
│   │   ├── buyer.model.js
│   │   ├── category.model.js
│   │   ├── commission.model.js
│   │   ├── coupon.model.js
│   │   ├── inventory.model.js
│   │   ├── items.model.js
│   │   ├── location.model.js
│   │   ├── notification.schema.js
│   │   ├── order.model.js
│   │   ├── payout.model.js
│   │   ├── price.schema.js
│   │   ├── review.model.js
│   │   ├── sellers.model.js
│   │   ├── store.schema.js
│   │   ├── transaction.schema.js
│   │   └── wallet.schema.js
│   ├── routes/
│   │   ├── buyer.routes.js
│   │   ├── escrow.routes.js
│   │   ├── public.routes.js
│   │   ├── seller.routes.js
│   │   └── transact.routes.js
│   ├── sockets/
│   │   └── sockets.js
│   ├── utils/
│   │   ├── email.notification.js
│   │   ├── initiate.payment.js
│   │   ├── momoService.js
│   │   ├── notification.maker.js
│   │   ├── redis.connect.js
│   │   ├── requests.validate.js
│   │   └── transaction.init.js
│   ├── server.js
│   └── test.js
├── frontend/
│   └── VirMar-RWANDA/
│       ├── src/
│       │   ├── api/
│       │   │   ├── analyticsApi.js
│       │   │   ├── authApi.js
│       │   │   ├── buyerApi.js
│       │   │   ├── escrowApi.js
│       │   │   ├── notificationApi.js
│       │   │   ├── productApi.js
│       │   │   ├── seller.api.js
│       │   │   └── walletApi.js
│       │   ├── Buyer/
│       │   │   ├── components/
│       │   │   │   ├── account/
│       │   │   │   │   ├── BuyerAccount.jsx
│       │   │   │   │   ├── BuyerOrders.jsx
│       │   │   │   │   ├── BuyerProfile.jsx
│       │   │   │   │   ├── BuyerWishlist.jsx
│       │   │   │   │   ├── DepositFailure.jsx
│       │   │   │   │   ├── DepositSuccess.jsx
│       │   │   │   │   ├── TransactionHistory.jsx
│       │   │   │   │   └── Wallet.jsx
│       │   │   │   ├── dashboard/
│       │   │   │   │   ├── AssistantWidget.jsx
│       │   │   │   │   ├── BuyerNavbar.jsx
│       │   │   │   │   └── ProductTable.jsx
│       │   │   │   ├── escrow/
│       │   │   │   │   ├── EscrowExplanation.jsx
│       │   │   │   │   ├── EscrowFlow.jsx
│       │   │   │   │   └── EscrowStatusCard.jsx
│       │   │   │   ├── marketplace/
│       │   │   │   │   ├── ProductCard.jsx
│       │   │   │   │   ├── ProductDetailModal.jsx
│       │   │   │   │   ├── ProductList.jsx
│       │   │   │   │   ├── ProductListTable.jsx
│       │   │   │   │   ├── ProductTable.jsx
│       │   │   │   │   ├── RatingStars.jsx
│       │   │   │   │   ├── SearchBar.jsx
│       │   │   │   │   └── WishlistToggle.jsx
│       │   │   │   ├── BuyerDashboard.jsx
│       │   │   │   └── Wallet.jsx
│       │   │   ├── forms/
│       │   │   │   ├── BudgetForm.jsx
│       │   │   │   ├── DepositForm.jsx
│       │   │   │   ├── EscrowConfirmationForm.jsx
│       │   │   │   └── LocationForm.jsx
│       │   │   ├── hooks/
│       │   │   │   ├── useBuyerWallet.js
│       │   │   │   ├── useDepositFunds.js
│       │   │   │   └── useEscrowFlow.js
│       │   │   ├── orderchat/
│       │   │   │   ├── Chat.css
│       │   │   │   ├── ChatInputBox.jsx
│       │   │   │   ├── ChatMessageList.jsx
│       │   │   │   ├── OrderChatPage.jsx
│       │   │   │   └── useOrderChatSocket.js
│       │   │   ├── pages/
│       │   │   │   ├── AnalyticsPage.jsx
│       │   │   │   ├── BuyerOrders.jsx
│       │   │   │   ├── BuyerOrdersWithEscrow.jsx
│       │   │   │   ├── OrderDetailsModal.jsx
│       │   │   │   └── PurchaseHistoryPage.jsx
│       │   │   ├── VirtualAssistant/
│       │   │   │   ├── assistantLogic.js
│       │   │   │   ├── AssistantWadget.jsx
│       │   │   │   ├── chat.css
│       │   │   │   ├── ChatBubble.jsx
│       │   │   │   └── widget.css
│       │   │   ├── Navbar.jsx
│       │   │   └── Router.jsx
│       │   ├── hooks/
│       │   │   └── useAuth.js
│       │   ├── pages/
│       │   │   ├── NotFoundPage.css
│       │   │   └── NotFoundPage.jsx
│       │   ├── Public/
│       │   │   ├── components/
│       │   │   │   ├── css/
│       │   │   │   │   ├── about.css
│       │   │   │   │   ├── blog.css
│       │   │   │   │   └── market.css
│       │   │   │   ├── landingpage/
│       │   │   │   │   ├── CallToAction.jsx
│       │   │   │   │   ├── FeatureSection.jsx
│       │   │   │   │   ├── Footer.jsx
│       │   │   │   │   ├── HeroSection.jsx
│       │   │   │   │   ├── HowItWorks.jsx
│       │   │   │   │   ├── Navbar.jsx
│       │   │   │   │   ├── ProductSearchBar.jsx
│       │   │   │   │   ├── StatsSection.jsx
│       │   │   │   │   └── TestmonialSection.jsx
│       │   │   │   ├── Marketplace/
│       │   │   │   │   ├── MarketplaceFilters.jsx
│       │   │   │   │   ├── MarketplaceStats.jsx
│       │   │   │   │   ├── ProductDetailsModal.jsx
│       │   │   │   │   └── ProductList.jsx
│       │   │   │   ├── AboutUs.jsx
│       │   │   │   ├── BlogPage.jsx
│       │   │   │   ├── ContactPage.jsx
│       │   │   │   ├── LandingPage.jsx
│       │   │   │   └── MarketplacePage.jsx
│       │   │   ├── forms/
│       │   │   │   ├── BuyerLoginForm.jsx
│       │   │   │   ├── BuyerRegisterForm.jsx
│       │   │   │   ├── SellerLoginForm.jsx
│       │   │   │   └── SellerRegisterForm.jsx
│       │   │   └── Router.jsx
│       │   ├── Seller/
│       │   │   ├── components/
│       │   │   │   ├── escrow/
│       │   │   │   │   └── SellerEscrowStatus.jsx
│       │   │   │   ├── geolocation/
│       │   │   │   │   ├── AreaSelector.jsx
│       │   │   │   │   ├── DeliveryAreasManager.jsx
│       │   │   │   │   ├── DeliveryFeesForm.jsx
│       │   │   │   │   ├── GeolocationDashboard.jsx
│       │   │   │   │   └── MapView.jsx
│       │   │   │   ├── marketplace/
│       │   │   │   │   ├── BuyerInsightsModule.jsx
│       │   │   │   │   ├── CardSummary.jsx
│       │   │   │   │   ├── FiltersPanel.jsx
│       │   │   │   │   ├── MarketConditionAnalytics.jsx
│       │   │   │   │   ├── MarketplaceDashboard.jsx
│       │   │   │   │   ├── SellerCompetitiveInsights.jsx
│       │   │   │   │   └── TrendingProductsModule.jsx
│       │   │   │   ├── userAccount/
│       │   │   │   │   ├── EditProfileForm.jsx
│       │   │   │   │   ├── ProductsGrid.jsx
│       │   │   │   │   ├── ProfileHeader.jsx
│       │   │   │   │   ├── ProfileTabs.jsx
│       │   │   │   │   ├── SellerProfile.jsx
│       │   │   │   │   └── TrustScoreBadge.jsx
│       │   │   │   ├── DashboardCharts.jsx
│       │   │   │   ├── DashboardLinks.jsx
│       │   │   │   ├── DashboardNotifications.jsx
│       │   │   │   ├── DashboardQuickLinks.jsx
│       │   │   │   ├── DashboardStats.jsx
│       │   │   │   ├── DashBoardWrapper.jsx
│       │   │   │   ├── DeleteConfirmation.jsx
│       │   │   │   ├── FollowerNotificationList.jsx
│       │   │   │   ├── Modal.jsx
│       │   │   │   ├── product-card.css
│       │   │   │   ├── Product.css
│       │   │   │   ├── Product.jsx
│       │   │   │   ├── ProductCard.jsx
│       │   │   │   ├── ProductOverview.jsx
│       │   │   │   ├── seller.css
│       │   │   │   ├── SellerDashboard.jsx
│       │   │   │   ├── SellerNavbar.jsx
│       │   │   │   ├── SellerProfile.jsx
│       │   │   │   └── TrustScoreCard.jsx
│       │   │   ├── forms/
│       │   │   │   ├── AddProductForm.jsx
│       │   │   │   └── ProductForm.jsx
│       │   │   ├── orderChart/
│       │   │   │   ├── chat.css
│       │   │   │   ├── SellerChatInputBox.jsx
│       │   │   │   ├── SellerChatMessageList.jsx
│       │   │   │   ├── SellerOrderChatPage.jsx
│       │   │   │   └── useSellerOrderChatSocket.js
│       │   │   ├── pages/
│       │   │   │   └── Marketplace.jsx
│       │   │   ├── styles/
│       │   │   │   ├── DashBoard.css
│       │   │   │   ├── MarketplaceDashboard.css
│       │   │   │   └── uiTokens.js
│       │   │   └── Router.jsx
│       │   ├── shared/
│       │   │   ├── escrow/
│       │   │   └── sockets/
│       │   ├── app.jsx
│       │   ├── index.css
│       │   ├── index.js
│       │   ├── main.jsx
│       │   └── router.jsx
│       ├── eslint.config.js
│       ├── index.html
│       ├── package.json
│       ├── README.md
│       └── vite.config.js
├── eslint.config.js
├── git.test.js
├── index.html
├── package.json
├── README.md
└── vite.config.js

Files extracted:
eslint.config.js (starts at line 1)
git.test.js (starts at line 31)
index.html (starts at line 221)
package.json (starts at line 404)
README.md (starts at line 441)
vite.config.js (starts at line 462)
backend\server.js (starts at line 470)
backend\test.js (starts at line 552)
backend\configs\mongo.connect.js (starts at line 644)
backend\configs\token.config.buyer.js (starts at line 665)
backend\configs\token.config.seller.js (starts at line 693)
backend\configs\middleware\potect.buyerRoute.js (starts at line 731)
backend\configs\middleware\protect.admin.js (starts at line 764)
backend\configs\middleware\protect.sellerRoute.js (starts at line 781)
backend\configs\middleware\protectRoutes.js (starts at line 836)
backend\controllers\analyticscontrollers.js (starts at line 881)
backend\controllers\buyer.controllers.js (starts at line 1470)
backend\controllers\escrow.controllers.js (starts at line 1785)
backend\controllers\inventory.controllers.js (starts at line 1888)
backend\controllers\order.controllers.js (starts at line 2382)
backend\controllers\seller.controllers.js (starts at line 2938)
backend\controllers\shipping.controllers.js (starts at line 3126)
backend\controllers\transact.controllers.js (starts at line 3356)
backend\models\analytics.model.js (starts at line 3464)
backend\models\buyer.model.js (starts at line 3582)
backend\models\category.model.js (starts at line 3622)
backend\models\commission.model.js (starts at line 3697)
backend\models\coupon.model.js (starts at line 3766)
backend\models\inventory.model.js (starts at line 3877)
backend\models\items.model.js (starts at line 4050)
backend\models\location.model.js (starts at line 4096)
backend\models\notification.schema.js (starts at line 4178)
backend\models\order.model.js (starts at line 4212)
backend\models\payout.model.js (starts at line 4398)
backend\models\price.schema.js (starts at line 4505)
backend\models\review.model.js (starts at line 4525)
backend\models\sellers.model.js (starts at line 4617)
backend\models\store.schema.js (starts at line 4666)
backend\models\transaction.schema.js (starts at line 4723)
backend\models\wallet.schema.js (starts at line 4793)
backend\routes\buyer.routes.js (starts at line 4815)
backend\routes\escrow.routes.js (starts at line 4864)
backend\routes\public.routes.js (starts at line 4878)
backend\routes\seller.routes.js (starts at line 4965)
backend\routes\transact.routes.js (starts at line 4993)
backend\sockets\sockets.js (starts at line 5011)
backend\utils\email.notification.js (starts at line 5054)
backend\utils\initiate.payment.js (starts at line 5089)
backend\utils\momoService.js (starts at line 5093)
backend\utils\notification.maker.js (starts at line 5211)
backend\utils\redis.connect.js (starts at line 5223)
backend\utils\requests.validate.js (starts at line 5240)
backend\utils\transaction.init.js (starts at line 5247)
frontend\VirMar-RWANDA\eslint.config.js (starts at line 5255)
frontend\VirMar-RWANDA\index.html (starts at line 5285)
frontend\VirMar-RWANDA\package.json (starts at line 5299)
frontend\VirMar-RWANDA\README.md (starts at line 5343)
frontend\VirMar-RWANDA\vite.config.js (starts at line 5356)
frontend\VirMar-RWANDA\src\app.jsx (starts at line 5364)
frontend\VirMar-RWANDA\src\index.css (starts at line 5377)
frontend\VirMar-RWANDA\src\index.js (starts at line 5441)
frontend\VirMar-RWANDA\src\main.jsx (starts at line 5445)
frontend\VirMar-RWANDA\src\router.jsx (starts at line 5462)
frontend\VirMar-RWANDA\src\api\analyticsApi.js (starts at line 5482)
frontend\VirMar-RWANDA\src\api\authApi.js (starts at line 5502)
frontend\VirMar-RWANDA\src\api\buyerApi.js (starts at line 5527)
frontend\VirMar-RWANDA\src\api\escrowApi.js (starts at line 5566)
frontend\VirMar-RWANDA\src\api\notificationApi.js (starts at line 5605)
frontend\VirMar-RWANDA\src\api\productApi.js (starts at line 5618)
frontend\VirMar-RWANDA\src\api\seller.api.js (starts at line 5655)
frontend\VirMar-RWANDA\src\api\walletApi.js (starts at line 5694)
frontend\VirMar-RWANDA\src\Buyer\Navbar.jsx (starts at line 5718)
frontend\VirMar-RWANDA\src\Buyer\Router.jsx (starts at line 5915)
frontend\VirMar-RWANDA\src\Buyer\components\BuyerDashboard.jsx (starts at line 6012)
frontend\VirMar-RWANDA\src\Buyer\components\Wallet.jsx (starts at line 6160)
frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerAccount.jsx (starts at line 6271)
frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerOrders.jsx (starts at line 6310)
frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerProfile.jsx (starts at line 6537)
frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerWishlist.jsx (starts at line 6681)
frontend\VirMar-RWANDA\src\Buyer\components\account\DepositFailure.jsx (starts at line 6815)
frontend\VirMar-RWANDA\src\Buyer\components\account\DepositSuccess.jsx (starts at line 6842)
frontend\VirMar-RWANDA\src\Buyer\components\account\TransactionHistory.jsx (starts at line 6869)
frontend\VirMar-RWANDA\src\Buyer\components\account\Wallet.jsx (starts at line 6945)
frontend\VirMar-RWANDA\src\Buyer\components\dashboard\AssistantWidget.jsx (starts at line 7036)
frontend\VirMar-RWANDA\src\Buyer\components\dashboard\BuyerNavbar.jsx (starts at line 7061)
frontend\VirMar-RWANDA\src\Buyer\components\dashboard\ProductTable.jsx (starts at line 7105)
frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowExplanation.jsx (starts at line 7211)
frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowFlow.jsx (starts at line 7268)
frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowStatusCard.jsx (starts at line 7371)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductCard.jsx (starts at line 7456)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductDetailModal.jsx (starts at line 7589)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductList.jsx (starts at line 7707)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductListTable.jsx (starts at line 7932)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductTable.jsx (starts at line 8075)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\RatingStars.jsx (starts at line 8211)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\SearchBar.jsx (starts at line 8227)
frontend\VirMar-RWANDA\src\Buyer\components\marketplace\WishlistToggle.jsx (starts at line 8247)
frontend\VirMar-RWANDA\src\Buyer\forms\BudgetForm.jsx (starts at line 8248)
frontend\VirMar-RWANDA\src\Buyer\forms\DepositForm.jsx (starts at line 8384)
frontend\VirMar-RWANDA\src\Buyer\forms\EscrowConfirmationForm.jsx (starts at line 8506)
frontend\VirMar-RWANDA\src\Buyer\forms\LocationForm.jsx (starts at line 8586)
frontend\VirMar-RWANDA\src\Buyer\hooks\useBuyerWallet.js (starts at line 8749)
frontend\VirMar-RWANDA\src\Buyer\hooks\useDepositFunds.js (starts at line 8784)
frontend\VirMar-RWANDA\src\Buyer\hooks\useEscrowFlow.js (starts at line 8818)
frontend\VirMar-RWANDA\src\Buyer\orderchat\Chat.css (starts at line 8863)
frontend\VirMar-RWANDA\src\Buyer\orderchat\ChatInputBox.jsx (starts at line 8927)
frontend\VirMar-RWANDA\src\Buyer\orderchat\ChatMessageList.jsx (starts at line 8962)
frontend\VirMar-RWANDA\src\Buyer\orderchat\OrderChatPage.jsx (starts at line 8983)
frontend\VirMar-RWANDA\src\Buyer\orderchat\useOrderChatSocket.js (starts at line 9029)
frontend\VirMar-RWANDA\src\Buyer\pages\AnalyticsPage.jsx (starts at line 9052)
frontend\VirMar-RWANDA\src\Buyer\pages\BuyerOrders.jsx (starts at line 9124)
frontend\VirMar-RWANDA\src\Buyer\pages\BuyerOrdersWithEscrow.jsx (starts at line 9240)
frontend\VirMar-RWANDA\src\Buyer\pages\OrderDetailsModal.jsx (starts at line 9280)
frontend\VirMar-RWANDA\src\Buyer\pages\PurchaseHistoryPage.jsx (starts at line 9326)
frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\assistantLogic.js (starts at line 9412)
frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\AssistantWadget.jsx (starts at line 9433)
frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\chat.css (starts at line 9487)
frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\ChatBubble.jsx (starts at line 9507)
frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\widget.css (starts at line 9523)
frontend\VirMar-RWANDA\src\hooks\useAuth.js (starts at line 9582)
frontend\VirMar-RWANDA\src\pages\NotFoundPage.css (starts at line 9619)
frontend\VirMar-RWANDA\src\pages\NotFoundPage.jsx (starts at line 9678)
frontend\VirMar-RWANDA\src\Public\Router.jsx (starts at line 9697)
frontend\VirMar-RWANDA\src\Public\components\AboutUs.jsx (starts at line 9736)
frontend\VirMar-RWANDA\src\Public\components\BlogPage.jsx (starts at line 9886)
frontend\VirMar-RWANDA\src\Public\components\ContactPage.jsx (starts at line 10034)
frontend\VirMar-RWANDA\src\Public\components\LandingPage.jsx (starts at line 10134)
frontend\VirMar-RWANDA\src\Public\components\MarketplacePage.jsx (starts at line 10166)
frontend\VirMar-RWANDA\src\Public\components\css\about.css (starts at line 10384)
frontend\VirMar-RWANDA\src\Public\components\css\blog.css (starts at line 10435)
frontend\VirMar-RWANDA\src\Public\components\css\market.css (starts at line 10486)
frontend\VirMar-RWANDA\src\Public\components\landingpage\CallToAction.jsx (starts at line 10590)
frontend\VirMar-RWANDA\src\Public\components\landingpage\FeatureSection.jsx (starts at line 10603)
frontend\VirMar-RWANDA\src\Public\components\landingpage\Footer.jsx (starts at line 10619)
frontend\VirMar-RWANDA\src\Public\components\landingpage\HeroSection.jsx (starts at line 10758)
frontend\VirMar-RWANDA\src\Public\components\landingpage\HowItWorks.jsx (starts at line 10854)
frontend\VirMar-RWANDA\src\Public\components\landingpage\Navbar.jsx (starts at line 10908)
frontend\VirMar-RWANDA\src\Public\components\landingpage\ProductSearchBar.jsx (starts at line 11077)
frontend\VirMar-RWANDA\src\Public\components\landingpage\StatsSection.jsx (starts at line 11118)
frontend\VirMar-RWANDA\src\Public\components\landingpage\TestmonialSection.jsx (starts at line 11173)
frontend\VirMar-RWANDA\src\Public\components\Marketplace\MarketplaceFilters.jsx (starts at line 11194)
frontend\VirMar-RWANDA\src\Public\components\Marketplace\MarketplaceStats.jsx (starts at line 11296)
frontend\VirMar-RWANDA\src\Public\components\Marketplace\ProductDetailsModal.jsx (starts at line 11316)
frontend\VirMar-RWANDA\src\Public\components\Marketplace\ProductList.jsx (starts at line 11385)
frontend\VirMar-RWANDA\src\Public\forms\BuyerLoginForm.jsx (starts at line 11469)
frontend\VirMar-RWANDA\src\Public\forms\BuyerRegisterForm.jsx (starts at line 11537)
frontend\VirMar-RWANDA\src\Public\forms\SellerLoginForm.jsx (starts at line 11615)
frontend\VirMar-RWANDA\src\Public\forms\SellerRegisterForm.jsx (starts at line 11731)
frontend\VirMar-RWANDA\src\Seller\Router.jsx (starts at line 11903)
frontend\VirMar-RWANDA\src\Seller\components\DashboardCharts.jsx (starts at line 11947)
frontend\VirMar-RWANDA\src\Seller\components\DashboardLinks.jsx (starts at line 12063)
frontend\VirMar-RWANDA\src\Seller\components\DashboardNotifications.jsx (starts at line 12206)
frontend\VirMar-RWANDA\src\Seller\components\DashboardQuickLinks.jsx (starts at line 12314)
frontend\VirMar-RWANDA\src\Seller\components\DashboardStats.jsx (starts at line 12403)
frontend\VirMar-RWANDA\src\Seller\components\DashBoardWrapper.jsx (starts at line 12452)
frontend\VirMar-RWANDA\src\Seller\components\DeleteConfirmation.jsx (starts at line 12491)
frontend\VirMar-RWANDA\src\Seller\components\FollowerNotificationList.jsx (starts at line 12516)
frontend\VirMar-RWANDA\src\Seller\components\Modal.jsx (starts at line 12537)
frontend\VirMar-RWANDA\src\Seller\components\product-card.css (starts at line 12574)
frontend\VirMar-RWANDA\src\Seller\components\Product.css (starts at line 12608)
frontend\VirMar-RWANDA\src\Seller\components\Product.jsx (starts at line 12886)
frontend\VirMar-RWANDA\src\Seller\components\ProductCard.jsx (starts at line 13001)
frontend\VirMar-RWANDA\src\Seller\components\ProductOverview.jsx (starts at line 13025)
frontend\VirMar-RWANDA\src\Seller\components\seller.css (starts at line 13066)
frontend\VirMar-RWANDA\src\Seller\components\SellerDashboard.jsx (starts at line 13167)
frontend\VirMar-RWANDA\src\Seller\components\SellerNavbar.jsx (starts at line 13233)
frontend\VirMar-RWANDA\src\Seller\components\SellerProfile.jsx (starts at line 13376)
frontend\VirMar-RWANDA\src\Seller\components\TrustScoreCard.jsx (starts at line 13388)
frontend\VirMar-RWANDA\src\Seller\components\escrow\SellerEscrowStatus.jsx (starts at line 13409)
frontend\VirMar-RWANDA\src\Seller\components\geolocation\AreaSelector.jsx (starts at line 13475)
frontend\VirMar-RWANDA\src\Seller\components\geolocation\DeliveryAreasManager.jsx (starts at line 13631)
frontend\VirMar-RWANDA\src\Seller\components\geolocation\DeliveryFeesForm.jsx (starts at line 13722)
frontend\VirMar-RWANDA\src\Seller\components\geolocation\GeolocationDashboard.jsx (starts at line 13819)
frontend\VirMar-RWANDA\src\Seller\components\geolocation\MapView.jsx (starts at line 13872)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\BuyerInsightsModule.jsx (starts at line 13899)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\CardSummary.jsx (starts at line 13985)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\FiltersPanel.jsx (starts at line 14109)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\MarketConditionAnalytics.jsx (starts at line 14155)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\MarketplaceDashboard.jsx (starts at line 14204)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\SellerCompetitiveInsights.jsx (starts at line 14269)
frontend\VirMar-RWANDA\src\Seller\components\marketplace\TrendingProductsModule.jsx (starts at line 14317)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\EditProfileForm.jsx (starts at line 14373)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProductsGrid.jsx (starts at line 14487)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProfileHeader.jsx (starts at line 14555)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProfileTabs.jsx (starts at line 14587)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\SellerProfile.jsx (starts at line 14613)
frontend\VirMar-RWANDA\src\Seller\components\userAccount\TrustScoreBadge.jsx (starts at line 14746)
frontend\VirMar-RWANDA\src\Seller\forms\AddProductForm.jsx (starts at line 14777)
frontend\VirMar-RWANDA\src\Seller\forms\ProductForm.jsx (starts at line 14879)
frontend\VirMar-RWANDA\src\Seller\orderChart\chat.css (starts at line 14956)
frontend\VirMar-RWANDA\src\Seller\orderChart\SellerChatInputBox.jsx (starts at line 15067)
frontend\VirMar-RWANDA\src\Seller\orderChart\SellerChatMessageList.jsx (starts at line 15103)
frontend\VirMar-RWANDA\src\Seller\orderChart\SellerOrderChatPage.jsx (starts at line 15125)
frontend\VirMar-RWANDA\src\Seller\orderChart\useSellerOrderChatSocket.js (starts at line 15178)
frontend\VirMar-RWANDA\src\Seller\pages\Marketplace.jsx (starts at line 15201)
frontend\VirMar-RWANDA\src\Seller\styles\DashBoard.css (starts at line 15202)
frontend\VirMar-RWANDA\src\Seller\styles\MarketplaceDashboard.css (starts at line 15254)
frontend\VirMar-RWANDA\src\Seller\styles\uiTokens.js (starts at line 15537)

================================================================================

File: eslint.config.js (starts at line 1)

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])



================================================================================

File: git.test.js (starts at line 31)

// import express from "express";

// const app = express();
// const port = 3000;

// // app.get('/', (req, res) => {
// //   res.send('Hello World!');
// //   setInterval(() => {
// //   const buf = Buffer.alloc(1024); // Allocate 1KB briefly
// //   console.log("Memory tick...");
// // }, 600000); // Every 10 minutes

// //})

// app.listen(port, () => {
//   setInterval(() => {
//     const buf = Buffer.alloc(1024); // Allocate 1KB briefly
//     console.log("Memory tick...");
//   }, 600000); // Every 10 minutes

//   console.log(`Server running at http://localhost:${port}`);
// });


const express = require('express');
const app = express();
app.use(express.json());

// In-memory simulation stores
let buyerProfiles = {};
let sellerProfiles = {};
let transactions = [];
let marketInventory = [];
let buyerEngagements = [];
let userNotifications = [];
let reputations = {
  buyers: {},
  sellers: {},
};

// ---------------------------
// Buyer Actions
// ---------------------------

// Deposit RWF to wallet
app.post('/buyer/deposit', (req, res) => {
  const { buyerId, amount } = req.body;
  buyerProfiles[buyerId] = buyerProfiles[buyerId] || { balance: 0, purchases: [], loyaltyPoints: 0 };
  buyerProfiles[buyerId].balance += amount;
  res.send(`Buyer ${buyerId} deposited ${amount} RWF`);
});

// Log product view
app.post('/buyer/view', (req, res) => {
  const { buyerId, productId } = req.body;
  const product = marketInventory.find(p => p.id === productId);
  if (!product) return res.status(404).send('Product not found.');

  buyerEngagements.push({ buyerId, sellerId: product.sellerId, productId, time: Date.now() });

  userNotifications.push({
    sellerId: product.sellerId,
    message: `👀 Buyer ${buyerId} viewed your product: ${product.name}`,
  });

  res.send(`Interaction logged for buyer ${buyerId}`);
});

// Recommend products by past categories
app.get('/buyer/recommendations/:buyerId', (req, res) => {
  const buyer = buyerProfiles[req.params.buyerId];
  if (!buyer) return res.status(404).send('Buyer not found.');

  const categories = buyer.purchases.map(p => p.category);
  const recommended = marketInventory.filter(p => categories.includes(p.category));
  res.send(recommended);
});

// Initiate purchase transaction
app.post('/buyer/pay', (req, res) => {
  const { buyerId, sellerId, amount, item, category } = req.body;

  const buyer = buyerProfiles[buyerId];
  if (!buyer || buyer.balance < amount) {
    return res.status(400).send('Insufficient balance');
  }

  buyer.balance -= amount;

  const record = {
    buyerId,
    sellerId,
    amount,
    item,
    category,
    fulfilled: false,
    verifiedPayment: true,
    verifiedDelivery: false,
    timestamp: Date.now(),
  };

  transactions.push(record);
  res.send(`Transaction initiated for ${item}`);
});

// ---------------------------
// Seller Actions
// ---------------------------

// Register a new product
app.post('/seller/product', (req, res) => {
  const { sellerId, name, price, category } = req.body;
  const id = `${sellerId}-${Date.now()}`;
  marketInventory.push({ id, sellerId, name, price, category });
  res.send(`📦 Product ${name} listed with ID ${id}`);
});

// Fulfill a buyer's order
app.post('/seller/fulfill', (req, res) => {
  const { sellerId, buyerId, item } = req.body;

  let order = transactions.find(o =>
    o.buyerId === buyerId &&
    o.sellerId === sellerId &&
    o.item === item &&
    !o.fulfilled
  );

  if (!order) return res.status(404).send('Order not found');

  order.fulfilled = true;
  order.verifiedDelivery = true;

  sellerProfiles[sellerId] = sellerProfiles[sellerId] || { earnings: 0, fulfilledOrders: 0, badges: [] };
  sellerProfiles[sellerId].earnings += order.amount;
  sellerProfiles[sellerId].fulfilledOrders++;

  if (sellerProfiles[sellerId].fulfilledOrders >= 3 && !sellerProfiles[sellerId].badges.includes("Reliable Seller")) {
    sellerProfiles[sellerId].badges.push("Reliable Seller");
  }

  reputations.sellers[sellerId] = (reputations.sellers[sellerId] || 0) + 1;
  reputations.buyers[buyerId] = (reputations.buyers[buyerId] || 0) + 1;

  buyerProfiles[buyerId].loyaltyPoints += 10;
  buyerProfiles[buyerId].purchases.push({ item, category: order.category });

  res.send(`Order fulfilled. Reputation updated for Buyer ${buyerId} and Seller ${sellerId}`);
});

// Fetch seller's notifications
app.get('/seller/notifications/:sellerId', (req, res) => {
  const { sellerId } = req.params;
  const sellerNotes = userNotifications.filter(n => n.sellerId === sellerId);
  res.send(sellerNotes);
});

// ---------------------------
// Growth & Reputation System
// ---------------------------

// Fetch reputation score
app.get('/reputation/:role/:id', (req, res) => {
  const { role, id } = req.params;
  const score = reputations[role + 's'][id] || 0;
  res.send(`${role} ${id} has a reputation score of ${score}`);
});

// Check wallet or seller earnings
app.get('/wallet/:role/:id', (req, res) => {
  const { role, id } = req.params;
  if (role === 'buyer') {
    const b = buyerProfiles[id];
    if (!b) return res.status(404).send('Buyer not found');
    res.send({ balance: b.balance, loyaltyPoints: b.loyaltyPoints });
  } else {
    const s = sellerProfiles[id];
    if (!s) return res.status(404).send('Seller not found');
    res.send({ earnings: s.earnings, badges: s.badges });
  }
});

// ---------------------------
// Server Start
// ---------------------------

app.listen(3000, () => {
  console.log('🚀 Fintech Relationship Engine active on port 3000');
});



================================================================================

File: index.html (starts at line 221)

<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>try fetch</title>
</head>
<body>
    <div class="container">
        <input type="text">
        <button id="btn">click me</button>
    </div>
    <script>
        const btn = document.getElementById('btn');
        btn.addEventListener('click', async () => {
            try {
                const response = await fetch('http://localhost:5000/');
                const result = await response.text();
                document.querySelector('div').innerText = result;
            } catch (error) {
                console.log(error);vjbl dswd uvfd fcwe
            }
        });
    </script>app.post('/api/data', (req, res) => {
  console.log('Request received:', req.body);
  try {
    // your processing logic
    res.status(200).json({ message: 'Success!' });
  } catch (err) {
    console.error('Error in route:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});
app.get('/', async (req, res) => {
    try {
        const total = await Seller.countDocuments();
        const half = Math.floor(total / 2);
       const randomSellers = await Seller.aggregate([
    { $sample: { size: half } },
    { $project: { password: 0, __v: 0, createdAt: 0, updatedAt: 0 } }
]);
const randomItems = await Item.aggregate([
  { $sample: { size: half } },
  {
    $lookup: {
      from: 'prices',
      localField: 'price',
      foreignField: '_id',
      as: 'priceInfo'
    }
  },
  { $unwind: '$priceInfo' },
  {
    $project: {
      createdAt: 0,
      updatedAt: 0,
      price: 0
    }
  },
  {
    $addFields: {
      reservedPrice: '$priceInfo.reservedPrice'
    }
  }
]);

const randomStore = await Store.aggregate([
    { $sample: { size: half } },
    { $project: { createdAt: 0, updatedAt: 0 } }
]);
        if (randomSellers.length === 0||  randomItems.length === 0) {
            res.status(404).json({ error: 'No sellers found' });
        } else {
            res.status(200).json({ sellers: randomSellers, items: randomItems });
        }
    } catch (error) {
        console.error('Error in root route:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});
    <script>

    </script>
</body>
</html> -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <style>
    /* CSS */
/* styles.css */
body {
  margin: 0;
  padding: 0;
  height: 100vh;
  font-family: 'Segoe UI', sans-serif;
  background: url('bg.jpg') no-repeat center center;
  background-size: cover;
  display: flex;
  align-items: center;
  justify-content: center;
}

.login-screen {
  backdrop-filter: blur(5px);
  background: rgba(255, 255, 255, 0.15);
  padding: 60px;
  border-radius: 20px;
  box-shadow: 0 0 40px rgba(0, 0, 0, 0.3);
}

.login-box {
  width: 300px;
  text-align: center;
}

.avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  margin-bottom: 20px;
}

.username {
  margin-bottom: 20px;
  font-size: 20px;
  color: #fff;
}

input {
  width: 100%;
  padding: 12px;
  margin-bottom: 20px;
  border: none;
  border-radius: 10px;
  background-color: #f0f0f0;
  font-size: 16px;
}

button {
  width: 100%;
  padding: 12px;
  border: none;
  border-radius: 10px;
  background-color: #0078d4;
  color: white;
  font-weight: bold;
  font-size: 16px;
  cursor: pointer;
}

button:hover {
  background-color: #005a9e;
}

.footer-msg {
  margin-top: 10px;
  font-size: 14px;
  color: #eee;
}

  </style>
</head>
<body>
  <!-- HTML -->
<!-- index.html -->
<div class="login-screen">
  <div class="login-box">
    <img src="avatar.png" alt="User Avatar" class="avatar" />
    <h2 class="username">Camble</h2>
    <input type="password" placeholder="Enter your PIN" />
    <button>Sign In</button>
    <p class="footer-msg">Forgot your PIN?</p>
  </div>
</div>


</body>
</html>



================================================================================

File: package.json (starts at line 404)

{
  "name": "virmar-rwanda",
  "version": "1.0.0",
  "main": "backend/server.js",
  "scripts": {
    "start": "nodemon backend/server.js"
  },
  "type": "module",
  "keywords": [],
  "author": "camble",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@chakra-ui/react": "^3.21.1",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "axios": "^1.10.0",
    "bcryptjs": "^3.0.2",
    "bootstrap": "^5.3.7",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^17.0.0",
    "express": "^5.1.0",
    "framer-motion": "^12.23.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.16.1",
    "nodemailer": "^7.0.5",
    "nodemon": "^3.1.10",
    "odbc": "^2.4.9",
    "react-router-dom": "^7.6.3",
    "redis": "^5.6.1",
    "socket.io": "^4.8.1",
    "stripe": "^18.3.0",
    "uuid": "^11.1.0"
  }
}



================================================================================

File: README.md (starts at line 441)

# THE VIRMAR RWANDA


meaning virtual market for rwandans
build by camble to empower rwandan markets enforce research in economy and consumer&producer soveirignit 

# KEY FEATURES

1, authorization and authentication
2, wallet,store,cart and account creation for both buyer and seller
3, consumer->consumer relationships consumer->producer relationships
4, geolocation based seller grouping 
5, secure way to buy and sell products escrow qr codes etc 
6, real time messaging  likes
7, notification handling sms emils internal notifications
8, budgeting and accounting for resources both seller and buyer
9, econmic data analysis
10, 

#pages
currently working on it


================================================================================

File: vite.config.js (starts at line 462)

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})



================================================================================

File: backend\server.js (starts at line 470)

// server.js or app.js
import express from "express";
import dotenv from "dotenv";
import cors from "cors";
import cookieParser from "cookie-parser";
import http from "http";

import connectDB from "./configs/mongo.connect.js";
import { initSocketServer } from "./sockets/sockets.js"; // ✅ adjust the path as needed

// Load env variables
dotenv.config();

// Express app
const app = express();
const server = http.createServer(app); // HTTP server for socket.io

// Connect to MongoDB
connectDB();

// Middlewares
app.use(cookieParser());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.use(cors({
  origin: "http://localhost:5173",
  credentials: true,
}));

// Route imports
import sellerRoutes from "./routes/seller.routes.js";
import buyerRoutes from "./routes/buyer.routes.js";
import publicRoutes from "./routes/public.routes.js";
import escrowRoutes from "./routes/escrow.routes.js";
import transactRoutes from "./routes/transact.routes.js";

// Routes
app.use("/api/seller", sellerRoutes);
app.use("/api/buyer", buyerRoutes);
app.use("/api/public", publicRoutes);
app.use("/api/escrow", escrowRoutes);
app.use('/api/transaction',transactRoutes)

// Error handler
app.use((err, req, res, next) => {
  console.error("💥 Server Error:", err.stack);
  res.status(500).json({ message: "Internal Server Error" });
});

// ✅ Initialize socket.io server
initSocketServer(server);

// Start the server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
});


// stay tuned to my channel to see the sample frontend i build with ai i will rebuild it understanding the concepts if you can help i will send the code ....bye

// Extended feature routes
// import transactRoutes from "./routes/transact.routes.js";
// import orderRoutes from "./routes/order.routes.js";
// import reviewRoutes from "./routes/review.routes.js";
// import inventoryRoutes from "./routes/inventory.routes.js";
// import analyticsRoutes from "./routes/analytics.routes.js";
// import shippingRoutes from "./routes/shipping.routes.js";

// Optional middleware (imported but unused)
// import protectBuyerRoute from "./configs/middleware/potect.buyerRoute.js";

// app.use("/api/transactions", transactRoutes);
// app.use("/api/orders", orderRoutes);
// app.use("/api/reviews", reviewRoutes);
// app.use("/api/inventory", inventoryRoutes);
// app.use("/api/analytics", analyticsRoutes);
// app.use("/api/shipping", shippingRoutes);

// Global error handler



================================================================================

File: backend\test.js (starts at line 552)

import dotenv from 'dotenv';
dotenv.config();

import redisClient from './utils/redis.connect.js';

async function testRedis() {
  try {
    await redisClient.connect();

    await redisClient.set('virmar_test_key', 'It works!');
    const value = await redisClient.get('virmar_test_key');

    console.log('🧠 Redis Test Value:', value);

    await redisClient.quit();
  } catch (err) {
    console.error('🚨 Redis Test Error:', err);
  }
}

testRedis();


// import jwt from 'jsonwebtoken';
// import 'dotenv/config';

// const token = jwt.sign({ foo: 'bar' }, process.env.JWT_SECRET_SELLER, { expiresIn: '1d' });
// console.log('Token:', token);

// jwt.verify(token, process.env.JWT_SECRET_SELLER, (err, decoded) => {
//   if (err) {
//     console.error('Verify error:', err);
//   } else {
//     console.log('Decoded:', decoded);
//   }
// });

// console.log(email)

//check for existing email
//     const emailExist = await Seller.findOne({email})

//     if(emailExist){return res.status(404).json({message:"existing email"})}

//     const nameExist = await Seller.findOne({name})

//     if(nameExist){return res.status(404).json({message:"existing username"})}

//     const newSeller = new Seller({
//         name:name,
//         password:password, //i will hash it later
//         email:email,
//         fullname:fullname,
//         phone:phone
//     })

//     if(newSeller){
//       await newSeller.save();

//       const store  = await Store.create({
//         name: `${newSeller.name}'s Store`,
//         seller_id: newSeller._id // Use seller_id as required by your Store schema
//       });

//       // Optionally, you can associate the store with the seller if needed
//       // newSeller.store = store._id;
//       // await newSeller.save();

//       // Token and response
//       const { token, seller: SellerNoPassword } = giveTokenAndCookieForSeller(res, newSeller);

//       res.status(201).json({
//         message: "seller created successfully",
//         seller: SellerNoPassword
//       });
//       return;
//     }

//     const { token, seller: SellerNoPassword } = giveTokenAndCookieForSeller(res, newSeller);

//     res.status(201).json({
//     message: "seller created successfully",
//     seller: SellerNoPassword
// });
//     // const SellerNoPassword = await Seller.findById(newSeller._id).select('-password')
//     // res.status(201).json({
//     //     message:"seller created successfully",
//     //     seller:SellerNoPassword
//     // })
// i am goin to show you my code base and you will help me create ui
// hi coder and programmers either new or old help me out 
// what am building is virmar in rwanda a marketplace for locals


================================================================================

File: backend\configs\mongo.connect.js (starts at line 644)

import mongoose from "mongoose";
import dotenv from 'dotenv'

dotenv.config()


const connectDB = async ()=> {
    try {
        const conn = mongoose.connect(process.env.MONGO_URI)
        console.log(`MongoDB connected`)
        

    } catch (error) {
        console.log(`error while connecting db ${error}`)
        process.exit(1)

    }
    
}

export default connectDB


================================================================================

File: backend\configs\token.config.buyer.js (starts at line 665)

import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import Buyer from '../models/buyer.model.js';
dotenv.config();

async function generateTokenAndSetCookie (res, Buyer) {
    const token = jwt.sign({id: Buyer._id, role:"buyer"},process.env.JWT_SECRET_BUYER,{expiresIn: '1d'});
    res.cookie('token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'Strict',
        maxAge: 24 * 60 * 60 * 1000
    });
    return {
        token,
        buyer: {
            _id: Buyer._id,
            name: Buyer.name,
            email: Buyer.email,
            role: Buyer.role,
            isActive: Buyer.isActive,
            isVerified: Buyer.isVerified
        }
    };
}
export default generateTokenAndSetCookie
// token configuration



================================================================================

File: backend\configs\token.config.seller.js (starts at line 693)

import jwt from 'jsonwebtoken'
import dotenv from 'dotenv';
dotenv.config();

export const giveTokenAndCookieForSeller = (res, seller) => {
    // Generate a JWT token
    const token = jwt.sign(
        { id: seller._id, role:"seller" },
        process.env.JWT_SECRET_SELLER, // Use a different secret for sellers
        { expiresIn: '1d' }
    );
    console.log("🚀 ~ file: token.config.seller.js:9 ~ giveTokenAndCookieForSeller ~ token:", token)

    // Set the token in a cookie
    res.cookie('token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production', // Use secure cookies in production
        sameSite: 'Strict',
        maxAge: 24 * 60 * 60 * 1000 // 1 day
    });
    console.log("🚀 ~ file: token.config.seller.js:13 ~ giveTokenAndCookieForSeller ~ res.cookie:", res.cookie)

    // Return the token and seller info (excluding password)
    return {
        token,
        seller: {
            _id: seller._id,
            name: seller.name,
            email: seller.email,
            role: seller.role,
            isActive: seller.isActive,
            isVerified: seller.isVerified
        }
    };
    console.log("🚀 ~ file: token.config.seller.js:19 ~ giveTokenAndCookieForSeller ~ return:")
}




================================================================================

File: backend\configs\middleware\potect.buyerRoute.js (starts at line 731)

import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
dotenv.config();

async function protectBuyerRoute(req, res, next) {
  try {
    const token = req.cookies.token || req.headers.authorization?.split("")[1];

    if (!token) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET_BUYER);
    } catch (error) {
      if (error.name === "TokenExpiredError") {
        return res.status(401).json({ message: "Token expired" });
      }
      console.log(error);
      res.status(403).json({ message: "Invalid token" });
    }
    req.user = decoded;
    next();
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal Server Error from protect routes", error: error.message });
    next();
  }
}

export default protectBuyerRoute;
// these are middlewares to protect routes


================================================================================

File: backend\configs\middleware\protect.admin.js (starts at line 764)

// This is a conceptual middleware. You need to implement it based on your token structure.
// It should typically decode the token and check the user's role.

const protectAdminRoute = (req, res, next) => {
  // Assuming your authentication middleware (e.g., protectBuyerRoute or protectSellerRoute)
  // has already populated req.user or req.seller with user/seller details including role.
  // Or, you might have a separate generic authentication middleware that populates req.auth.user.

  // For simplicity, let's assume req.user is populated by a generic auth middleware
  // and it contains a 'role' field.
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ message: "Forbidden: Admin access required" });
  }
  next();
};

export default protectAdminRoute;


================================================================================

File: backend\configs\middleware\protect.sellerRoute.js (starts at line 781)

import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
dotenv.config();

async function protectSellerRoute(req, res, next) {
  try {
    // Extract token from cookie or Authorization header
    const authHeader = req.headers.authorization;
    const token =
      req.cookies.token ||
      (authHeader && authHeader.startsWith("Bearer ") && authHeader.split(" ")[1]);

    if (!token) {
      return res.status(401).json({ message: "Unauthorized: No token provided" });
    }

    // Debug logs (optional during development)
    console.log("🔐 Token received:", token);
    console.log("🔑 Using seller secret:", process.env.JWT_SECRET_SELLER);

    // Verify token using seller secret
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET_SELLER);
      console.log("✅ Decoded Token:", decoded);
    } catch (error) {
      if (error.name === "TokenExpiredError") {
        return res.status(401).json({ message: "Token expired" });
      }
      return res.status(403).json({ message: "Invalid token" });
    }

    // Ensure decoded payload contains seller ID
    if (!decoded || !decoded.id) {
      return res.status(401).json({ message: "Unauthorized: Invalid payload" });
    }

    // Attach seller info to request for downstream use
    req.seller = decoded // thought i got enough but THIS ERROR HMM
   // req.user = decoded; // attaches { id: '...' } directly
   console.log("🚀 ~ file: protect.sellerRoute.js:45 ~ protectSellerRoute ~ req.user:", req.seller)

    next();

  } catch (error) {
    console.error("🚨 Middleware error:", error.message );
    return res.status(500).json({
      message: "Internal Server Error from protectSellerRoute",
      error: error.message
    });
  }
}

export default protectSellerRoute;



================================================================================

File: backend\configs\middleware\protectRoutes.js (starts at line 836)

import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
/**
 * this is public protect routes the one v0 told me to use
 */

dotenv.config();

async function protectRoutes(req, res, next) {
  try {
    const token =
      req.cookies?.token || req.headers.authorization?.split(' ')[1];

    if (!token) {
      return res.status(403).json({ message: 'Unauthorized: No token provided' });
    }

    let decoded;

    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET_BUYER);
    } catch (errBuyer) {
      try {
        decoded = jwt.verify(token, process.env.JWT_SECRET_SELLER);
      } catch (errSeller) {
        return res.status(401).json({ error: 'Invalid token' });
      }
    }

    const { role, id } = decoded;
    req.user = { role, id };
    // attach for downstream use
    console.log('Decoded payload:', decoded);
    console.log('req.user being set:', { role, id });

    next();

  } catch (error) {
    console.error('Error protecting routes:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
}

export default protectRoutes



================================================================================

File: backend\controllers\analyticscontrollers.js (starts at line 881)

import Analytics from "../models/analytics.model.js";
import Order from "../models/order.model.js";
import Buyer from "../models/buyer.model.js";
import Seller from "../models/sellers.model.js";
import Item from "../models/items.model.js";
import Category from "../models/category.model.js";
import Review from "../models/review.model.js";
import Wallet from "../models/wallet.schema.js";
import mongoose from "mongoose";

// Generate comprehensive analytics for a specific period
export const generateAnalytics = async (req, res) => {
  console.log("📊 Generating marketplace analytics");
  const { period = "daily", date } = req.body;
  
  try {
    const targetDate = date ? new Date(date) : new Date();
    const startDate = getStartDate(targetDate, period);
    const endDate = getEndDate(targetDate, period);
    
    console.log(`📅 Analyzing period: ${period} from ${startDate} to ${endDate}`);
    
    // Check if analytics already exist for this period
    let analytics = await Analytics.findOne({ period, date: targetDate });
    
    if (!analytics) {
      analytics = new Analytics({ period, date: targetDate });
    }
    
    // 1. Calculate marketplace-wide metrics
    const marketplaceMetrics = await calculateMarketplaceMetrics(startDate, endDate);
    analytics.marketplace = marketplaceMetrics;
    
    // 2. Calculate category metrics
    const categoryMetrics = await calculateCategoryMetrics(startDate, endDate);
    analytics.categoryMetrics = categoryMetrics;
    
    // 3. Calculate top performers
    const topSellers = await calculateTopSellers(startDate, endDate);
    const topProducts = await calculateTopProducts(startDate, endDate);
    analytics.topSellers = topSellers;
    analytics.topProducts = topProducts;
    
    // 4. Calculate payment method analytics
    const paymentMetrics = await calculatePaymentMetrics(startDate, endDate);
    analytics.paymentMetrics = paymentMetrics;
    
    // 5. Calculate health scores
    const healthScores = await calculateHealthScores(marketplaceMetrics);
    analytics.healthScores = healthScores;
    
    await analytics.save();
    
    res.status(200).json({
      message: "Analytics generated successfully",
      analytics,
      period: { start: startDate, end: endDate }
    });
    
  } catch (error) {
    console.log(`❌ Error generating analytics: ${error}`);
    res.status(500).json({ message: "Error generating analytics", error: error.message });
  }
};

// Get analytics dashboard data
export const getDashboardAnalytics = async (req, res) => {
  console.log("📈 Getting dashboard analytics");
  const { period = "daily", limit = 30 } = req.query;
  
  try {
    // Get recent analytics
    const recentAnalytics = await Analytics.find({ period })
      .sort({ date: -1 })
      .limit(parseInt(limit));
    
    // Get current period analytics
    const currentAnalytics = recentAnalytics[0];
    
    // Calculate trends (compare with previous period)
    const previousAnalytics = recentAnalytics[1];
    const trends = calculateTrends(currentAnalytics, previousAnalytics);
    
    // Get real-time metrics (today's data)
    const realTimeMetrics = await getRealTimeMetrics();
    
    res.status(200).json({
      message: "Dashboard analytics retrieved successfully",
      current: currentAnalytics,
      trends,
      realTime: realTimeMetrics,
      historical: recentAnalytics
    });
    
  } catch (error) {
    console.log(`❌ Error getting dashboard analytics: ${error}`);
    res.status(500).json({ message: "Error retrieving dashboard analytics" });
  }
};

// Get economic health report
export const getEconomicHealthReport = async (req, res) => {
  console.log("🏥 Generating economic health report");
  
  try {
    // Get latest analytics
    const latestAnalytics = await Analytics.findOne()
      .sort({ date: -1 });
    
    if (!latestAnalytics) {
      return res.status(404).json({ message: "No analytics data available" });
    }
    
    // Calculate detailed economic indicators
    const economicIndicators = await calculateEconomicIndicators();
    
    // Risk assessment
    const riskAssessment = await calculateRiskAssessment();
    
    // Growth projections
    const growthProjections = await calculateGrowthProjections();
    
    // Market concentration analysis
    const marketConcentration = await calculateMarketConcentration();
    
    const healthReport = {
      overview: {
        overallHealth: latestAnalytics.healthScores.overall,
        lastUpdated: latestAnalytics.date,
        period: latestAnalytics.period
      },
      economicIndicators,
      riskAssessment,
      growthProjections,
      marketConcentration,
      recommendations: generateHealthRecommendations(latestAnalytics)
    };
    
    res.status(200).json({
      message: "Economic health report generated successfully",
      healthReport
    });
    
  } catch (error) {
    console.log(`❌ Error generating health report: ${error}`);
    res.status(500).json({ message: "Error generating health report" });
  }
};

// Get seller performance analytics
export const getSellerAnalytics = async (req, res) => {
  console.log("🏪 Getting seller analytics");
  const sellerId = req.seller.id;
  const { period = "monthly", months = 6 } = req.query;
  
  try {
    const endDate = new Date();
    const startDate = new Date();
    startDate.setMonth(startDate.getMonth() - parseInt(months));
    
    // Get seller's orders for the period
    const orders = await Order.find({
      seller_id: sellerId,
      createdAt: { $gte: startDate, $lte: endDate }
    }).populate('items.item_id');
    
    // Calculate seller metrics
    const sellerMetrics = {
      // Revenue metrics
      totalRevenue: orders.reduce((sum, order) => sum + order.economicMetrics.sellerRevenue, 0),
      totalOrders: orders.length,
      averageOrderValue: orders.length > 0 ? 
        orders.reduce((sum, order) => sum + order.totalAmount, 0) / orders.length : 0,
      
      // Performance metrics
      completionRate: orders.length > 0 ? 
        (orders.filter(order => order.status === "completed").length / orders.length) * 100 : 0,
      cancellationRate: orders.length > 0 ? 
        (orders.filter(order => order.status === "cancelled").length / orders.length) * 100 : 0,
      
      // Product metrics
      totalProducts: await Item.countDocuments({ seller_id: sellerId }),
      activeProducts: await Item.countDocuments({ seller_id: sellerId, status: "available" }),
      
      // Time-based analysis
      monthlyBreakdown: await getSellerMonthlyBreakdown(sellerId, startDate, endDate),
      
      // Top performing products
      topProducts: await getSellerTopProducts(sellerId, startDate, endDate),
      
      // Customer satisfaction
      averageRating: await getSellerAverageRating(sellerId),
      totalReviews: await Review.countDocuments({ seller_id: sellerId, status: "approved" })
    };
    
    // Calculate growth trends
    const growthTrends = await calculateSellerGrowthTrends(sellerId, startDate, endDate);
    
    // Generate recommendations
    const recommendations = generateSellerRecommendations(sellerMetrics);
    
    res.status(200).json({
      message: "Seller analytics retrieved successfully",
      metrics: sellerMetrics,
      trends: growthTrends,
      recommendations
    });
    
  } catch (error) {
    console.log(`❌ Error getting seller analytics: ${error}`);
    res.status(500).json({ message: "Error retrieving seller analytics" });
  }
};

// Helper functions for analytics calculations

const calculateMarketplaceMetrics = async (startDate, endDate) => {
  console.log("🔢 Calculating marketplace metrics");
  
  // Orders analysis
  const orders = await Order.find({
    createdAt: { $gte: startDate, $lte: endDate }
  });
  
  const totalRevenue = orders.reduce((sum, order) => sum + order.totalAmount, 0);
  const platformRevenue = orders.reduce((sum, order) => sum + order.platformFee, 0);
  const sellerRevenue = orders.reduce((sum, order) => sum + order.economicMetrics.sellerRevenue, 0);
  const taxRevenue = orders.reduce((sum, order) => sum + order.tax, 0);
  
  // User metrics
  const newBuyers = await Buyer.countDocuments({
    createdAt: { $gte: startDate, $lte: endDate }
  });
  
  const newSellers = await Seller.countDocuments({
    createdAt: { $gte: startDate, $lte: endDate }
  });
  
  // Active users (users who made transactions in this period)
  const activeBuyerIds = [...new Set(orders.map(order => order.buyer_id.toString()))];
  const activeSellerIds = [...new Set(orders.map(order => order.seller_id.toString()))];
  
  // Product metrics
  const newProducts = await Item.countDocuments({
    createdAt: { $gte: startDate, $lte: endDate }
  });
  
  const soldProducts = orders.reduce((sum, order) => 
    sum + order.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0
  );
  
  // Calculate financial health indicators
  const totalWalletBalance = await Wallet.aggregate([
    { $group: { _id: null, total: { $sum: "$balance" } } }
  ]);
  
  const liquidityRatio = totalWalletBalance[0]?.total / (totalRevenue || 1);
  
  return {
    totalRevenue,
    platformRevenue,
    sellerRevenue,
    taxRevenue,
    totalOrders: orders.length,
    completedOrders: orders.filter(order => order.status === "completed").length,
    cancelledOrders: orders.filter(order => order.status === "cancelled").length,
    averageOrderValue: orders.length > 0 ? totalRevenue / orders.length : 0,
    newBuyers,
    newSellers,
    activeBuyers: activeBuyerIds.length,
    activeSellers: activeSellerIds.length,
    totalProducts: await Item.countDocuments(),
    newProducts,
    soldProducts,
    conversionRate: activeBuyerIds.length > 0 ? (orders.length / activeBuyerIds.length) * 100 : 0,
    liquidityRatio: liquidityRatio || 0,
    marketplaceVelocity: orders.length / ((endDate - startDate) / (1000 * 60 * 60 * 24)) // Orders per day
  };
};

const calculateCategoryMetrics = async (startDate, endDate) => {
  console.log("📂 Calculating category metrics");
  
  const categoryMetrics = await Order.aggregate([
    {
      $match: {
        createdAt: { $gte: startDate, $lte: endDate }
      }
    },
    { $unwind: "$items" },
    {
      $lookup: {
        from: "items",
        localField: "items.item_id",
        foreignField: "_id",
        as: "itemDetails"
      }
    },
    { $unwind: "$itemDetails" },
    {
      $lookup: {
        from: "categories",
        localField: "itemDetails.category_id",
        foreignField: "_id",
        as: "categoryDetails"
      }
    },
    { $unwind: "$categoryDetails" },
    {
      $group: {
        _id: "$categoryDetails._id",
        categoryName: { $first: "$categoryDetails.name" },
        revenue: { $sum: "$items.totalPrice" },
        orders: { $sum: 1 },
        products: { $addToSet: "$items.item_id" },
        totalQuantity: { $sum: "$items.quantity" }
      }
    },
    {
      $project: {
        category_id: "$_id",
        categoryName: 1,
        revenue: 1,
        orders: 1,
        products: { $size: "$products" },
        averagePrice: { $divide: ["$revenue", "$totalQuantity"] }
      }
    },
    { $sort: { revenue: -1 } }
  ]);
  
  // Calculate market share for each category
  const totalRevenue = categoryMetrics.reduce((sum, cat) => sum + cat.revenue, 0);
  
  return categoryMetrics.map(category => ({
    ...category,
    marketShare: totalRevenue > 0 ? (category.revenue / totalRevenue) * 100 : 0
  }));
};

const calculateTopSellers = async (startDate, endDate) => {
  console.log("🏆 Calculating top sellers");
  
  const topSellers = await Order.aggregate([
    {
      $match: {
        createdAt: { $gte: startDate, $lte: endDate },
        status: { $in: ["completed", "delivered"] }
      }
    },
    {
      $group: {
        _id: "$seller_id",
        revenue: { $sum: "$economicMetrics.sellerRevenue" },
        orders: { $sum: 1 }
      }
    },
    {
      $lookup: {
        from: "sellers",
        localField: "_id",
        foreignField: "_id",
        as: "sellerDetails"
      }
    },
    { $unwind: "$sellerDetails" },
    {
      $lookup: {
        from: "reviews",
        let: { sellerId: "$_id" },
        pipeline: [
          { $match: { $expr: { $eq: ["$seller_id", "$$sellerId"] }, status: "approved" } },
          { $group: { _id: null, avgRating: { $avg: "$rating" } } }
        ],
        as: "ratingData"
      }
    },
    {
      $project: {
        seller_id: "$_id",
        sellerName: "$sellerDetails.name",
        revenue: 1,
        orders: 1,
        rating: { $ifNull: [{ $arrayElemAt: ["$ratingData.avgRating", 0] }, 0] }
      }
    },
    { $sort: { revenue: -1 } },
    { $limit: 10 }
  ]);
  
  return topSellers;
};

const calculateTopProducts = async (startDate, endDate) => {
  console.log("🥇 Calculating top products");
  
  const topProducts = await Order.aggregate([
    {
      $match: {
        createdAt: { $gte: startDate, $lte: endDate },
        status: { $in: ["completed", "delivered"] }
      }
    },
    { $unwind: "$items" },
    {
      $group: {
        _id: "$items.item_id",
        revenue: { $sum: "$items.totalPrice" },
        unitsSold: { $sum: "$items.quantity" }
      }
    },
    {
      $lookup: {
        from: "items",
        localField: "_id",
        foreignField: "_id",
        as: "itemDetails"
      }
    },
    { $unwind: "$itemDetails" },
    {
      $lookup: {
        from: "reviews",
        let: { itemId: "$_id" },
        pipeline: [
          { $match: { $expr: { $eq: ["$item_id", "$$itemId"] }, status: "approved" } },
          { $group: { _id: null, avgRating: { $avg: "$rating" } } }
        ],
        as: "ratingData"
      }
    },
    {
      $project: {
        item_id: "$_id",
        productName: "$itemDetails.name",
        revenue: 1,
        unitsSold: 1,
        rating: { $ifNull: [{ $arrayElemAt: ["$ratingData.avgRating", 0] }, 0] }
      }
    },
    { $sort: { revenue: -1 } },
    { $limit: 10 }
  ]);
  
  return topProducts;
};

const calculatePaymentMetrics = async (startDate, endDate) => {
  console.log("💳 Calculating payment metrics");
  
  const paymentMetrics = await Order.aggregate([
    {
      $match: {
        createdAt: { $gte: startDate, $lte: endDate }
      }
    },
    {
      $group: {
        _id: "$paymentMethod",
        usage: { $sum: 1 },
        revenue: { $sum: "$totalAmount" },
        successful: {
          $sum: { $cond: [{ $eq: ["$paymentStatus", "completed"] }, 1, 0] }
        }
      }
    },
    {
      $project: {
        method: "$_id",
        usage: 1,
        revenue: 1,
        successRate: { $multiply: [{ $divide: ["$successful", "$usage"] }, 100] }
      }
    }
  ]);
  
  return paymentMetrics;
};

const calculateHealthScores = async (marketplaceMetrics) => {
  console.log("🏥 Calculating health scores");
  
  // Overall health score (weighted average of other scores)
  const liquidityScore = Math.min(marketplaceMetrics.liquidityRatio * 20, 100);
  const growthScore = Math.min(marketplaceMetrics.marketplaceVelocity * 10, 100);
  const stabilityScore = Math.min((marketplaceMetrics.completedOrders / marketplaceMetrics.totalOrders) * 100, 100);
  const competitionScore = Math.min(marketplaceMetrics.activeSellers * 2, 100);
  
  const overallScore = (liquidityScore + growthScore + stabilityScore + competitionScore) / 4;
  
  return {
    overall: Math.round(overallScore),
    liquidity: Math.round(liquidityScore),
    growth: Math.round(growthScore),
    stability: Math.round(stabilityScore),
    competition: Math.round(competitionScore)
  };
};

// Helper function to get date ranges
const getStartDate = (date, period) => {
  const start = new Date(date);
  switch (period) {
    case "daily":
      start.setHours(0, 0, 0, 0);
      break;
    case "weekly":
      start.setDate(start.getDate() - start.getDay());
      start.setHours(0, 0, 0, 0);
      break;
    case "monthly":
      start.setDate(1);
      start.setHours(0, 0, 0, 0);
      break;
    case "quarterly":
      start.setMonth(Math.floor(start.getMonth() / 3) * 3, 1);
      start.setHours(0, 0, 0, 0);
      break;
    case "yearly":
      start.setMonth(0, 1);
      start.setHours(0, 0, 0, 0);
      break;
  }
  return start;
};

const getEndDate = (date, period) => {
  const end = new Date(date);
  switch (period) {
    case "daily":
      end.setHours(23, 59, 59, 999);
      break;
    case "weekly":
      end.setDate(end.getDate() - end.getDay() + 6);
      end.setHours(23, 59, 59, 999);
      break;
    case "monthly":
      end.setMonth(end.getMonth() + 1, 0);
      end.setHours(23, 59, 59, 999);
      break;
    case "quarterly":
      end.setMonth(Math.floor(end.getMonth() / 3) * 3 + 3, 0);
      end.setHours(23, 59, 59, 999);
      break;
    case "yearly":
      end.setMonth(11, 31);
      end.setHours(23, 59, 59, 999);
      break;
  }
  return end;
};

// Additional helper functions for comprehensive analytics
const calculateTrends = (current, previous) => {
  if (!current || !previous) return {};
  
  const calculateChange = (currentVal, previousVal) => {
    if (!previousVal) return 0;
    return ((currentVal - previousVal) / previousVal) * 100;
  };
  
  return {
    revenue: calculateChange(current.marketplace.totalRevenue, previous.marketplace.totalRevenue),
    orders: calculateChange(current.marketplace.totalOrders, previous.marketplace.totalOrders),
    users: calculateChange(current.marketplace.activeBuyers, previous.marketplace.activeBuyers),
    conversion: calculateChange(current.marketplace.conversionRate, previous.marketplace.conversionRate)
  };
};

const getRealTimeMetrics = async () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const todayOrders = await Order.countDocuments({
    createdAt: { $gte: today }
  });
  
  const todayRevenue = await Order.aggregate([
    { $match: { createdAt: { $gte: today } } },
    { $group: { _id: null, total: { $sum: "$totalAmount" } } }
  ]);
  
  return {
    todayOrders,
    todayRevenue: todayRevenue[0]?.total || 0,
    onlineUsers: 0, // Would need WebSocket tracking
    pendingOrders: await Order.countDocuments({ status: "pending" })
  };
};


================================================================================

File: backend\controllers\buyer.controllers.js (starts at line 1470)

// i want to start fresh
import bcrypt from "bcryptjs";
import generateTokenAndSetCookie from "../configs/token.config.buyer.js";
import Buyer from "../models/buyer.model.js";
import Wallet from "../models/wallet.schema.js";
import Item from "../models/items.model.js";
import { generateNotification } from "../utils/notification.maker.js";
import { sendEmailNotification } from "../utils/email.notification.js";
import { initiatePayment } from "../utils/momoService.js";
// import { verifyTransaction } from "../utils/transaction.init.js";

// more to do in this register function like caching

export const register = async (req, res) => {
  console.log("register");
  const { email, name, password, phone } = req.body;
  try {
    if (!email || !name || !password) {
      return res.status(404).json({ message: "missing fields" });
    }
    const emailExist = await Buyer.findOne({ email });
    if (emailExist) {
      return res.status(404).json({ message: "existing email" });
    }
    const nameExist = await Buyer.findOne({ name });
    if (nameExist) {
      return res.status(404).json({ message: "existing username" });
    }
    const newBuyer = new Buyer({
      name: name,
      password: password,
      email: email,
      phone: phone,
    });
    if (newBuyer) {
      //create a wallet
      const newWallet = new Wallet({
        balance: 0,
        owner: newBuyer._id,
        ownerModel: "Buyer",
        currency: "RWF",
      });
      await newWallet.save();
      newBuyer.wallet_id = newWallet._id;
      console.log("wallet created", newWallet);
      generateTokenAndSetCookie(res, newBuyer);
    }

    await newBuyer.save();
    const buyerNoPassword = newBuyer.toObject();
    delete buyerNoPassword.password;
    // generateNotification('welcome',`welcome ${buyerNoPassword.name}`,buyerNoPassword._id,Buyer)
    // sendEmailNotification(generateNotification('welcome',`welcome ${buyerNoPassword.name}`,buyerNoPassword._id,'Buyer'))
    generateNotification(
      "welcome back",
      `welcome back ${buyerNoPassword.name}`,
      buyerNoPassword._id,
      "Buyer"
    );

    sendEmailNotification(
      "welcome back",
      "you are successfuly logged in with virmar account",
      buyerNoPassword.email
    );
    console.log(`sent email notification`);
    res
      .status(200)
      .json({ message: "successfuly registered", buyer: buyerNoPassword });
  } catch (error) {
    console.log("error in register" + error);
    res.status(500).json({ message: error });
  }
};

export const login = async (req, res) => {
  console.log(req.body);
  const { email, password, name } = req.body;

  try {
    console.log(email);
    //validate emails
    const buyer = await Buyer.findOne({ email });

    if (!buyer) {
      return res.status(403).json({ message: "no user please register" });
    }

    //check if the password is matched
    const isvalidPassword = await bcrypt.compare(password, buyer.password);
    if (!isvalidPassword) {
      return res.status(403).json({ message: "invalid credentials" });
    }

    generateTokenAndSetCookie(res, buyer);

    const buyerWithoutPassword = buyer.toObject();
    delete buyerWithoutPassword.password;

    res
      .status(200)
      .json({ message: "successfully logged in", buyer: buyerWithoutPassword });
  } catch (error) {
    console.log(`erro logging in ${error}`);
    res.status(500).json({ meesage: "error loging in" });
  }
};

export const logout = async (req, res) => {
  try {
    res.clearCookie("token"); // Clear the cookie from the browser

    res.status(200).json({ message: "successfully logged out" });
  } catch (error) {
    console.log(`error logging out ${error}`);
    res.status(500).json({ message: "error logging out" });
  }
};

export const getUserProfile = async (req, res) => {
  const userid = req.user.id;
  try {
    if (!userid) {
      return res.status(404).json({ message: "not authorized" });
    }
    const buyer = await Buyer.findById(userid);
    res.status(200).json({ message: "successfully got profile", buyer: buyer });
  } catch (error) {
    console.log(`error getting profile ${error}`);
    res.status(500).json({ message: "error getting profile" });
  }
};

//cart activities

// export const addItemToCart = async (req, res) => {
//   // when the item is added to cart
//   const product_id = req.params;
//   const { quantity } = req.body;
//   try {
//     const userid = req.user.id;
//     if (!userid) {
//       return res.status(404).json({ message: "not authorized" });
//     }
//     const buyer = await Buyer.findById(userid);
//     //updating the item status to reserved
//     //update the quantity

//     await Item.findByIdAndUpdate(product_id, {
//       status: "reserved",
//       quantity: quantity,
//     });
//     console;
//     buyer.cart.push(product_id);
//     await buyer.save();
//     res.status(200).json({ message: "successfully added item to cart" });
//   } catch (error) {
//     console.log(`error adding item to cart ${error}`);
//     res.statue(500).json({ message: "error adding item to cart" });
//   }
// };

export const getCartItems = async (req, res) => {
  const info = req.user.id;

  console.log(info);

  try {
    if (!info) {
      return res.status(400).json({ message: "unauthorized" });
    }
    const CartItems = await Buyer.findOne({ info });
    console.log("fetched data");
    if (!CartItems) {
      return res.status(401).json({ message: "no item in your cart" });
    }
    return res.status(404).json({ message: "success", data: CartItems });
    //TODO some operations
  } catch (error) {
    console.log("error getting item", error);
  }
};

export const depositToWallet = async (req, res) => {
  const userId = req.user.id;
  const { amount, externalId, payer } = req.body;

  // ✅ Flatten frontend structure for cleaner payloads
  const { partyIdType, partyId } = payer || {};

  // ✅ Validate incoming fields
  if (!partyId || !amount || !externalId || !userId) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    // ✅ Step 1: Initiate payment (request funds from payer)
    const paymentRequest = await initiatePayment(partyId, amount, externalId);

    // ✅ Step 2: Confirm that payment was completed externally (e.g., via MoMo verification)
    const isVerified = await verifyPaymentStatus(externalId);
    if (!isVerified) {
      return res.status(402).json({ error: "Payment not verified yet. Please retry once confirmed." });
    }

    // ✅ Step 3: Load buyer
    const buyer = await Buyer.findById(userId);
    if (!buyer) throw new Error("Buyer not found");

    // ✅ Step 4: Load wallet
    const wallet = await Wallet.findById(buyer.wallet_id);
    if (!wallet) throw new Error("Wallet not found");

    // ✅ Step 5: Update wallet balance
    wallet.balance += Number(amount);
    await wallet.save();

    // ✅ Step 6: Log this deposit as a financial transaction
    await Transaction.create({
      item_id: null,           // This is a deposit, not linked to an item
      buyer_id: userId,
      seller_id: null,         // No seller involved in deposits
      quantity: 1,
      totalPrice: amount,
      type: "deposit",         // Custom flag to distinguish from purchases
      timestamp: new Date()
    });

    // ✅ Optional: Notify the user of successful deposit
    await createNotification({
      title: "Deposit Confirmed",
      message: `Your deposit of ${amount} RWF has been credited.`,
      recipientId: userId,
      recipientModel: "Buyer"
    });

    // ✅ Final response
    res.status(200).json({
      status: "✅ Deposit complete",
      payment: paymentRequest,
      wallet
    });

  } catch (error) {
    console.error(`Deposit error: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
}
// export const

//buyer gets money through deposit, gift, good return, transaction fail, crypto

export const withdrawFromWallet = async (req,res)=>{
  const userId = req.user.id
  console.log(userId)
  //not yet done
  /**
   * algorithm logic
   * 
   */

}



export const deleteCartItem = async (req,res) =>{
  const item_id = req.params
  const user = req.user

  try {
    // const deleteItem = await Item.findByIdAndUpdate({ })
    res.status(400).json({message:'this is delete cart item route'})
    
  } catch (error) {
    console.log(error)
    res.status(500).json({message:'error visiting the delete cart item route'})

  }
}

// backend/controllers/cart.controller.js


export const addItemToCart = async (req, res) => {
  const buyerId = req.user.id;
  const { itemId, quantity } = req.body;

  try {
    const item = await Item.findById(itemId);
    if (!item || item.quantity < quantity) {
      return res.status(400).json({ message: "Item unavailable or insufficient quantity" });
    }

    const buyer = await Buyer.findById(buyerId);
    if (!buyer) {
      return res.status(404).json({ message: "Buyer not found" });
    }

    // Optionally check if item already in cart to update quantity instead of pushing again
    const existingIndex = buyer.cart.findIndex(id => id.toString() === itemId);
    if (existingIndex >= 0) {
      // if you store quantities, update it here
      // assuming cart only stores item IDs for now, skip or extend as needed
    } else {
      buyer.cart.push(itemId);
    }

    await buyer.save();

    res.status(200).json({ message: "Item added to cart" });
  } catch (error) {
    res.status(500).json({ message: "Failed to add item to cart", error: error.message });
  }
};



================================================================================

File: backend\controllers\escrow.controllers.js (starts at line 1785)

// backend/controllers/escrow.controllers.js

import Order from "../models/order.model.js";
import Wallet from "../models/wallet.schema.js";
import Transaction from "../models/transaction.schema.js";

/**
 * Release escrow funds from buyer to seller
 * Only the buyer can initiate escrow release
 * Preconditions: Order must exist and be in a releasable state
 */
export const releaseEscrow = async (req, res) => {
  const { orderId } = req.params;
  const userId = req.user?.id || req.buyer?.id; // from auth middleware

  try {
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    if (order.buyer_id.toString() !== userId) {
      return res.status(403).json({ message: "Unauthorized: Buyer only" });
    }

    const tx = await Transaction.findOne({ orderId, type: "escrow" });
    if (!tx || tx.status !== "held") {
      return res.status(404).json({ message: "No held escrow transaction found" });
    }

    const sellerWallet = await Wallet.findOne({ owner: tx.to_user_id });
    if (!sellerWallet) {
      return res.status(404).json({ message: "Seller wallet not found" });
    }

    sellerWallet.balance += tx.totalPrice;
    await sellerWallet.save();

    tx.status = "released";
    await tx.save();

    return res.status(200).json({ message: "Escrow successfully released", transaction: tx });
  } catch (error) {
    console.error("Escrow release error:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};

/**
 * Get escrow status for an order
 */
export const getEscrowStatus = async (req, res) => {
  const { orderId } = req.params;

  try {
    const tx = await Transaction.findOne({ orderId, type: "escrow" });
    if (!tx) {
      return res.status(404).json({ message: "Escrow transaction not found" });
    }

    return res.status(200).json({ status: tx.status, transaction: tx });
  } catch (error) {
    console.error("Get escrow status error:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};
// import Transaction from "../models/transaction.schema.js";
// import Order from "../models/order.model.js";

/**
 * Create an escrow transaction for an order
 * Called when an order is created/paid but funds are held in escrow
 */
export const createEscrowForOrder = async (orderId) => {
  // Find the order details
  const order = await Order.findById(orderId);
  if (!order) {
    throw new Error("Order not found");
  }

  // Check if escrow transaction already exists for this order
  const existingTx = await Transaction.findOne({ orderId, type: "escrow" });
  if (existingTx) {
    // Already created
    return existingTx;
  }

  // Create new escrow transaction - status "held"
  const escrowTx = new Transaction({
    type: "escrow",
    orderId: order._id,
    item_id: order.item_id,
    from_user_id: order.buyer_id,
    to_user_id: order.seller_id,
    quantity: order.quantity,
    totalPrice: order.totalPrice,
    status: "held",
  });

  await escrowTx.save();
  return escrowTx;
};



================================================================================

File: backend\controllers\inventory.controllers.js (starts at line 1888)

import Inventory from "../models/inventory.model.js";
import Item from "../models/items.model.js";
import Order from "../models/order.model.js";
import { generateNotification } from "../utils/notification.maker.js";
import { sendEmailNotification } from "../utils/email.notification.js";
import mongoose from "mongoose";

// Initialize inventory for a new item
export const initializeInventory = async (req, res) => {
  console.log("📦 Initializing inventory for new item");
  const { itemId } = req.params;
  const { 
    initialStock, 
    costPrice, 
    sellingPrice, 
    minStockLevel = 5,
    maxStockLevel = 1000,
    reorderQuantity = 50,
    supplier 
  } = req.body;
  
  try {
    // Check if item exists and belongs to the seller
    const item = await Item.findById(itemId).populate('store_id');
    if (!item || item.store_id.seller_id.toString() !== req.seller.id) {
      return res.status(404).json({ message: "Item not found or unauthorized" });
    }
    
    // Check if inventory already exists
    const existingInventory = await Inventory.findOne({ item_id: itemId });
    if (existingInventory) {
      return res.status(400).json({ message: "Inventory already exists for this item" });
    }
    
    // Create new inventory record
    const inventory = new Inventory({
      item_id: itemId,
      currentStock: initialStock,
      availableStock: initialStock,
      minStockLevel,
      maxStockLevel,
      reorderQuantity,
      costPrice,
      sellingPrice,
      supplier,
      movements: [{
        type: "in",
        quantity: initialStock,
        reason: "Initial stock",
        balanceAfter: initialStock
      }],
      analytics: {
        profitMargin: ((sellingPrice - costPrice) / sellingPrice) * 100
      }
    });
    
    await inventory.save();
    
    // Update item quantity
    item.quantity = initialStock;
    await item.save();
    
    res.status(201).json({
      message: "Inventory initialized successfully",
      inventory
    });
    
  } catch (error) {
    console.log(`❌ Error initializing inventory: ${error}`);
    res.status(500).json({ message: "Error initializing inventory" });
  }
};

// Update stock levels (restock, adjustment, etc.)
export const updateStock = async (req, res) => {
  console.log("📈 Updating stock levels");
  const { itemId } = req.params;
  const { 
    type, // "in", "out", "adjustment"
    quantity, 
    reason, 
    reference,
    newCostPrice,
    newSellingPrice 
  } = req.body;
  
  const session = await mongoose.startSession();
  session.startTransaction();
  
  try {
    // Get inventory record
    const inventory = await Inventory.findOne({ item_id: itemId }).session(session);
    if (!inventory) {
      await session.abortTransaction();
      return res.status(404).json({ message: "Inventory not found" });
    }
    
    // Validate seller ownership
    const item = await Item.findById(itemId).populate('store_id').session(session);
    if (item.store_id.seller_id.toString() !== req.seller.id) {
      await session.abortTransaction();
      return res.status(403).json({ message: "Unauthorized" });
    }
    
    // Calculate new stock level
    let newStock = inventory.currentStock;
    switch (type) {
      case "in":
        newStock += quantity;
        break;
      case "out":
        newStock -= quantity;
        break;
      case "adjustment":
        newStock = quantity; // Direct adjustment to specific quantity
        break;
      default:
        await session.abortTransaction();
        return res.status(400).json({ message: "Invalid stock movement type" });
    }
    
    // Validate stock levels
    if (newStock < 0) {
      await session.abortTransaction();
      return res.status(400).json({ message: "Insufficient stock" });
    }
    
    // Update inventory
    inventory.currentStock = newStock;
    inventory.lastStockUpdate = new Date();
    
    // Update pricing if provided
    if (newCostPrice) inventory.costPrice = newCostPrice;
    if (newSellingPrice) inventory.sellingPrice = newSellingPrice;
    
    // Add movement record
    inventory.movements.push({
      type,
      quantity: type === "adjustment" ? quantity - inventory.currentStock : quantity,
      reason,
      reference,
      balanceAfter: newStock
    });
    
    // Check for alerts
    await checkAndCreateAlerts(inventory);
    
    await inventory.save({ session });
    
    // Update item quantity
    item.quantity = newStock;
    await item.save({ session });
    
    await session.commitTransaction();
    
    res.status(200).json({
      message: "Stock updated successfully",
      inventory,
      newStock
    });
    
  } catch (error) {
    await session.abortTransaction();
    console.log(`❌ Error updating stock: ${error}`);
    res.status(500).json({ message: "Error updating stock" });
  } finally {
    session.endSession();
  }
};

// Reserve stock for pending orders
export const reserveStock = async (req, res) => {
  console.log("🔒 Reserving stock for order");
  const { itemId } = req.params;
  const { quantity, orderId } = req.body;
  
  try {
    const inventory = await Inventory.findOne({ item_id: itemId });
    if (!inventory) {
      return res.status(404).json({ message: "Inventory not found" });
    }
    
    // Check if enough stock is available
    if (inventory.availableStock < quantity) {
      return res.status(400).json({ 
        message: "Insufficient available stock",
        available: inventory.availableStock,
        requested: quantity
      });
    }
    
    // Reserve stock
    inventory.reservedStock += quantity;
    inventory.movements.push({
      type: "reserved",
      quantity,
      reason: "Order reservation",
      reference: orderId,
      balanceAfter: inventory.currentStock
    });
    
    await inventory.save();
    
    res.status(200).json({
      message: "Stock reserved successfully",
      reservedQuantity: quantity,
      availableStock: inventory.availableStock
    });
    
  } catch (error) {
    console.log(`❌ Error reserving stock: ${error}`);
    res.status(500).json({ message: "Error reserving stock" });
  }
};

// Release reserved stock (when order is cancelled)
export const releaseReservedStock = async (req, res) => {
  console.log("🔓 Releasing reserved stock");
  const { itemId } = req.params;
  const { quantity, orderId } = req.body;
  
  try {
    const inventory = await Inventory.findOne({ item_id: itemId });
    if (!inventory) {
      return res.status(404).json({ message: "Inventory not found" });
    }
    
    // Release reserved stock
    inventory.reservedStock = Math.max(0, inventory.reservedStock - quantity);
    inventory.movements.push({
      type: "unreserved",
      quantity,
      reason: "Order cancellation",
      reference: orderId,
      balanceAfter: inventory.currentStock
    });
    
    await inventory.save();
    
    res.status(200).json({
      message: "Reserved stock released successfully",
      releasedQuantity: quantity,
      availableStock: inventory.availableStock
    });
    
  } catch (error) {
    console.log(`❌ Error releasing reserved stock: ${error}`);
    res.status(500).json({ message: "Error releasing reserved stock" });
  }
};

// Get inventory status for seller's items
export const getSellerInventory = async (req, res) => {
  console.log("📊 Getting seller inventory");
  const sellerId = req.seller.id;
  const { status, sortBy = "currentStock", order = "asc" } = req.query;
  
  try {
    // Get all items for this seller
    const sellerItems = await Item.find({ seller_id: sellerId }).select('_id');
    const itemIds = sellerItems.map(item => item._id);
    
    // Build query
    const query = { item_id: { $in: itemIds } };
    if (status) query.status = status;
    
    // Get inventory records
    const inventoryRecords = await Inventory.find(query)
      .populate('item_id', 'name description')
      .sort({ [sortBy]: order === "desc" ? -1 : 1 });
    
    // Calculate summary statistics
    const summary = {
      totalItems: inventoryRecords.length,
      totalValue: inventoryRecords.reduce((sum, inv) => 
        sum + (inv.currentStock * inv.sellingPrice), 0),
      totalCost: inventoryRecords.reduce((sum, inv) => 
        sum + (inv.currentStock * inv.costPrice), 0),
      lowStockItems: inventoryRecords.filter(inv => inv.status === "low_stock").length,
      outOfStockItems: inventoryRecords.filter(inv => inv.status === "out_of_stock").length,
      averageTurnover: inventoryRecords.reduce((sum, inv) => 
        sum + inv.analytics.turnoverRate, 0) / inventoryRecords.length || 0
    };
    
    summary.totalProfit = summary.totalValue - summary.totalCost;
    summary.profitMargin = summary.totalValue > 0 ? 
      (summary.totalProfit / summary.totalValue) * 100 : 0;
    
    res.status(200).json({
      message: "Inventory retrieved successfully",
      inventory: inventoryRecords,
      summary
    });
    
  } catch (error) {
    console.log(`❌ Error getting seller inventory: ${error}`);
    res.status(500).json({ message: "Error retrieving inventory" });
  }
};

// Get low stock alerts
export const getLowStockAlerts = async (req, res) => {
  console.log("⚠️ Getting low stock alerts");
  const sellerId = req.seller.id;
  
  try {
    // Get seller's items
    const sellerItems = await Item.find({ seller_id: sellerId }).select('_id');
    const itemIds = sellerItems.map(item => item._id);
    
    // Get low stock and out of stock items
    const lowStockItems = await Inventory.find({
      item_id: { $in: itemIds },
      status: { $in: ["low_stock", "out_of_stock"] }
    }).populate('item_id', 'name');
    
    // Get active alerts
    const activeAlerts = lowStockItems.filter(inv => 
      inv.alerts.some(alert => alert.isActive)
    );
    
    res.status(200).json({
      message: "Low stock alerts retrieved successfully",
      alerts: activeAlerts,
      summary: {
        lowStock: lowStockItems.filter(inv => inv.status === "low_stock").length,
        outOfStock: lowStockItems.filter(inv => inv.status === "out_of_stock").length,
        totalAlerts: activeAlerts.length
      }
    });
    
  } catch (error) {
    console.log(`❌ Error getting low stock alerts: ${error}`);
    res.status(500).json({ message: "Error retrieving alerts" });
  }
};

// Generate inventory forecast
export const generateInventoryForecast = async (req, res) => {
  console.log("🔮 Generating inventory forecast");
  const { itemId } = req.params;
  const { days = 30 } = req.query;
  
  try {
    const inventory = await Inventory.findOne({ item_id: itemId })
      .populate('item_id', 'name');
    
    if (!inventory) {
      return res.status(404).json({ message: "Inventory not found" });
    }
    
    // Get historical sales data
    const historicalOrders = await Order.find({
      "items.item_id": itemId,
      status: { $in: ["completed", "delivered"] },
      createdAt: { $gte: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) } // Last 90 days
    });
    
    // Calculate sales velocity
    const totalSold = historicalOrders.reduce((sum, order) => {
      const item = order.items.find(item => item.item_id.toString() === itemId);
      return sum + (item ? item.quantity : 0);
    }, 0);
    
    const salesVelocity = totalSold / 90; // Average daily sales
    
    // Generate forecast
    const forecast = {
      currentStock: inventory.currentStock,
      availableStock: inventory.availableStock,
      dailySalesVelocity: salesVelocity,
      forecastPeriod: days,
      predictedSales: salesVelocity * days,
      stockoutDate: salesVelocity > 0 ? 
        new Date(Date.now() + (inventory.availableStock / salesVelocity) * 24 * 60 * 60 * 1000) : null,
      reorderRecommendation: {
        shouldReorder: inventory.availableStock <= (salesVelocity * 14), // 2 weeks buffer
        recommendedQuantity: Math.max(inventory.reorderQuantity, salesVelocity * 30), // 30 days supply
        urgency: inventory.availableStock <= (salesVelocity * 7) ? "high" : 
                inventory.availableStock <= (salesVelocity * 14) ? "medium" : "low"
      }
    };
    
    // Update inventory analytics
    inventory.analytics.predictedDemand = forecast.predictedSales;
    inventory.analytics.reorderDate = forecast.stockoutDate;
    await inventory.save();
    
    res.status(200).json({
      message: "Inventory forecast generated successfully",
      forecast
    });
    
  } catch (error) {
    console.log(`❌ Error generating forecast: ${error}`);
    res.status(500).json({ message: "Error generating forecast" });
  }
};

// Helper function to check and create alerts
const checkAndCreateAlerts = async (inventory) => {
  console.log("🚨 Checking for inventory alerts");
  
  // Clear existing alerts
  inventory.alerts = inventory.alerts.filter(alert => !alert.isActive);
  
  // Check for low stock
  if (inventory.currentStock <= inventory.minStockLevel && inventory.currentStock > 0) {
    inventory.alerts.push({
      type: "low_stock",
      message: `Stock is running low. Current: ${inventory.currentStock}, Minimum: ${inventory.minStockLevel}`,
      isActive: true
    });
  }
  
  // Check for out of stock
  if (inventory.currentStock === 0) {
    inventory.alerts.push({
      type: "out_of_stock",
      message: "Item is out of stock",
      isActive: true
    });
  }
  
  // Check for overstock
  if (inventory.currentStock > inventory.maxStockLevel) {
    inventory.alerts.push({
      type: "overstock",
      message: `Stock level exceeds maximum. Current: ${inventory.currentStock}, Maximum: ${inventory.maxStockLevel}`,
      isActive: true
    });
  }
  
  // Check for reorder needed
  const salesVelocity = inventory.analytics.averageSalesPerDay || 0;
  if (salesVelocity > 0 && inventory.currentStock <= (salesVelocity * 14)) {
    inventory.alerts.push({
      type: "reorder_needed",
      message: `Reorder recommended. Current stock will last approximately ${Math.floor(inventory.currentStock / salesVelocity)} days`,
      isActive: true
    });
  }
  
  // Send notifications for critical alerts
  if (inventory.alerts.some(alert => alert.type === "out_of_stock" || alert.type === "low_stock")) {
    // Get item details for notification
    const item = await Item.findById(inventory.item_id).populate('store_id');
    if (item) {
      await generateNotification(
        "Inventory Alert",
        `${item.name} is ${inventory.currentStock === 0 ? 'out of stock' : 'running low'}`,
        item.store_id.seller_id,
        "Seller"
      );
    }
  }
};

// Automated inventory update when order is completed
export const updateInventoryOnOrderComplete = async (orderId) => {
  console.log("🔄 Updating inventory after order completion");
  
  try {
    const order = await Order.findById(orderId);
    if (!order) return;
    
    for (const orderItem of order.items) {
      const inventory = await Inventory.findOne({ item_id: orderItem.item_id });
      if (inventory) {
        // Remove from reserved stock and add to sold analytics
        inventory.reservedStock = Math.max(0, inventory.reservedStock - orderItem.quantity);
        inventory.analytics.totalSold += orderItem.quantity;
        inventory.analytics.totalRevenue += orderItem.totalPrice;
        inventory.lastSale = new Date();
        
        // Update sales velocity
        const daysSinceCreation = Math.max(1, 
          (new Date() - inventory.createdAt) / (1000 * 60 * 60 * 24)
        );
        inventory.analytics.averageSalesPerDay = inventory.analytics.totalSold / daysSinceCreation;
        
        // Calculate turnover rate
        if (inventory.currentStock > 0) {
          inventory.analytics.turnoverRate = inventory.analytics.totalSold / inventory.currentStock;
        }
        
        await inventory.save();
        console.log(`📊 Updated inventory analytics for item: ${orderItem.item_id}`);
      }
    }
  } catch (error) {
    console.log(`❌ Error updating inventory on order complete: ${error}`);
  }
};


================================================================================

File: backend\controllers\order.controllers.js (starts at line 2382)

import Order from "../models/order.model.js";
import Item from "../models/items.model.js";
import Buyer from "../models/buyer.model.js";
import Seller from "../models/sellers.model.js";
import Wallet from "../models/wallet.schema.js";
import Transaction from "../models/transaction.schema.js";
import Commission from "../models/commission.model.js";
import Coupon from "../models/coupon.model.js";
import Store from "../models/store.schema.js"; // Import Store model
import { generateNotification } from "../utils/notification.maker.js";
import { sendEmailNotification } from "../utils/email.notification.js";
import { checkDeliveryEligibility } from "../controllers/shipping.controllers.js"; // Import the new helper
import mongoose from "mongoose";
import { createEscrowForOrder as createEscrow } from './escrow.controllers.js';


// Create order from cart - this is the main checkout process
export const createOrderFromCart = async (req, res) => {
  console.log("🛒 Creating order from cart");
  const buyerId = req.user.id;
  const { 
    shippingAddress, 
    paymentMethod, 
    couponCode,
    notes,
    selectedDeliveryOption // New field for selected delivery option
  } = req.body;

  // Start database session for transaction
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // Step 1: Get buyer and validate
    const buyer = await Buyer.findById(buyerId).populate('cart').session(session);
    if (!buyer || buyer.cart.length === 0) {
      await session.abortTransaction();
      return res.status(400).json({ message: "Cart is empty" });
    }

    // Step 2: Group cart items by seller (marketplace requirement)
    const itemsBySeller = {};
    let totalCartValue = 0;

    for (const itemId of buyer.cart) {
      const item = await Item.findById(itemId).populate('store_id').session(session);
      if (!item || item.quantity <= 0) {
        await session.abortTransaction();
        return res.status(400).json({ 
          message: `Item ${item?.name || 'unknown'} is not available` 
        });
      }

      const sellerId = item.store_id.seller_id.toString();
      if (!itemsBySeller[sellerId]) {
        itemsBySeller[sellerId] = [];
      }
      
      itemsBySeller[sellerId].push({
        item,
        quantity: 1, // Default quantity, can be modified
        unitPrice: item.price,
        totalPrice: item.price
      });
      
      totalCartValue += item.price;
    }

    // Step 3: Apply coupon if provided
    let discount = 0;
    let couponDoc = null;
    if (couponCode) {
      couponDoc = await Coupon.findOne({ 
        code: couponCode.toUpperCase(),
        isActive: true,
        validFrom: { $lte: new Date() },
        validUntil: { $gte: new Date() }
      }).session(session);

      if (couponDoc && totalCartValue >= couponDoc.minOrderAmount) {
        if (couponDoc.type === "percentage") {
          discount = (totalCartValue * couponDoc.value) / 100;
          if (couponDoc.maxDiscountAmount) {
            discount = Math.min(discount, couponDoc.maxDiscountAmount);
          }
        } else if (couponDoc.type === "fixed") {
          discount = Math.min(couponDoc.value, totalCartValue);
        }
        
        // Update coupon usage
        couponDoc.usedCount += 1;
        couponDoc.analytics.totalUsage += 1;
        couponDoc.analytics.totalDiscount += discount;
        await couponDoc.save({ session });
      }
    }

    // Step 3.5: Validate delivery eligibility for each seller
    for (const [sellerId, orderItems] of Object.entries(itemsBySeller)) {
      const sellerStore = await Store.findOne({ seller_id: sellerId }).session(session);
      if (!sellerStore) {
        await session.abortTransaction();
        return res.status(400).json({ message: `Seller store not found for seller ID: ${sellerId}` });
      }

      // If seller_delivery is chosen, check eligibility
      if (selectedDeliveryOption.type === "seller_delivery") {
        const deliveryCheck = await checkDeliveryEligibility(sellerStore._id, shippingAddress);
        if (!deliveryCheck.eligible) {
          await session.abortTransaction();
          return res.status(400).json({ message: `Delivery not available from seller ${sellerStore.name} to the specified address: ${deliveryCheck.message}` });
        }
      }
    }

    // Step 4: Create separate orders for each seller
    const createdOrders = [];
    
    for (const [sellerId, orderItems] of Object.entries(itemsBySeller)) {
      // Calculate order totals
      const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);
      
      // Get commission rate for this seller/category
      const commission = await Commission.findOne({ 
        isActive: true,
        $or: [
          { sellers: sellerId },
          { sellers: { $size: 0 } } // Default commission
        ]
      }).session(session);
      
      const platformFee = commission ? 
        (commission.type === "percentage" ? (subtotal * commission.rate) / 100 : commission.rate) : 
        subtotal * 0.05; // Default 5% commission
      
      // Calculate proportional discount for this seller
      const sellerDiscount = (subtotal / totalCartValue) * discount;
      const tax = subtotal * 0.18; // 18% VAT in Rwanda
      
      // Calculate shipping cost based on selected delivery option
      let orderShippingCost = 0;
      if (selectedDeliveryOption.type === "seller_delivery") {
        const sellerStore = await Store.findOne({ seller_id: sellerId }).session(session);
        orderShippingCost = sellerStore?.deliveryCoverage?.deliveryFee || 0;
      } else if (selectedDeliveryOption.type === "third_party_courier") {
        orderShippingCost = selectedDeliveryOption.cost; // Cost provided by frontend for 3rd party
      }
      
      const totalAmount = subtotal + platformFee + tax + orderShippingCost - sellerDiscount;

      // Create order
      const order = new Order({
        buyer_id: buyerId,
        seller_id: sellerId,
        items: orderItems.map(item => ({
          item_id: item.item._id,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          totalPrice: item.totalPrice
        })),
        subtotal,
        platformFee,
        tax,
        discount: sellerDiscount,
        totalAmount,
        paymentMethod,
        shippingAddress,
        selectedDeliveryOption: {
          type: selectedDeliveryOption.type,
          providerName: selectedDeliveryOption.providerName,
          cost: orderShippingCost
        },
        shippingCost: orderShippingCost, // Store calculated shipping cost
        notes,
        economicMetrics: {
          sellerRevenue: subtotal - platformFee,
          platformRevenue: platformFee,
          taxRevenue: tax,
          shippingCost: orderShippingCost // Add shipping cost to economic metrics
        }
      });

      await order.save({ session });
      createdOrders.push(order);

      // Update item quantities and status
      for (const orderItem of orderItems) {
        await Item.findByIdAndUpdate(
          orderItem.item._id,
          { 
            $inc: { quantity: -orderItem.quantity },
            status: "sold" // Or "reserved" if you want a more granular inventory
          },
          { session }
        );
      }

      // Create transaction record
      await Transaction.create([{
        type: "purchase",
        from_user_id: buyerId,
        to_user_id: sellerId,
        quantity: orderItems.reduce((sum, item) => sum + item.quantity, 0),
        totalPrice: totalAmount,
        status: "pending"
      }], { session });

      // Notify seller
      await generateNotification(
        "New Order",
        `You have received a new order #${order.orderNumber}`,
        sellerId,
        "Seller"
      );

      console.log(`📦 Order created: ${order.orderNumber} for seller: ${sellerId}`);
    }

    // Step 5: Process payment
    if (paymentMethod === "wallet") {
      const wallet = await Wallet.findById(buyer.wallet_id).session(session);
      const totalOrderAmount = createdOrders.reduce((sum, order) => sum + order.totalAmount, 0);
      
      if (wallet.balance < totalOrderAmount) {
        await session.abortTransaction();
        return res.status(400).json({ message: "Insufficient wallet balance" });
      }

      // Deduct from buyer wallet
      wallet.balance -= totalOrderAmount;
      await wallet.save({ session });

      // Update order payment status
      for (const order of createdOrders) {
        order.paymentStatus = "completed";
        order.status = "confirmed";
        order.confirmedAt = new Date();
        await order.save({ session });
      }
    }

    // Step 6: Clear buyer's cart
    buyer.cart = [];
    await buyer.save({ session });

    // Commit transaction
    await session.commitTransaction();

    // Send confirmation email
    await sendEmailNotification(
      "Order Confirmation",
      `Your order(s) have been confirmed. Order numbers: ${createdOrders.map(o => o.orderNumber).join(', ')}`,
      buyer.email
    );

    res.status(201).json({
      message: "Orders created successfully",
      orders: createdOrders,
      totalAmount: createdOrders.reduce((sum, order) => sum + order.totalAmount, 0)
    });

  } catch (error) {
    await session.abortTransaction();
    console.log(`❌ Error creating order: ${error}`);
    res.status(500).json({ message: "Error creating order", error: error.message });
  } finally {
    session.endSession();
  }
};

// Get buyer's order history
export const getBuyerOrders = async (req, res) => {
  console.log("📋 Getting buyer orders");
  const buyerId = req.user.id;
  const { page = 1, limit = 10, status } = req.query;

  try {
    const query = { buyer_id: buyerId };
    if (status) query.status = status;

    const orders = await Order.find(query)
      .populate('seller_id', 'name fullname')
      .populate('items.item_id', 'name price')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const totalOrders = await Order.countDocuments(query);

    res.status(200).json({
      message: "Orders retrieved successfully",
      orders,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalOrders / limit),
        totalOrders
      }
    });

  } catch (error) {
    console.log(`❌ Error getting buyer orders: ${error}`);
    res.status(500).json({ message: "Error retrieving orders" });
  }
};

// Get seller's orders
export const getSellerOrders = async (req, res) => {
  console.log("🏪 Getting seller orders");
  const sellerId = req.seller.id;
  const { page = 1, limit = 10, status } = req.query;

  try {
    const query = { seller_id: sellerId };
    if (status) query.status = status;

    const orders = await Order.find(query)
      .populate('buyer_id', 'name email')
      .populate('items.item_id', 'name price')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const totalOrders = await Order.countDocuments(query);

    // Calculate seller analytics
    const analytics = await Order.aggregate([
      { $match: { seller_id: new mongoose.Types.ObjectId(sellerId) } },
      {
        $group: {
          _id: null,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: "$economicMetrics.sellerRevenue" },
          averageOrderValue: { $avg: "$totalAmount" },
          pendingOrders: {
            $sum: { $cond: [{ $eq: ["$status", "pending"] }, 1, 0] }
          },
          completedOrders: {
            $sum: { $cond: [{ $eq: ["$status", "completed"] }, 1, 0] }
          }
        }
      }
    ]);

    res.status(200).json({
      message: "Orders retrieved successfully",
      orders,
      analytics: analytics[0] || {},
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalOrders / limit),
        totalOrders
      }
    });

  } catch (error) {
    console.log(`❌ Error getting seller orders: ${error}`);
    res.status(500).json({ message: "Error retrieving orders" });
  }
};

// Update order status (seller action)
export const updateOrderStatus = async (req, res) => {
  console.log("🔄 Updating order status");
  const { orderId } = req.params;
  const { status, trackingNumber, notes } = req.body;
  const sellerId = req.seller.id;

  try {
    const order = await Order.findOne({ 
      _id: orderId, 
      seller_id: sellerId 
    }).populate('buyer_id');

    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // Validate status transition
    const validTransitions = {
      "pending": ["confirmed", "cancelled"],
      "confirmed": ["processing", "cancelled"],
      "processing": ["shipped", "cancelled"],
      "shipped": ["delivered"],
      "delivered": ["completed"]
    };

    if (!validTransitions[order.status]?.includes(status)) {
      return res.status(400).json({ 
        message: `Cannot change status from ${order.status} to ${status}` 
      });
    }

    // Update order
    order.status = status;
    if (trackingNumber) order.trackingNumber = trackingNumber;
    if (notes) order.notes = notes;

    // Set timestamps based on status
    switch (status) {
      case "confirmed":
        order.confirmedAt = new Date();
        break;
      case "shipped":
        order.shippedAt = new Date();
        break;
      case "delivered":
        order.deliveredAt = new Date();
        break;
      case "completed":
        order.completedAt = new Date();
        // Transfer money to seller wallet
        await transferOrderPaymentToSeller(order);
        break;
    }

    await order.save();

    // Notify buyer
    await generateNotification(
      "Order Update",
      `Your order #${order.orderNumber} status has been updated to ${status}`,
      order.buyer_id._id,
      "Buyer"
    );

    // Send email notification
    await sendEmailNotification(
      "Order Status Update",
      `Your order #${order.orderNumber} is now ${status}`,
      order.buyer_id.email
    );

    res.status(200).json({
      message: "Order status updated successfully",
      order
    });

  } catch (error) {
    console.log(`❌ Error updating order status: ${error}`);
    res.status(500).json({ message: "Error updating order status" });
  }
};

// Helper function to transfer payment to seller
const transferOrderPaymentToSeller = async (order) => {
  try {
    const seller = await Seller.findById(order.seller_id);
    const sellerWallet = await Wallet.findOne({ 
      owner: seller._id, 
      ownerModel: "Seller" 
    });

    if (sellerWallet) {
      sellerWallet.balance += order.economicMetrics.sellerRevenue;
      await sellerWallet.save();

      // Create transaction record
      await Transaction.create({
        type: "transfer",
        from_user_id: null, // Platform
        to_user_id: seller._id,
        totalPrice: order.economicMetrics.sellerRevenue,
        status: "completed"
      });

      console.log(`💰 Transferred ${order.economicMetrics.sellerRevenue} to seller ${seller.name}`);
    }
  } catch (error) {
    console.log(`❌ Error transferring payment to seller: ${error}`);
  }
};

// Cancel order
export const cancelOrder = async (req, res) => {
  console.log("❌ Cancelling order");
  const { orderId } = req.params;
  const { reason } = req.body;
  const userId = req.user?.id || req.seller?.id;

  try {
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // Check if user can cancel this order
    const canCancel = order.buyer_id.toString() === userId || 
                     order.seller_id.toString() === userId;
    
    if (!canCancel) {
      return res.status(403).json({ message: "Not authorized to cancel this order" });
    }

    // Check if order can be cancelled
    if (!["pending", "confirmed", "processing"].includes(order.status)) {
      return res.status(400).json({ 
        message: "Order cannot be cancelled at this stage" 
      });
    }

    order.status = "cancelled";
    order.cancelReason = reason;
    await order.save();

    // Refund if payment was completed
    if (order.paymentStatus === "completed") {
      await refundOrderPayment(order);
    }

    // Restore item quantities
    for (const item of order.items) {
      await Item.findByIdAndUpdate(item.item_id, {
        $inc: { quantity: item.quantity },
        status: "available"
      });
    }

    res.status(200).json({
      message: "Order cancelled successfully",
      order
    });

  } catch (error) {
    console.log(`❌ Error cancelling order: ${error}`);
    res.status(500).json({ message: "Error cancelling order" });
  }
};

// Helper function to refund order payment
const refundOrderPayment = async (order) => {
  try {
    const buyer = await Buyer.findById(order.buyer_id);
    const buyerWallet = await Wallet.findById(buyer.wallet_id);

    if (buyerWallet) {
      buyerWallet.balance += order.totalAmount;
      await buyerWallet.save();

      // Create refund transaction
      await Transaction.create({
        type: "refund",
        from_user_id: null, // Platform
        to_user_id: buyer._id,
        totalPrice: order.totalAmount,
        status: "completed"
      });

      order.paymentStatus = "refunded";
      await order.save();

      console.log(`💸 Refunded ${order.totalAmount} to buyer ${buyer.name}`);
    }
  } catch (error) {
    console.log(`❌ Error processing refund: ${error}`);
  }
};


================================================================================

File: backend\controllers\seller.controllers.js (starts at line 2938)

import { giveTokenAndCookieForSeller } from "../configs/token.config.seller.js";
import bcrypt from "bcryptjs";
import Seller from "../models/sellers.model.js";
import Store from "../models/store.schema.js";
import Item from "../models/items.model.js";
import Price from "../models/price.schema.js";

// Register
export const register = async (req, res) => {
  const { email, name, password, fullname, phone } = req.body;
  try {
    const emailExist = await Seller.findOne({ email });
    if (emailExist) {
      return res.status(400).json({ message: "Email already exists" });
    }
    const nameExist = await Seller.findOne({ name });
    if (nameExist) {
      return res.status(400).json({ message: "Username already exists" });
    }
    const newSeller = new Seller({
      name,
      password,
      email,
      fullname,
      phone,
    });
    // Save seller first to get _id
    await newSeller.save();

    const store = await Store.create({
      name: `${newSeller.name}'s Store`,
      seller_id: newSeller._id,
    });

    newSeller.store = store._id;
    await newSeller.save();

    giveTokenAndCookieForSeller(res, newSeller);

    const SellerNoPassword = newSeller.toObject();
    delete SellerNoPassword.password;
    const storeObj = store.toObject();

    res.status(201).json({
      message: "seller created successfully",
      seller: SellerNoPassword,
      store: storeObj,
    });
  } catch (error) {
    console.error("Error during registration:", error);
    res.status(500).json({ message: "Internal server error during register" });
  }
};

// Login
export const login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const seller = await Seller.findOne({ email }).select("+password");
    if (!seller) {
      return res.status(404).json({ message: "User not found" });
    }
    const isvalidPassword = await bcrypt.compare(password, seller.password);
    if (!isvalidPassword) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    giveTokenAndCookieForSeller(res, seller);

    const SellerNoPassword = seller.toObject();
    delete SellerNoPassword.password;

    res.status(200).json({
      message: "Successfully logged in",
      seller: SellerNoPassword,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: "Internal server error during login" });
  }
};

// Logout
export const logout = async (req, res) => {
  try {
    res.clearCookie("token");
    res.status(200).json({ message: "Logged out successfully" });
  } catch (error) {
    console.log(error);
    res.status(403).json({ message: error });
  }
};

// Get Profile
export const getUserProfile = async (req, res) => {
  try {
    const sellerId = req.seller.id;
    if (!sellerId) {
      return res.status(400).json({ error: "Missing user ID in token" });
    }
    const seller = await Seller.findById(sellerId).select("-password");
    if (!seller) {
      return res.status(404).json({ error: "User not found in DB" });
    }
    res.status(200).json(seller);
  } catch (err) {
    console.error("getUserProfile Error:", err);
    res.status(500).json({ error: "Server error", message: err.message });
  }
};

// Add Item to Store
export const addItemToStore = async (req, res) => {
  const { storeId } = req.params;
  const { name, quantity, price, description } = req.body;
  try {
    const priceDoc = await Price.create({ reservedPrice: price });
    const store = await Store.findById(storeId);
    if (!store || store.seller_id.toString() !== req.seller.id) {
      return res.status(403).json({ message: "Not authorized to add items" });
    }
    const newItem = new Item({
      name,
      quantity,
      price: priceDoc._id,
      description,
      store_id: storeId,
    });
    await newItem.save();
    res.status(201).json({
      message: "Item added to store successfully",
      item: newItem,
    });
  } catch (error) {
    console.error("Error adding item:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

// Get Items of Store
export const getStoreItems = async (req, res) => {
  try {
    const { storeId } = req.params;
    const store = await Store.findById(storeId);
    if (!store || store.seller_id.toString() !== req.seller.id) {
      return res.status(403).json({ message: "Not authorized to view items" });
    }
    const items = await Item.find({ store_id: storeId }).populate("price");
    res.status(200).json({ items });
  } catch (error) {
    console.error("Error fetching store items:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

// Update Item
export const updateItem = async (req, res) => {
  try {
    const { itemId } = req.params;
    const updatedItem = await Item.findByIdAndUpdate(itemId, req.body, { new: true });
    if (!updatedItem) {
      return res.status(404).json({ message: "Item not found" });
    }
    res.status(200).json({ message: "Item updated successfully", item: updatedItem });
  } catch (error) {
    console.error("Error updating item:", error);
    res.status(500).json({ message: "Error updating item" });
  }
};

// Delete Item
export const deleteItem = async (req, res) => {
  try {
    const { itemId } = req.params;
    const item = await Item.findById(itemId);
    if (!item) return res.status(404).json({ message: "Item not found" });

    const store = await Store.findById(item.store_id);
    if (!store || store.seller_id.toString() !== req.seller.id) {
      return res.status(403).json({ message: "Not authorized to delete this item" });
    }
    await Item.findByIdAndDelete(itemId);
    res.status(200).json({ message: "Item deleted successfully" });
  } catch (error) {
    console.error("Error deleting item:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};



================================================================================

File: backend\controllers\shipping.controllers.js (starts at line 3126)

import Order from "../models/order.model.js";
import Store from "../models/store.schema.js"; // Import Store model
import Location from "../models/location.model.js"; // Import Location model
import { generateNotification } from "../utils/notification.maker.js";
import { sendEmailNotification } from "../utils/email.notification.js";
import mongoose from "mongoose";

// Helper function to check if a buyer's address is within a seller's delivery coverage
const checkDeliveryEligibility = async (sellerStoreId, buyerAddress) => {
  console.log("🗺️ Checking delivery eligibility");
  try {
    const store = await Store.findById(sellerStoreId).populate('location.province location.district location.sector location.cell');
    if (!store) {
      console.log("Store not found for delivery eligibility check.");
      return { eligible: false, message: "Seller's store not found." };
    }

    const storeLocation = store.location;
    const deliveryCoverage = store.deliveryCoverage;

    // Fetch full paths for comparison
    const buyerCell = await Location.findById(buyerAddress.cell);
    const buyerSector = await Location.findById(buyerAddress.sector);
    const buyerDistrict = await Location.findById(buyerAddress.district);
    const buyerProvince = await Location.findById(buyerAddress.province);

    if (!buyerCell || !buyerSector || !buyerDistrict || !buyerProvince) {
      console.log("Invalid buyer address components.");
      return { eligible: false, message: "Invalid buyer address." };
    }

    // Determine eligibility based on coverage type
    switch (deliveryCoverage.type) {
      case "national":
        return { eligible: true, message: "National delivery." };

      case "specific_provinces":
        const specificProvinces = deliveryCoverage.value.map(id => id.toString());
        if (specificProvinces.includes(buyerAddress.province.toString())) {
          return { eligible: true, message: "Within specific provinces." };
        }
        break;

      case "specific_districts":
        const specificDistricts = deliveryCoverage.value.map(id => id.toString());
        if (specificDistricts.includes(buyerAddress.district.toString())) {
          return { eligible: true, message: "Within specific districts." };
        }
        break;

      case "specific_sectors":
        const specificSectors = deliveryCoverage.value.map(id => id.toString());
        if (specificSectors.includes(buyerAddress.sector.toString())) {
          return { eligible: true, message: "Within specific sectors." };
        }
        break;

      case "specific_cells":
        const specificCells = deliveryCoverage.value.map(id => id.toString());
        if (specificCells.includes(buyerAddress.cell.toString())) {
          return { eligible: true, message: "Within specific cells." };
        }
        break;

      case "radius_cells":
        // This requires traversing the location hierarchy or using coordinates
        // For simplicity, let's assume a "radius" means within the same district for now,
        // or a direct comparison if cells are directly related in a flat list.
        // A more complex implementation would involve fetching all cells within N hops from store's cell.
        // For now, let's check if it's within the same sector for a small radius.
        const radius = deliveryCoverage.value || 1; // Default to 1 cell radius (i.e., same cell)

        // Simple check: if radius is 0 or 1, must be same cell.
        if (radius <= 1 && storeLocation.cell.toString() === buyerAddress.cell.toString()) {
          return { eligible: true, message: "Within same cell radius." };
        }
        // More complex logic for larger radius would involve fetching neighbors
        // For now, if it's within the same sector, assume it's covered by a small radius
        if (storeLocation.sector.toString() === buyerAddress.sector.toString()) {
          return { eligible: true, message: "Within same sector (simulated radius)." };
        }
        break;

      default:
        console.log(`Unknown delivery coverage type: ${deliveryCoverage.type}`);
        return { eligible: false, message: "Invalid delivery coverage configuration." };
    }

    return { eligible: false, message: "Outside seller's delivery coverage." };

  } catch (error) {
    console.error(`Error in checkDeliveryEligibility: ${error}`);
    return { eligible: false, message: "Error checking delivery eligibility." };
  }
};

// Seller updates delivery status for an order (e.g., "preparing", "out for delivery", "delivered")
export const updateOrderDeliveryStatus = async (req, res) => {
  console.log("🚚 Updating order delivery status");
  const { orderId } = req.params;
  const { 
    status, // e.g., "processing", "shipped", "delivered"
    deliveryNotes, 
    actualDeliveryDate 
  } = req.body;
  const sellerId = req.seller.id; // From seller authentication middleware

  try {
    // Step 1: Find the order and ensure it belongs to the seller
    const order = await Order.findOne({ _id: orderId, seller_id: sellerId }).populate('buyer_id');

    if (!order) {
      return res.status(404).json({ message: "Order not found or unauthorized" });
    }

    // Step 2: Validate status transition
    const validTransitions = {
      "confirmed": ["processing", "cancelled"],
      "processing": ["shipped", "cancelled"],
      "shipped": ["delivered"],
      "delivered": ["completed"] // Buyer confirms delivery, then seller marks completed
    };

    if (!validTransitions[order.status]?.includes(status)) {
      return res.status(400).json({ 
        message: `Cannot change status from ${order.status} to ${status}` 
      });
    }

    // Step 3: Update order details
    order.status = status;
    if (deliveryNotes) order.notes = deliveryNotes;
    if (actualDeliveryDate) order.actualDelivery = new Date(actualDeliveryDate);
    
    // Set timestamps based on status
    switch (status) {
      case "shipped":
        order.shippedAt = new Date();
        break;
      case "delivered":
        order.deliveredAt = new Date();
        break;
      case "completed":
        order.completedAt = new Date();
        // Transfer money to seller wallet (handled by order.controllers.js helper)
        // This is typically triggered by buyer confirmation or automated after delivery
        break;
    }

    await order.save();

    // Step 4: Notify buyer about delivery update
    await generateNotification(
      "Order Delivery Update",
      `Your order #${order.orderNumber} is now ${status}.`,
      order.buyer_id._id,
      "Buyer"
    );

    await sendEmailNotification(
      "Your Order Status Update",
      `Your order #${order.orderNumber} is now ${status}.`,
      order.buyer_id.email
    );

    res.status(200).json({
      message: "Order delivery status updated successfully",
      order
    });

  } catch (error) {
    console.log(`❌ Error updating delivery status: ${error}`);
    res.status(500).json({ message: "Error updating delivery status", error: error.message });
  }
};

// Buyer confirms delivery of an order
export const confirmOrderDeliveryByBuyer = async (req, res) => {
  console.log("✅ Buyer confirming order delivery");
  const { orderId } = req.params;
  const buyerId = req.user.id; // From buyer authentication middleware

  try {
    // Step 1: Find the order and ensure it belongs to the buyer
    const order = await Order.findOne({ _id: orderId, buyer_id: buyerId });

    if (!order) {
      return res.status(404).json({ message: "Order not found or unauthorized" });
    }

    // Step 2: Validate order status
    if (order.status !== "shipped") {
      return res.status(400).json({ message: "Order must be in 'shipped' status to confirm delivery" });
    }

    // Step 3: Update order status to delivered and then completed
    order.status = "delivered";
    order.deliveredAt = new Date();
    await order.save();

    // Automatically mark as completed after delivery confirmation
    order.status = "completed";
    order.completedAt = new Date();
    await order.save();

    // Step 4: Trigger payment transfer to seller (handled by order.controllers.js helper)
    // This is now handled by the `transferOrderPaymentToSeller` helper called when order status becomes 'completed'
    // in order.controllers.js
        
    // Step 5: Notify seller about delivery confirmation
    await generateNotification(
      "Order Delivered!",
      `Order #${order.orderNumber} has been confirmed as delivered by the buyer.`,
      order.seller_id,
      "Seller"
    );

    res.status(200).json({
      message: "Order delivery confirmed successfully. Order marked as completed.",
      order
    });

  } catch (error) {
    console.log(`❌ Error confirming delivery: ${error}`);
    res.status(500).json({ message: "Error confirming delivery", error: error.message });
  }
};

// Export the helper for use in order creation
export { checkDeliveryEligibility };


================================================================================

File: backend\controllers\transact.controllers.js (starts at line 3356)

/**
 * Redis throttling per buyer to avoid spamming multiple requests
 *  WebSocket push notifications for real-time seller alerts
 * Activity logs to track transaction attempts and triggers
*/

// transactionService.js
import { generateNotification } from "../utils/notification.maker.js";
import Transaction from "../models/transaction.schema.js";
import Item from "../models/items.model.js";
import Seller from "../models/sellers.model.js";

export async function createTransaction({
  item_id,
  buyer_id,
  seller_id,
  quantity,
  totalPrice,
  caller_id,
  caller_role // from auth context
}) {
  try {
    // ✅ Validate payload
    if (!item_id || !seller_id || !buyer_id || quantity <= 0 || totalPrice <= 0) {
      throw new Error("Invalid transaction data");
    }

    // ✅ Authorization
    if (caller_role !== "buyer" || caller_id !== buyer_id) {
      throw new Error("Unauthorized transaction attempt");
    }

    // ✅ Validate seller & item
    const seller = await Seller.findById(seller_id);
    const item = await Item.findOne({ _id: item_id, seller_id });

    if (!seller || !item) {
      throw new Error("Seller or item not found");
    }

    // ✅ Create transaction
    const transaction = await Transaction.create({
      item_id,
      buyer_id,
      seller_id,
      quantity,
      totalPrice
    });

    // ✅ Notify seller
    await generateNotification({
      title: "New Transaction",
      message: "A new transaction has been requested",
      recipientId: seller_id,
      recipientModel: "Seller"
    });

    return { success: true, message: "Transaction created", transaction };

  } catch (error) {
    console.error("Transaction creation failed:", error.message);
    return { success: false, error: error.message };
  }
}
import Wallet from "../models/wallet.schema.js";

// Deposit funds to buyer wallet
export const depositFunds = async (req, res) => {
  try {
    const buyerId = req.user.id; // Assuming user is authenticated and user id is here
    const { amount } = req.body;

    if (!amount || amount <= 0) {
      return res.status(400).json({ message: "Invalid deposit amount" });
    }

    // Find buyer's wallet
    const wallet = await Wallet.findOne({ owner: buyerId, ownerModel: "Buyer" });
    if (!wallet) {
      return res.status(404).json({ message: "Wallet not found" });
    }

    // Add funds to wallet balance
    wallet.balance += amount;
    await wallet.save();

    // Create a transaction record
    const transaction = await Transaction.create({
      type: "deposit",
      from_user_id: null, // Platform or external source
      to_user_id: buyerId,
      totalPrice: amount,
      status: "completed",
      transactionDate: new Date(),
    });

    return res.status(200).json({
      message: "Deposit successful",
      newBalance: wallet.balance,
      transaction,
    });

  } catch (error) {
    console.error("Deposit funds error:", error);
    return res.status(500).json({ message: "Server error during deposit" });
  }
};



================================================================================

File: backend\models\analytics.model.js (starts at line 3464)

import mongoose from "mongoose";

// Economic analytics aggregation model for real-time business intelligence
const analyticsSchema = new mongoose.Schema(
  {
    // Time period for this analytics record
    period: {
      type: String,
      enum: ["daily", "weekly", "monthly", "quarterly", "yearly"],
      required: true
    },
    date: { 
      type: Date, 
      required: true 
    },
    
    // Overall marketplace metrics
    marketplace: {
      // Revenue metrics
      totalRevenue: { type: Number, default: 0 },
      platformRevenue: { type: Number, default: 0 },
      sellerRevenue: { type: Number, default: 0 },
      taxRevenue: { type: Number, default: 0 },
      
      // Transaction metrics
      totalOrders: { type: Number, default: 0 },
      completedOrders: { type: Number, default: 0 },
      cancelledOrders: { type: Number, default: 0 },
      averageOrderValue: { type: Number, default: 0 },
      
      // User metrics
      newBuyers: { type: Number, default: 0 },
      newSellers: { type: Number, default: 0 },
      activeBuyers: { type: Number, default: 0 },
      activeSellers: { type: Number, default: 0 },
      
      // Product metrics
      totalProducts: { type: Number, default: 0 },
      newProducts: { type: Number, default: 0 },
      soldProducts: { type: Number, default: 0 },
      
      // Financial health indicators
      conversionRate: { type: Number, default: 0 }, // Orders/Visitors
      customerAcquisitionCost: { type: Number, default: 0 },
      customerLifetimeValue: { type: Number, default: 0 },
      
      // Economic indicators
      economicGrowthRate: { type: Number, default: 0 },
      marketplaceVelocity: { type: Number, default: 0 }, // Speed of transactions
      liquidityRatio: { type: Number, default: 0 } // Available funds/Total transactions
    },
    
    // Category-wise breakdown
    categoryMetrics: [{
      category_id: { type: mongoose.Schema.Types.ObjectId, ref: "Category" },
      categoryName: String,
      revenue: { type: Number, default: 0 },
      orders: { type: Number, default: 0 },
      products: { type: Number, default: 0 },
      averagePrice: { type: Number, default: 0 },
      marketShare: { type: Number, default: 0 } // Percentage of total marketplace
    }],
    
    // Top performers
    topSellers: [{
      seller_id: { type: mongoose.Schema.Types.ObjectId, ref: "Seller" },
      sellerName: String,
      revenue: { type: Number, default: 0 },
      orders: { type: Number, default: 0 },
      rating: { type: Number, default: 0 }
    }],
    
    topProducts: [{
      item_id: { type: mongoose.Schema.Types.ObjectId, ref: "Item" },
      productName: String,
      revenue: { type: Number, default: 0 },
      unitsSold: { type: Number, default: 0 },
      rating: { type: Number, default: 0 }
    }],
    
    // Geographic distribution (if applicable)
    geographicMetrics: [{
      region: String,
      revenue: { type: Number, default: 0 },
      orders: { type: Number, default: 0 },
      buyers: { type: Number, default: 0 },
      sellers: { type: Number, default: 0 }
    }],
    
    // Payment method analytics
    paymentMetrics: [{
      method: String,
      usage: { type: Number, default: 0 },
      revenue: { type: Number, default: 0 },
      successRate: { type: Number, default: 0 }
    }],
    
    // Economic health scores (0-100)
    healthScores: {
      overall: { type: Number, default: 0 },
      liquidity: { type: Number, default: 0 },
      growth: { type: Number, default: 0 },
      stability: { type: Number, default: 0 },
      competition: { type: Number, default: 0 }
    }
  },
  { 
    timestamps: true,
    indexes: [
      { period: 1, date: -1 },
      { "marketplace.totalRevenue": -1 },
      { date: -1 }
    ]
  }
);

const Analytics = mongoose.model("Analytics", analyticsSchema);
export default Analytics;


================================================================================

File: backend\models\buyer.model.js (starts at line 3582)

import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const buyerSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true },
    // transaction:[ { type: mongoose.Schema.types.ObjectId, ref: 'Transaction', default: [], }],
    phone: { type: String, minLength: 10, maxLength: 15 },
    password: { type: String, minLength: 6, required: true },
    wallet_id: { type: mongoose.Schema.Types.ObjectId, ref: "Wallet" },
    cart: [{ type: mongoose.Schema.Types.ObjectId, ref: "Item" }],
  },
  { timestamps: true }
);

// password hashing or encrypting

buyerSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    const hashedPassword = await bcrypt.hash(this.password, 10);
    this.password = hashedPassword;
  }
  next();
  //what if it is not modified
});

// buyerSchema.methods.comparePassword = async function (password) {
//     return await bcrypt.compare(password, this.password)

// }

//password compare
//so i do not have to use bcrypt.compare in the controller

const Buyer = mongoose.model("Buyer", buyerSchema);

export default Buyer;
// i will add other things like followers



================================================================================

File: backend\models\category.model.js (starts at line 3622)

import mongoose from "mongoose";

const categorySchema = new mongoose.Schema(
  {
    name: { 
      type: String, 
      required: true, 
      trim: true,
      unique: true 
    },
    slug: { 
      type: String, 
      required: true, 
      unique: true,
      lowercase: true 
    },
    description: { 
      type: String, 
      trim: true 
    },
    
    // Category hierarchy - for subcategories
    parentCategory: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Category",
      default: null 
    },
    
    // Category image for display
    image: String,
    
    // SEO and display
    metaTitle: String,
    metaDescription: String,
    
    // Category status
    isActive: { 
      type: Boolean, 
      default: true 
    },
    
    // Economic analytics for categories
    analytics: {
      totalProducts: { type: Number, default: 0 },
      totalSales: { type: Number, default: 0 },
      totalRevenue: { type: Number, default: 0 },
      averagePrice: { type: Number, default: 0 },
      conversionRate: { type: Number, default: 0 }
    },
    
    // Display order for frontend
    sortOrder: { 
      type: Number, 
      default: 0 
    }
  },
  { 
    timestamps: true 
  }
);

// Generate slug from name before saving
categorySchema.pre("save", function (next) {
  if (this.isModified("name")) {
    this.slug = this.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
    console.log(`📂 Category slug generated: ${this.slug}`);
  }
  next();
});

const Category = mongoose.model("Category", categorySchema);
export default Category;


================================================================================

File: backend\models\commission.model.js (starts at line 3697)

import mongoose from "mongoose";

const commissionSchema = new mongoose.Schema(
  {
    // Commission structure
    name: { 
      type: String, 
      required: true,
      trim: true 
    },
    description: String,
    
    // Commission type
    type: {
      type: String,
      enum: ["percentage", "fixed", "tiered"],
      required: true
    },
    
    // Commission rates
    rate: { 
      type: Number, 
      required: true 
    }, // Percentage (0-100) or fixed amount
    
    // Tiered commission structure
    tiers: [{
      minAmount: { type: Number, required: true },
      maxAmount: Number,
      rate: { type: Number, required: true }
    }],
    
    // Applicable categories
    categories: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Category" 
    }],
    
    // Applicable sellers (if specific)
    sellers: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Seller" 
    }],
    
    // Commission validity
    isActive: { 
      type: Boolean, 
      default: true 
    },
    validFrom: { 
      type: Date, 
      default: Date.now 
    },
    validUntil: Date,
    
    // Economic tracking
    analytics: {
      totalCommissionEarned: { type: Number, default: 0 },
      totalTransactions: { type: Number, default: 0 },
      averageCommissionPerTransaction: { type: Number, default: 0 }
    }
  },
  { 
    timestamps: true 
  }
);

const Commission = mongoose.model("Commission", commissionSchema);
export default Commission;


================================================================================

File: backend\models\coupon.model.js (starts at line 3766)

import mongoose from "mongoose";

const couponSchema = new mongoose.Schema(
  {
    // Coupon identification
    code: { 
      type: String, 
      required: true, 
      unique: true,
      uppercase: true,
      trim: true 
    },
    name: { 
      type: String, 
      required: true,
      trim: true 
    },
    description: String,
    
    // Discount details
    type: {
      type: String,
      enum: ["percentage", "fixed", "free_shipping"],
      required: true
    },
    value: { 
      type: Number, 
      required: true 
    }, // Percentage (0-100) or fixed amount
    
    // Usage limits
    maxUses: { 
      type: Number, 
      default: null 
    }, // null = unlimited
    usedCount: { 
      type: Number, 
      default: 0 
    },
    maxUsesPerUser: { 
      type: Number, 
      default: 1 
    },
    
    // Validity period
    validFrom: { 
      type: Date, 
      required: true 
    },
    validUntil: { 
      type: Date, 
      required: true 
    },
    
    // Conditions
    minOrderAmount: { 
      type: Number, 
      default: 0 
    },
    maxDiscountAmount: Number, // Cap for percentage discounts
    
    // Applicable items/categories
    applicableCategories: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Category" 
    }],
    applicableItems: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Item" 
    }],
    applicableSellers: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Seller" 
    }],
    
    // Status
    isActive: { 
      type: Boolean, 
      default: true 
    },
    
    // Creator (admin or seller)
    createdBy: { 
      type: mongoose.Schema.Types.ObjectId, 
      refPath: "creatorModel" 
    },
    creatorModel: {
      type: String,
      enum: ["Admin", "Seller"]
    },
    
    // Analytics
    analytics: {
      totalUsage: { type: Number, default: 0 },
      totalDiscount: { type: Number, default: 0 },
      totalRevenue: { type: Number, default: 0 },
      conversionRate: { type: Number, default: 0 }
    }
  },
  { 
    timestamps: true,
    indexes: [
      { code: 1 },
      { validFrom: 1, validUntil: 1 },
      { isActive: 1 }
    ]
  }
);

const Coupon = mongoose.model("Coupon", couponSchema);
export default Coupon;


================================================================================

File: backend\models\inventory.model.js (starts at line 3877)

import mongoose from "mongoose";

// Advanced inventory tracking system
const inventorySchema = new mongoose.Schema(
  {
    // Item reference
    item_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Item", 
      required: true,
      unique: true 
    },
    
    // Current stock levels
    currentStock: { 
      type: Number, 
      required: true,
      min: 0 
    },
    reservedStock: { 
      type: Number, 
      default: 0,
      min: 0 
    }, // Stock in pending orders
    availableStock: { 
      type: Number, 
      required: true,
      min: 0 
    }, // currentStock - reservedStock
    
    // Stock thresholds
    minStockLevel: { 
      type: Number, 
      default: 5 
    }, // Reorder point
    maxStockLevel: { 
      type: Number, 
      default: 1000 
    },
    reorderQuantity: { 
      type: Number, 
      default: 50 
    },
    
    // Cost tracking for profitability analysis
    costPrice: { 
      type: Number, 
      required: true 
    }, // What seller paid for the item
    sellingPrice: { 
      type: Number, 
      required: true 
    }, // Current selling price
    
    // Stock movements history
    movements: [{
      type: {
        type: String,
        enum: ["in", "out", "adjustment", "reserved", "unreserved"],
        required: true
      },
      quantity: { 
        type: Number, 
        required: true 
      },
      reason: String,
      reference: String, // Order ID, adjustment reason, etc.
      date: { 
        type: Date, 
        default: Date.now 
      },
      balanceAfter: { 
        type: Number, 
        required: true 
      }
    }],
    
    // Inventory status
    status: {
      type: String,
      enum: ["active", "low_stock", "out_of_stock", "discontinued"],
      default: "active"
    },
    
    // Location tracking (if multiple warehouses)
    location: {
      warehouse: String,
      section: String,
      shelf: String,
      bin: String
    },
    
    // Supplier information
    supplier: {
      name: String,
      contact: String,
      leadTime: { type: Number, default: 7 }, // Days
      minOrderQuantity: { type: Number, default: 1 }
    },
    
    // Analytics for this item
    analytics: {
      totalSold: { type: Number, default: 0 },
      totalRevenue: { type: Number, default: 0 },
      averageSalesPerDay: { type: Number, default: 0 },
      turnoverRate: { type: Number, default: 0 }, // How fast inventory moves
      profitMargin: { type: Number, default: 0 }, // (selling - cost) / selling * 100
      
      // Seasonal patterns
      seasonalDemand: [{
        month: { type: Number, min: 1, max: 12 },
        averageSales: { type: Number, default: 0 }
      }],
      
      // Forecasting
      predictedDemand: { type: Number, default: 0 }, // Next 30 days
      reorderDate: Date // When to reorder based on current sales velocity
    },
    
    // Alerts and notifications
    alerts: [{
      type: {
        type: String,
        enum: ["low_stock", "out_of_stock", "overstock", "slow_moving", "reorder_needed"]
      },
      message: String,
      isActive: { type: Boolean, default: true },
      createdAt: { type: Date, default: Date.now }
    }],
    
    // Last updated information
    lastStockUpdate: { 
      type: Date, 
      default: Date.now 
    },
    lastSale: Date,
    lastRestock: Date
  },
  { 
    timestamps: true,
    indexes: [
      { item_id: 1 },
      { status: 1 },
      { currentStock: 1 },
      { "analytics.turnoverRate": -1 }
    ]
  }
);

// Update available stock whenever current or reserved stock changes
inventorySchema.pre("save", function (next) {
  this.availableStock = this.currentStock - this.reservedStock;
  
  // Update status based on stock levels
  if (this.currentStock === 0) {
    this.status = "out_of_stock";
  } else if (this.currentStock <= this.minStockLevel) {
    this.status = "low_stock";
  } else {
    this.status = "active";
  }
  
  // Calculate profit margin
  if (this.sellingPrice > 0) {
    this.analytics.profitMargin = ((this.sellingPrice - this.costPrice) / this.sellingPrice) * 100;
  }
  
  console.log(`📦 Inventory updated for item: ${this.item_id}, Available: ${this.availableStock}`);
  next();
});

const Inventory = mongoose.model("Inventory", inventorySchema);
export default Inventory;


================================================================================

File: backend\models\items.model.js (starts at line 4050)

import mongoose from "mongoose";

const itemSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    quantity: {
        type: Number,
        required: true
    },
    
    status: {
        type: String,
        enum: ['available', 'sold', 'reserved'],
        default: 'available'
    },
    expiresAt: {
        type: Date,
        default: null

       
    },
   
    store_id: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Store', // Assuming you have a store model
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    //at the item every item has a price
    price: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Price', // Assuming you have a price model
        required: true
    },
    

},{timestamps: true});

const Item = mongoose.model('Item', itemSchema);

export default Item;


================================================================================

File: backend\models\location.model.js (starts at line 4096)

import mongoose from "mongoose";

// Model to represent Rwandan administrative divisions
const locationSchema = new mongoose.Schema(
  {
    name: { 
      type: String, 
      required: true, 
      trim: true 
    },
    type: {
      type: String,
      enum: ["province", "district", "sector", "cell"],
      required: true
    },
    
    // Parent-child relationship for hierarchy
    parent: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Location", 
      default: null 
    },
    
    // Unique identifier for each level (e.g., "Kigali", "Gasabo", "Remera", "Giporoso")
    slug: { 
      type: String, 
      required: true, 
      unique: true, 
      lowercase: true 
    },
    
    // For cells, we might store coordinates for future radius-based delivery
    coordinates: {
      latitude: Number,
      longitude: Number
    },
    
    // Metadata
    population: Number,
    area: Number, // in km²
    
    // For easy lookup of full path
    fullPath: { 
      type: String, 
      unique: true 
    } // e.g., "Kigali/Gasabo/Remera/Giporoso"
  },
  { 
    timestamps: true,
    indexes: [
      { type: 1, name: 1 },
      { parent: 1 },
      { fullPath: 1 }
    ]
  }
);

// Pre-save hook to generate slug and fullPath
locationSchema.pre("save", async function (next) {
  if (this.isModified("name") || this.isModified("parent")) {
    this.slug = this.name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');

    if (this.parent) {
      const parentLocation = await mongoose.model("Location").findById(this.parent);
      if (parentLocation) {
        this.fullPath = `${parentLocation.fullPath}/${this.name}`;
      } else {
        this.fullPath = this.name; // Should not happen if parent is valid
      }
    } else {
      this.fullPath = this.name;
    }
    console.log(`📍 Location path generated: ${this.fullPath}`);
  }
  next();
});

const Location = mongoose.model("Location", locationSchema);
export default Location;


================================================================================

File: backend\models\notification.schema.js (starts at line 4178)

import mongoose from "mongoose";

const notificationSchema = new mongoose.Schema({
    title: {
        type: String,
        default: 'Notification of VirMar',
        trim: true
    },
    message: {
        type: String,
        required: true,
        trim: true
    },
    recipientId: {
        type: mongoose.Schema.Types.ObjectId,
        required: true,
        refPath: 'recipientModel'
    },
    recipientModel: {
        type: String,
        required: true,
        enum: ['Buyer', 'Seller']
    },
    status: {
        type: Boolean,
        default: false
    }
}, { timestamps: true });

const Notification = mongoose.model('Notification', notificationSchema);

// Export the model and create the collection
export default Notification;



================================================================================

File: backend\models\order.model.js (starts at line 4212)

import mongoose from "mongoose";

const orderSchema = new mongoose.Schema(
  {
    // Order identification
    orderNumber: { 
      type: String, 
      unique: true, 
      required: true 
    },
    
    // Parties involved
    buyer_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Buyer", 
      required: true 
    },
    seller_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Seller", 
      required: true 
    },
    
    // Order items - array of items in this order
    items: [{
      item_id: { 
        type: mongoose.Schema.Types.ObjectId, 
        ref: "Item", 
        required: true 
      },
      quantity: { 
        type: Number, 
        required: true, 
        min: 1 
      },
      unitPrice: { 
        type: Number, 
        required: true 
      },
      totalPrice: { 
        type: Number, 
        required: true 
      }
    }],
    
    // Financial breakdown
    subtotal: { 
      type: Number, 
      required: true 
    },
    platformFee: { 
      type: Number, 
      required: true, 
      default: 0 
    },
    shippingCost: { 
      type: Number, 
      default: 0 
    },
    tax: { 
      type: Number, 
      default: 0 
    },
    discount: { 
      type: Number, 
      default: 0 
    },
    totalAmount: { 
      type: Number, 
      required: true 
    },
    
    // Order lifecycle status
    status: {
      type: String,
      enum: [
        "pending",           // Order created, awaiting payment
        "confirmed",         // Payment confirmed, processing
        "processing",        // Seller preparing order
        "shipped",          // Order shipped
        "delivered",        // Order delivered
        "completed",        // Order completed successfully
        "cancelled",        // Order cancelled
        "refunded",         // Order refunded
        "disputed"          // Order in dispute
      ],
      default: "pending"
    },
    
    // Payment information
    paymentMethod: {
      type: String,
      enum: ["wallet", "mobile_money", "credit_card", "bank_transfer"],
      required: true
    },
    paymentStatus: {
      type: String,
      enum: ["pending", "completed", "failed", "refunded"],
      default: "pending"
    },
    
    // Shipping information - Updated for Rwandan hierarchy
    shippingAddress: {
      province: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      district: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      sector: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      cell: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      streetAddress: String, // Specific street/house number
      notes: String // Any delivery notes
    },
    
    // Selected delivery option for this order
    selectedDeliveryOption: {
      type: {
        type: String,
        enum: ["seller_delivery", "buyer_pickup", "third_party_courier"],
        required: true
      },
      providerName: String, // If third_party_courier
      cost: { type: Number, default: 0 }
    },
    
    // Tracking information
    trackingNumber: String,
    shippingProvider: String, // This will be the seller_delivery or third_party_courier name
    estimatedDelivery: Date,
    actualDelivery: Date,
    
    // Economic analytics fields
    economicMetrics: {
      // Revenue distribution
      sellerRevenue: { type: Number, default: 0 },
      platformRevenue: { type: Number, default: 0 },
      taxRevenue: { type: Number, default: 0 },
      
      // Cost analysis
      processingCost: { type: Number, default: 0 },
      shippingCost: { type: Number, default: 0 },
      
      // Profitability metrics
      grossMargin: { type: Number, default: 0 },
      netMargin: { type: Number, default: 0 }
    },
    
    // Order notes and communication
    notes: String,
    cancelReason: String,
    
    // Timestamps for analytics
    confirmedAt: Date,
    shippedAt: Date,
    deliveredAt: Date,
    completedAt: Date
  },
  { 
    timestamps: true,
    // Add indexes for better query performance
    indexes: [
      { buyer_id: 1, createdAt: -1 },
      { seller_id: 1, createdAt: -1 },
      { status: 1 },
      { orderNumber: 1 }
    ]
  }
);

// Generate unique order number before saving
orderSchema.pre("save", async function (next) {
  if (this.isNew) {
    // Generate order number: ORD-YYYYMMDD-XXXXX
    const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const randomNum = Math.floor(Math.random() * 99999).toString().padStart(5, '0');
    this.orderNumber = `ORD-${date}-${randomNum}`;
    
    // Calculate economic metrics
    this.economicMetrics.sellerRevenue = this.subtotal - this.platformFee;
    this.economicMetrics.platformRevenue = this.platformFee;
    this.economicMetrics.taxRevenue = this.tax;
    
    console.log(`📦 Order number generated: ${this.orderNumber}`);
  }
  next();
});

const Order = mongoose.model("Order", orderSchema);
export default Order;


================================================================================

File: backend\models\payout.model.js (starts at line 4398)

import mongoose from "mongoose";

const payoutSchema = new mongoose.Schema(
  {
    // Payout recipient
    seller_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Seller", 
      required: true 
    },
    
    // Payout details
    amount: { 
      type: Number, 
      required: true 
    },
    currency: { 
      type: String, 
      default: "RWF" 
    },
    
    // Payout period
    periodStart: { 
      type: Date, 
      required: true 
    },
    periodEnd: { 
      type: Date, 
      required: true 
    },
    
    // Orders included in this payout
    orders: [{ 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Order" 
    }],
    
    // Financial breakdown
    grossSales: { 
      type: Number, 
      required: true 
    },
    platformFees: { 
      type: Number, 
      required: true 
    },
    refunds: { 
      type: Number, 
      default: 0 
    },
    adjustments: { 
      type: Number, 
      default: 0 
    },
    netAmount: { 
      type: Number, 
      required: true 
    },
    
    // Payout status
    status: {
      type: String,
      enum: ["pending", "processing", "completed", "failed", "cancelled"],
      default: "pending"
    },
    
    // Payment method for payout
    payoutMethod: {
      type: String,
      enum: ["bank_transfer", "mobile_money", "wallet"],
      required: true
    },
    
    // Bank details (if bank transfer)
    bankDetails: {
      accountName: String,
      accountNumber: String,
      bankName: String,
      routingNumber: String
    },
    
    // Mobile money details
    mobileMoneyDetails: {
      phoneNumber: String,
      provider: String
    },
    
    // Processing information
    processedAt: Date,
    transactionId: String, // External payment processor transaction ID
    failureReason: String,
    
    // Notes
    notes: String
  },
  { 
    timestamps: true,
    indexes: [
      { seller_id: 1, createdAt: -1 },
      { status: 1 },
      { periodStart: 1, periodEnd: 1 }
    ]
  }
);

const Payout = mongoose.model("Payout", payoutSchema);
export default Payout;


================================================================================

File: backend\models\price.schema.js (starts at line 4505)

import mongoose from "mongoose";

const priceSchema = new mongoose.Schema({
  reservedPrice: { type: Number, required: true },
  soldAtPrice: { type: Number, default: null },
  demandPrice: { type: Number, default: null },
  sellingPrice: { type: Number, default: null },
  discountPrice: { type: Number, default: null },

  priceHistory: [{ price: Number, date: Date }],
  demandScore: { type: Number, default: 0 },
  stockQuantity: { type: Number, default: 1 },
  priceType: { type: String, enum: ['fixed', 'negotiable', 'dynamic'], default: 'fixed' }
});


const Price = mongoose.model('Price', priceSchema);

export default Price;



================================================================================

File: backend\models\review.model.js (starts at line 4525)

import mongoose from "mongoose";

const reviewSchema = new mongoose.Schema(
  {
    // Review parties
    buyer_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Buyer", 
      required: true 
    },
    seller_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Seller", 
      required: true 
    },
    item_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Item", 
      required: true 
    },
    order_id: { 
      type: mongoose.Schema.Types.ObjectId, 
      ref: "Order", 
      required: true 
    },
    
    // Review content
    rating: { 
      type: Number, 
      required: true, 
      min: 1, 
      max: 5 
    },
    title: { 
      type: String, 
      trim: true,
      maxlength: 100 
    },
    comment: { 
      type: String, 
      trim: true,
      maxlength: 1000 
    },
    
    // Review media
    images: [String], // Array of image URLs
    
    // Review verification
    isVerifiedPurchase: { 
      type: Boolean, 
      default: true 
    },
    
    // Moderation
    status: {
      type: String,
      enum: ["pending", "approved", "rejected", "flagged"],
      default: "pending"
    },
    moderationNotes: String,
    
    // Helpfulness tracking
    helpfulVotes: { 
      type: Number, 
      default: 0 
    },
    totalVotes: { 
      type: Number, 
      default: 0 
    },
    
    // Seller response
    sellerResponse: {
      message: String,
      respondedAt: Date
    }
  },
  { 
    timestamps: true,
    indexes: [
      { item_id: 1, status: 1, createdAt: -1 },
      { seller_id: 1, createdAt: -1 },
      { buyer_id: 1, createdAt: -1 }
    ]
  }
);

// Prevent duplicate reviews for same order-item combination
reviewSchema.index({ buyer_id: 1, order_id: 1, item_id: 1 }, { unique: true });

const Review = mongoose.model("Review", reviewSchema);
export default Review;


================================================================================

File: backend\models\sellers.model.js (starts at line 4617)

import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const sellersSchema = new mongoose.Schema(
  {
    name: { type: String, required: true, trim: true },
    fullname: { type: String, trim: true },
    email: { type: String, required: true, unique: true, trim: true },
    phone: { type: String, unique: true, trim: true },
    store: { type: mongoose.Schema.Types.ObjectId, ref: "Store" },
    password: { type: String, required: true, minlength: 6 },
    role: { type: String, enum: ["seller", "admin"], default: "seller" },
    isActive: { type: Boolean, default: true },
    isVerified: { type: Boolean, default: false },
    transactions: [
      { type: mongoose.Schema.Types.ObjectId, ref: "Transaction" },
    ],
    paymentMethods: [
      {
        type: String,
        enum: ["cash", "credit_card", "mobile_money", "bank_transfer"],
        default: "cash",
      },
    ],
    notifications: [
      { type: mongoose.Schema.Types.ObjectId, ref: "Notification" },
    ],
    wallet: { type: mongoose.Schema.Types.ObjectId, ref: "Wallet" },
  },
  { timestamps: true }
);

sellersSchema.pre("save", async function (next) {
  if (this.isModified("password")) {
    try {
      const salt = await bcrypt.genSalt(10);
      this.password = await bcrypt.hash(this.password, salt);
      console.log("password is hashed");
      next();
    } catch (err) {
      next(err);
      console.log(`error in handling pre save ${err}`);
    }
  }
});

const Seller = mongoose.model("Seller", sellersSchema);
export default Seller;



================================================================================

File: backend\models\store.schema.js (starts at line 4666)

import mongoose from "mongoose";

const storeSchema = new mongoose.Schema(
  {
    name: { type: String, required: true, trim: true },
    seller_id: { type: mongoose.Schema.Types.ObjectId, ref: "Seller", required: true },
    description: { type: String, trim: true },
    
    // Store's physical location (base for delivery calculations)
    location: {
      province: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      district: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      sector: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true },
      cell: { type: mongoose.Schema.Types.ObjectId, ref: "Location", required: true }
    },
    
    // Seller's defined delivery coverage
    deliveryCoverage: {
      type: {
        type: String,
        enum: ["radius_cells", "specific_cells", "specific_sectors", "specific_districts", "specific_provinces", "national"],
        default: "radius_cells" // Default to a small radius around the store
      },
      // For "radius_cells": number of cells away from store's cell
      // For "specific_cells", "specific_sectors", etc.: array of Location IDs
      value: mongoose.Schema.Types.Mixed, // Can be a Number (radius) or Array of ObjectIds
      
      // Optional: flat rate for delivery within coverage
      deliveryFee: { type: Number, default: 0 }
    },
    
    // Delivery options offered by the seller
    deliveryOptions: [{
      type: {
        type: String,
        enum: ["seller_delivery", "buyer_pickup", "third_party_courier"],
        required: true
      },
      // If third_party_courier, specify provider (e.g., "Kigali Express")
      providerName: String,
      // Additional costs or notes for this option
      cost: { type: Number, default: 0 },
      notes: String
    }],

    isActive: { type: Boolean, default: true },
    products: [{ type: mongoose.Schema.Types.ObjectId, ref: "Item" }],
    reviews: [{ type: mongoose.Schema.Types.ObjectId, ref: "Review" }],
    averageRating: { type: Number, default: 0 },
    contactEmail: { type: String, trim: true },
    contactPhone: { type: String, trim: true },
  },
  { timestamps: true }
);

const Store = mongoose.model("Store", storeSchema);
export default Store;


================================================================================

File: backend\models\transaction.schema.js (starts at line 4723)

import mongoose from "mongoose";

const transactionSchema = new mongoose.Schema(
  {
    type: {
      type: String,
      enum: [
        "purchase",
        "return",
        "deposit",
        "withdrawal",
        "transfer",
        "escrow",         // ✅ added
      ],
      required: true,
    },

    orderId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Order",      // ✅ Link to order (used in escrow/purchase)
    },

    item_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Item",
    },

    from_user_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",       // Buyer / sender
    },

    to_user_id: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",       // Seller / receiver
    },

    quantity: {
      type: Number,
      default: 1,
    },

    totalPrice: {
      type: Number,
      required: true,
    },

    transactionDate: {
      type: Date,
      default: Date.now,
    },

    status: {
      type: String,
      enum: [
        "pending",
        "completed",
        "cancelled",
        "held",        // ✅ Escrow funds are held
        "released",    // ✅ Escrow funds are released to seller
      ],
      default: "pending",
    },
  },
  { timestamps: true }
);

const Transaction = mongoose.model("Transaction", transactionSchema);
export default Transaction;



================================================================================

File: backend\models\wallet.schema.js (starts at line 4793)

import mongoose from "mongoose";
// import Wallet from './wallet.schema.js';

const walletSchema = new mongoose.Schema({
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    refPath: "ownerModel",
  },
  ownerModel: {
    type: String,
    required: true,
    enum: ["Seller", "Buyer"],
  },
  balance: { type: Number, default: 0 },
  currency: { type: String, default: "RWF" },
});


const Wallet = mongoose.model("Wallet", walletSchema);
export default Wallet;



================================================================================

File: backend\routes\buyer.routes.js (starts at line 4815)

import express from "express";
import protectBuyerRoute from "../configs/middleware/potect.buyerRoute.js";
import {
  withdrawFromWallet,
  addItemToCart,
  depositToWallet,
  getCartItems,
  getUserProfile,
  login,
  logout,
  register,
} from "../controllers/buyer.controllers.js";
// 📦 Order Controller Imports
import {
  createOrderFromCart,
  getBuyerOrders,
  cancelOrder
} from "../controllers/order.controllers.js";
// bbb brb 

const BuyerRoutes = express.Router();

BuyerRoutes.post("/register", register);
BuyerRoutes.post("/login", login);
BuyerRoutes.get("/logout", logout);
BuyerRoutes.get("/profile", protectBuyerRoute, getUserProfile);

// cart and buying activities
BuyerRoutes.post("/cart/:cartId/item", protectBuyerRoute, addItemToCart);
BuyerRoutes.get("/cart", protectBuyerRoute, getCartItems);

// 🛍️ Create Order (from Cart)
BuyerRoutes.post('/order', protectBuyerRoute, createOrderFromCart); // POST /api/buyer/order

// 📜 Get All Buyer Orders
BuyerRoutes.get('/orders', protectBuyerRoute, getBuyerOrders); // GET /api/buyer/orders

// ❌ Cancel an Order
BuyerRoutes.patch('/order/:orderId/cancel', protectBuyerRoute, cancelOrder); // PATCH /api/buyer/order/:orderId/cancel


// BuyerRoutes.get('/checkout',protect)

//wallet meaning money routes
BuyerRoutes.post("/deposit", protectBuyerRoute, depositToWallet);
BuyerRoutes.post("/withdrawal",protectBuyerRoute, withdrawFromWallet)

export default BuyerRoutes;



================================================================================

File: backend\routes\escrow.routes.js (starts at line 4864)

import express from "express";
import { releaseEscrow, getEscrowStatus } from "../controllers/escrow.controllers.js";
import protectBuyerRoute from "../configs/middleware/potect.buyerRoute.js";

const router = express.Router();

// POST: /api/escrow/release/:orderId
router.post("/release/:orderId", protectBuyerRoute, releaseEscrow);

// GET: /api/escrow/status/:orderId
router.get("/status/:orderId", protectBuyerRoute, getEscrowStatus);

export default router;



================================================================================

File: backend\routes\public.routes.js (starts at line 4878)

// routes/public.routes.js

import express from "express";
import Seller from "../models/sellers.model.js";
import Item from "../models/items.model.js";
// import publicRouter from "../configs/middleware/protectRoutes.js"; // You might remove this if it's unused
import protectRoutes from "../configs/middleware/protectRoutes.js";

const publicRouter = express.Router();

publicRouter.get("/", async (req, res) => {
  try {
    // 🔹 Get active sellers and exclude sensitive fields
    const sellers = await Seller.find({ isActive: true }).select("-password -__v");

    // 🔹 Get all items with populated price and store data
    const items = await Item.find({})
      .populate("price")
      .populate("store_id")
      .select("-__v");

    // 🔹 Format the products to match frontend expectations
    const formattedProducts = items.map((item) => {
      let priceAmount = 0;
      let priceLabel = "₣0";

      if (item.price) {
        if (typeof item.price === "object") {
          priceAmount = item.price.amount ?? 0;
          priceLabel = `₣${priceAmount}`;
        } else if (typeof item.price === "number") {
          priceAmount = item.price;
          priceLabel = `₣${priceAmount}`;
        } else if (typeof item.price === "string") {
          const num = item.price.replace(/[^\d]/g, "");
          priceAmount = num ? parseInt(num, 10) : 0;
          priceLabel = item.price.startsWith("₣") ? item.price : `₣${priceAmount}`;
        }
      }

      return {
        _id: item._id,
        name: item.name,
        price: priceAmount,
        priceLabel,
        category:  "Uncategorized",
        location:  "Unknown",
        available: item.status === "available",
        quantity: item.quantity ?? 0,
        img: item.img || "/products/default.png",
      };
    });

    return res.status(200).json({
      sellers,
      products: formattedProducts,
    });
  } catch (error) {
    console.error("Error fetching public marketplace data:", error.message);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// export default router;


// Authenticated /Info route
publicRouter.get("/Info", protectRoutes, async (req, res) => {
  const { role } = req.user;
  try {
    if (role === "buyer") {
      // Logic for buyer-specific info
      return res.status(200).json({ message: "You are a buyer" });
    } else if (role === "seller") {
      // Logic for seller-specific info
      return res.status(200).json({ message: "You are a seller" });
    } else {
      return res.status(400).json({ message: "Invalid user role" });
    }
  } catch (error) {
    console.error("Error in /Info route:", error);
    res.status(500).json({ message: error.message });
  }
});

export default publicRouter;



================================================================================

File: backend\routes\seller.routes.js (starts at line 4965)

import express from "express";
import protectSellerRoute from "../configs/middleware/protect.sellerRoute.js";
import {
  register,
  login,
  logout,
  getUserProfile,
  addItemToStore,
  getStoreItems,
  updateItem,
  deleteItem,
} from "../controllers/seller.controllers.js";

const sellerRoutes = express.Router();

sellerRoutes.post("/register", register);
sellerRoutes.post("/login", login);
sellerRoutes.get("/logout", logout);
sellerRoutes.get("/profile", protectSellerRoute, getUserProfile);

// Items CRUD
sellerRoutes.post("/store/:storeId/item", protectSellerRoute, addItemToStore);
sellerRoutes.get("/store/:storeId/items", protectSellerRoute, getStoreItems);
sellerRoutes.patch("/item/:itemId", protectSellerRoute, updateItem);
sellerRoutes.delete("/item/:itemId", protectSellerRoute, deleteItem);

export default sellerRoutes;



================================================================================

File: backend\routes\transact.routes.js (starts at line 4993)

// manages all of the wallet operations

import express from "express";
import { createTransaction } from "../controllers/transact.controllers.js";
import { cancelOrder } from "../controllers/order.controllers.js";
import protectBuyerRoute from "../configs/middleware/potect.buyerRoute.js";
import protectRoutes from "../configs/middleware/protectRoutes.js";
import { depositFunds } from "../controllers/transact.controllers.js";


const transactRoutes = express.Router();

transactRoutes.post("/createtransaction", createTransaction) ;
transactRoutes.post('/cancel/:orderId',protectRoutes, cancelOrder)
transactRoutes.post("/deposit",protectRoutes,depositFunds);

export default transactRoutes;



================================================================================

File: backend\sockets\sockets.js (starts at line 5011)

import { Server } from "socket.io";

export function initSocketServer(server) {
  const io = new Server(server, {
    cors: {
      origin: "http://localhost:5173", // ✅ Must match your frontend port
      credentials: true,               // ✅ Allow cookies/auth headers
    },
  });

  io.on("connection", (socket) => {
    console.log("🟢 Socket connected:", socket.id);

    // Join a room (based on orderId)
    socket.on("joinRoom", ({ orderId }) => {
      socket.join(orderId);
      console.log(`🔗 ${socket.id} joined room: ${orderId}`);
    });

    // Handle chat messages
    socket.on("sendMessage", (messageData) => {
      const { orderId } = messageData;
      if (!orderId) {
        console.warn("⚠️ Missing orderId in message");
        return;
      }
      io.to(orderId).emit(`chat-${orderId}`, messageData);
      console.log(`💬 Message sent to room ${orderId}:`, messageData.message);
    });

    // Optional: Handle order status updates
    socket.on("orderUpdate", ({ orderId, status }) => {
      io.to(orderId).emit("orderUpdated", status);
      console.log(`📦 Order ${orderId} updated to ${status}`);
    });

    // Disconnect
    socket.on("disconnect", () => {
      console.log("🔴 Socket disconnected:", socket.id);
    });
  });
}



================================================================================

File: backend\utils\email.notification.js (starts at line 5054)

import nodemailer from 'nodemailer';
// 
import dotenv from 'dotenv';  

dotenv.config();

// Accept a Notification object and send an email using its data
export async function sendEmailNotification(title, message, recipientEmail) {
  console.log('sending email'); // don't push this to production logs

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL,
      pass: process.env.PASSWORD
    }
  });
  

  const mailOptions = {
    from: process.env.EMAIL,
    to: recipientEmail,          // expects email field
    replyTo: process.env.EMAIL,               // optional
    subject: title,
    text: message
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log('✅ Email sent successfully');
  } catch (error) {
    console.error('❌ Error sending email:', error);
  }
}



================================================================================

File: backend\utils\initiate.payment.js (starts at line 5089)




// still in development too


================================================================================

File: backend\utils\momoService.js (starts at line 5093)

import dotenv from 'dotenv';
import axios from 'axios';
import { v4 as uuidv4 } from 'uuid';

dotenv.config();

const subscriptionKey = process.env.MTNSUBSCRIPTIONKEY;
const apiUser = process.env.MTNAPIUSER;
const apiKey = process.env.MTNAPIKEY;
const targetEnvironment = 'sandbox';

if (!subscriptionKey || !apiUser || !apiKey) {
  throw new Error('Missing MTN credentials in environment variables');
}

let accessToken = null;
let tokenExpiry = 0;

// 🔑 Generate Access Token
async function getAccessToken() {
  const credentials = Buffer.from(`${apiUser}:${apiKey}`).toString('base64');
  const url = 'https://sandbox.momodeveloper.mtn.com/collection/token/';

  try {
    const response = await axios.post(url, {}, {
      headers: {
        Authorization: `Basic ${credentials}`,
        'Ocp-Apim-Subscription-Key': subscriptionKey,
        'X-Target-Environment': targetEnvironment,
      },
    });

    accessToken = response.data.access_token;
    tokenExpiry = Date.now() + 3600 * 1000; // 1 hour validity
    console.log('🔐 MoMo access token refreshed');
    return accessToken;
  } catch (error) {
    console.error('❌ Token fetch failed:', error.response?.data || error.message);
    return null;
  }
}

// 🔁 Refresh Token if Expired
async function refreshTokenIfNeeded() {
  if (!accessToken || Date.now() >= tokenExpiry) {
    await getAccessToken();
  }
  return accessToken;
}

// 💰 Check Account Balance
async function checkBalance() {
  const token = await refreshTokenIfNeeded();
  if (!token) throw new Error('Token fetch failed');

  const url = 'https://sandbox.momodeveloper.mtn.com/collection/v1_0/account/balance';
  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'X-Target-Environment': targetEnvironment,
      'Ocp-Apim-Subscription-Key': subscriptionKey,
    },
  };

  try {
    const response = await axios.post(url, {}, config);
    return response.data;
  } catch (error) {
    console.error('💸 Balance check failed:', error.response?.data || error.message);
    throw error;
  }
}

// 📥 Initiate Payment
async function initiatePayment(partyId, externalId, amount, currency = 'EUR') {
  const token = await refreshTokenIfNeeded();
  if (!token) throw new Error('Token fetch failed');

  const referenceId = uuidv4();
  const body = {
    amount,
    currency,
    externalId,
    payer: {
      partyIdType: 'MSISDN',
      partyId,
    },
    payerMessage: 'Payment initiated',
    payeeNote: 'VirMar Marketplace',
  };

  const config = {
    headers: {
      Authorization: `Bearer ${token}`,
      'X-Reference-Id': referenceId,
      'X-Target-Environment': targetEnvironment,
      'Ocp-Apim-Subscription-Key': subscriptionKey,
      'Content-Type': 'application/json',
    },
  };

  try {
    await axios.post(
      'https://sandbox.momodeveloper.mtn.com/collection/v1_0/requesttopay',
      body,
      config
    );
    console.log('📌 Payment reference ID:', referenceId);
    return { referenceId };
  } catch (error) {
    console.error('🚫 Payment initiation failed:', error.response?.data || error.message);
    throw error;
  }
}

export { checkBalance, initiatePayment };
// to intergrate momo payment



================================================================================

File: backend\utils\notification.maker.js (starts at line 5211)

// backend/utils/notifications.js
import Notification from '../models/notification.schema.js';

  
  export async function generateNotification(title, message, recipientId, recipientModel) {
    const notification = new Notification({ title, message, recipientId, recipientModel });
    
    await notification.save();
    return notification;
  }

 


================================================================================

File: backend\utils\redis.connect.js (starts at line 5223)

// redis.connect.js
import { createClient } from 'redis';
// import dotenv from 'dotenv'

// dotenv.config()
// wrong algorithm or connection

const redisClient = createClient({
  url: process.env.REDIS_URL,
});

redisClient.on('error', (err) => console.error('❌ Redis Client Error:', err));
redisClient.on('connect', () => console.log('🔌 Redis client connecting...'));
redisClient.on('ready', () => console.log('✅ Redis client connected and ready!'));

export default redisClient;



================================================================================

File: backend\utils\requests.validate.js (starts at line 5240)





async function validateInput(req,res,next) {
    next()
}


================================================================================

File: backend\utils\transaction.init.js (starts at line 5247)



export const verifyTransaction = async (transactionId) => {
  

};
// this also can make me feel comfortable if populated with codes



================================================================================

File: frontend\VirMar-RWANDA\eslint.config.js (starts at line 5255)

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])



================================================================================

File: frontend\VirMar-RWANDA\index.html (starts at line 5285)

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>VirMar</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================================================

File: frontend\VirMar-RWANDA\package.json (starts at line 5299)

{
  "name": "virmar-rwanda",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@chakra-ui/icons": "^2.2.4",
    "@chakra-ui/react": "^2.10.9",
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "axios": "^1.10.0",
    "chart.js": "^4.5.0",
    "framer-motion": "^11.18.2",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.6.3",
    "recharts": "^3.1.0",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.5.2",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "vite": "^7.0.2"
  }
}



================================================================================

File: frontend\VirMar-RWANDA\README.md (starts at line 5343)

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.



================================================================================

File: frontend\VirMar-RWANDA\vite.config.js (starts at line 5356)

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})



================================================================================

File: frontend\VirMar-RWANDA\src\app.jsx (starts at line 5364)

import React from 'react';
import MainRouter from './router';

function App() {
  return (
    <div>
      <MainRouter />
    </div>
  );
}

export default App;



================================================================================

File: frontend\VirMar-RWANDA\src\index.css (starts at line 5377)

/* 
this will contain main styles for all the routes
*/

/* 
FOR EXAMPLE

*FONTS
*COLORS
*CUSTOMS
*ANIMATION
*CALCULATION

*/
*{
    box-sizing: border-box;
}

.navbar{
    background-color: rgba(0, 0, 0, 0.8);

    color: red;
    position: fixed;
    top: 1px;
    left: 1px;
    right: 1px;
    padding: 20px;
    display: flex;
    border-radius: 15px;
    justify-content: space-between;
    box-shadow: 0px 0px 10px  rgba(255, 255, 200, 0.8);

}
.navbar div{
    margin: 3px;
    border: 2px solid white;
    padding: 5px;
    border-radius: 5px;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    text-decoration: none;
    cursor: pointer;
}
.navbar div:hover{
    background: rgba(0, 0, 0, 0.3);
}
.navbar:hover{
    background: #000;

}
/* how to check the scrolling of the window in css */
nav{
        display: flex;
}
.body{
    height: 100vh;
}
.body div{
    height: 100vh;
}
.body :nth-child(1){
    
    margin-top: 80px;
}



================================================================================

File: frontend\VirMar-RWANDA\src\index.js (starts at line 5441)

/**
 * Handling what i do not know yet
 * entry point
 */


================================================================================

File: frontend\VirMar-RWANDA\src\main.jsx (starts at line 5445)

// index.js

import React, { StrictMode } from "react";
import ReactDOM from "react-dom/client";
import App from "./app.jsx"; // Make sure your file is named 'App.js' with a capital A
import "./index.css"


const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
<StrictMode>
    <App />
</StrictMode>
    
  
);



================================================================================

File: frontend\VirMar-RWANDA\src\router.jsx (starts at line 5462)

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import PublicRouter from './Public/Router';
import BuyerRouter from './Buyer/Router';
import SellerContextWrapper from './seller/SellerContextWrapper';  // <-- use wrapper here
import NotFoundPage from './pages/NotFoundPage';

const MainRouter = () => (
  <Router>
    <Routes>
      <Route path="/*" element={<PublicRouter />} />
      <Route path="/buyer/*" element={<BuyerRouter />} />
      <Route path="/seller/*" element={<SellerContextWrapper />} />  {/* context + routes */}
      <Route path="*" element={<NotFoundPage />} />
    </Routes>
  </Router>
);

export default MainRouter;



================================================================================

File: frontend\VirMar-RWANDA\src\api\analyticsApi.js (starts at line 5482)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/analytics';
 
const getTrustScore = (token) => {
    return axios.get(`${API_URL}/trust-score`, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

const getDemand = (token) => {
    return axios.get(`${API_URL}/demand`, { 
        headers: { Authorization: `Bearer ${token}` },
    });
};

export const analyticsApi = {
    getTrustScore,
    getDemand,
};


================================================================================

File: frontend\VirMar-RWANDA\src\api\authApi.js (starts at line 5502)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/auth';

const register = (username, email, password, role) => {
    return axios.post(`${API_URL}/register`, {
        username,
        email,
        password,
        role,
    });
};

const login = (email, password, role) => {
    return axios.post(`${API_URL}/login`, {
        email,
        password,
        role,
    });
};

export const authApi = {
    register,
    login,
};


================================================================================

File: frontend\VirMar-RWANDA\src\api\buyerApi.js (starts at line 5527)

import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api/buyer';

export const registerBuyer = (data) => {
  return axios.post(`${API_BASE_URL}/register`, data, { withCredentials: true });
};

export const loginBuyer = (data) => {
  return axios.post(`${API_BASE_URL}/login`, data, { withCredentials: true });
};

export const fetchBuyerProfile = () => {
  return axios.get(`${API_BASE_URL}/profile`, { withCredentials: true });
};

export const updateBuyerProfile = (data) => {
  return axios.put(`${API_BASE_URL}/profile`, data, { withCredentials: true });
};

export const fetchBuyerWallet = () => {
  return axios.get(`${API_BASE_URL}/wallet`, { withCredentials: true });
};

export const fetchEscrowDetails = (transactionId) => {
  return axios.get(`${API_BASE_URL}/escrow/${transactionId}`, { withCredentials: true });
};

export const searchProducts = (query) => {
  return axios.get(`${API_BASE_URL}/products/search`, { 
    params: { q: query },
    withCredentials: true 
  });
};

export const fetchProductDetails = (productId) => {
  return axios.get(`${API_BASE_URL}/products/${productId}`, { withCredentials: true });
};



================================================================================

File: frontend\VirMar-RWANDA\src\api\escrowApi.js (starts at line 5566)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/escrow';

const start = (productId, amount, token) => {
    return axios.post(
        `${API_URL}/start`,
        { productId, amount },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
};

const confirm = (escrowId, token) => {
    return axios.post(
        `${API_URL}/confirm`,
        { escrowId },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
};

const release = (escrowId, token) => {
    return axios.post(
        `${API_URL}/release`,
        { escrowId },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
};

export const escrowApi = {
    start,
    confirm,
    release,
};


================================================================================

File: frontend\VirMar-RWANDA\src\api\notificationApi.js (starts at line 5605)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/notifications';

const poll = (token) => {
    return axios.get(API_URL, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

export const notificationApi = {
    poll,
};


================================================================================

File: frontend\VirMar-RWANDA\src\api\productApi.js (starts at line 5618)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/products';

const getAll = () => {
    return axios.get(API_URL);
};

const getOne = (id) => {
    return axios.get(`${API_URL}/${id}`);
};

const create = (product, token) => {
    return axios.post(API_URL, product, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

const update = (id, product, token) => {
    return axios.put(`${API_URL}/${id}`, product, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

const remove = (id, token) => {
    return axios.delete(`${API_URL}/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

export const productApi = {
    getAll,
    getOne,
    create,
    update,
    remove,
};


================================================================================

File: frontend\VirMar-RWANDA\src\api\seller.api.js (starts at line 5655)

import axios from "axios";

const API_BASE = "http://localhost:5000/api/seller";

const api = axios.create({
  baseURL: API_BASE,
  withCredentials: true,
});

// Auth & Profile
export const registerSeller = (data) => api.post("/register", data);
export const loginSeller = (data) => api.post("/login", data);
export const logoutSeller = () => api.get("/logout");
export const fetchSellerProfile = () => api.get("/profile");

// Items CRUD
export const addItemToStore = (storeId, itemData) =>
  api.post(`/store/${storeId}/item`, itemData);

export const fetchStoreItems = (storeId) =>
  api.get(`/store/${storeId}/items`);

export const updateItemById = (itemId, updateData) =>
  api.patch(`/item/${itemId}`, updateData);

export const deleteItemById = (itemId) =>
  api.delete(`/item/${itemId}`);

export default {
  registerSeller,
  loginSeller,
  logoutSeller,
  fetchSellerProfile,
  addItemToStore,
  fetchStoreItems,
  updateItemById,
  deleteItemById,
};



================================================================================

File: frontend\VirMar-RWANDA\src\api\walletApi.js (starts at line 5694)

import axios from 'axios';

const API_URL = 'http://localhost:5000/api/wallet';

const getBalance = (token) => {
    return axios.get(`${API_URL}/balance`, {
        headers: { Authorization: `Bearer ${token}` },
    });
};

const deposit = (amount, token) => {
    return axios.post(
        `${API_URL}/deposit`,
        { amount },
        {
            headers: { Authorization: `Bearer ${token}` },
        }
    );
};

export const walletApi = {
    getBalance,
    deposit,
};


================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\Navbar.jsx (starts at line 5718)

import React, { useEffect, useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import {
  Box,
  Flex,
  HStack,
  IconButton,
  Button,
  useDisclosure,
  Stack,
  Text,
  Avatar,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  MenuDivider,
  useColorModeValue,
  Container,
  Badge,
} from '@chakra-ui/react';
import {
  HamburgerIcon,
  CloseIcon,
  SearchIcon,
  BellIcon,
  ChevronDownIcon,
} from '@chakra-ui/icons';
import { FiShoppingCart, FiHeart, FiUser, FiSettings, FiLogOut } from 'react-icons/fi';

// NavLink Component
const NavLink = ({ to, children, isActive }) => (
  <Box
    as={Link}
    to={to}
    px={3}
    py={2}
    rounded={'md'}
    fontWeight={isActive ? 'bold' : 'medium'}
    color={isActive ? 'brand.600' : 'gray.600'}
    _hover={{
      bg: 'gray.100',
      color: 'brand.700',
      transform: 'translateY(-1px)',
    }}
    transition="all 0.2s"
    bg={isActive ? 'gray.100' : 'transparent'}
  >
    {children}
  </Box>
);

const Navbar = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const location = useLocation();
  const isActive = (path) => location.pathname === path;

  const [scrollDirection, setScrollDirection] = useState('up');
  const [lastScrollY, setLastScrollY] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      const currentY = window.scrollY;

      if (currentY > lastScrollY && currentY > 100) {
        setScrollDirection('down'); // Hide
      } else {
        setScrollDirection('up'); // Show
      }

      setLastScrollY(currentY);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [lastScrollY]);

  return (
    <Box
      position="sticky"
      top="0"
      zIndex="1000"
      transition="all 0.3s ease-in-out"
      transform={scrollDirection === 'down' ? 'translateY(-100%)' : 'translateY(0)'}
      bg="rgba(255,255,255,0.9)"
      backdropFilter="blur(10px)"
      borderBottom="1px solid #e2e8f0"
      shadow="sm"
    >
      <Container maxW="7xl">
        <Flex h={16} alignItems="center" justifyContent="space-between">
          {/* Mobile Toggle */}
          <IconButton
            size="md"
            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}
            aria-label="Toggle Menu"
            display={{ md: 'none' }}
            onClick={isOpen ? onClose : onOpen}
            variant="ghost"
          />

          {/* Logo */}
          <HStack spacing={4}>
            <Box as={Link} to="/" _hover={{ textDecoration: 'none' }} display="flex" alignItems="center">
              <Box
                w={10}
                h={10}
                bgGradient="linear(to-br, brand.400, brand.600)"
                borderRadius="lg"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Text color="white" fontWeight="bold" fontSize="md">VM</Text>
              </Box>
              <Text fontSize="lg" fontWeight="bold" color="gray.800" ml={2}>VirMar</Text>
            </Box>

            {/* Nav Links (Desktop) */}
            <HStack spacing={2} display={{ base: 'none', md: 'flex' }} ml={5}>
              <NavLink to="/" isActive={isActive('/')}>Home</NavLink>
              <NavLink to="/marketplace" isActive={isActive('/marketplace')}>Marketplace</NavLink>
              <NavLink to="/categories" isActive={isActive('/categories')}>Categories</NavLink>
              <NavLink to="/about" isActive={isActive('/about')}>About</NavLink>
              <NavLink to="/contact" isActive={isActive('/contact')}>Contact</NavLink>
            </HStack>
          </HStack>

          {/* Right Actions */}
          <Flex alignItems="center" gap={2}>
            {/* Icons */}
            <IconButton icon={<SearchIcon />} variant="ghost" aria-label="Search" />
            <IconButton icon={<FiHeart />} variant="ghost" aria-label="Wishlist" />
            <Box position="relative">
              <IconButton icon={<FiShoppingCart />} variant="ghost" aria-label="Cart" />
              <Badge position="absolute" top="-1" right="-1" colorScheme="red" borderRadius="full" fontSize="xs" px={2}>
                3
              </Badge>
            </Box>
            <Box position="relative">
              <IconButton icon={<BellIcon />} variant="ghost" aria-label="Notifications" />
              <Badge position="absolute" top="-1" right="-1" colorScheme="blue" borderRadius="full" fontSize="xs" px={2}>
                2
              </Badge>
            </Box>

            {/* Auth (Change to auth state later) */}
            <HStack spacing={2} display={{ base: 'none', md: 'flex' }}>
              <Button as={Link} to="/buyer/login" variant="ghost" size="sm">Sign In</Button>
              <Button as={Link} to="/buyer/register" size="sm" colorScheme="blue">Get Started</Button>
            </HStack>

            {/* Authenticated User Menu */}
            <Menu>
              <MenuButton
                as={Button}
                variant="link"
                cursor="pointer"
                minW={0}
                display="none" // Set to flex if user is authenticated
              >
                <HStack>
                  <Avatar size="sm" src="https://bit.ly/sage-adebayo" />
                  <ChevronDownIcon />
                </HStack>
              </MenuButton>
              <MenuList>
                <MenuItem icon={<FiUser />}>Profile</MenuItem>
                <MenuItem icon={<FiSettings />}>Settings</MenuItem>
                <MenuDivider />
                <MenuItem icon={<FiLogOut />}>Sign Out</MenuItem>
              </MenuList>
            </Menu>
          </Flex>
        </Flex>

        {/* Mobile Nav */}
        {isOpen && (
          <Box pb={4} display={{ md: 'none' }}>
            <Stack spacing={2}>
              <NavLink to="/" isActive={isActive('/')}>Home</NavLink>
              <NavLink to="/marketplace" isActive={isActive('/marketplace')}>Marketplace</NavLink>
              <NavLink to="/categories" isActive={isActive('/categories')}>Categories</NavLink>
              <NavLink to="/about" isActive={isActive('/about')}>About</NavLink>
              <NavLink to="/contact" isActive={isActive('/contact')}>Contact</NavLink>
              <Button as={Link} to="/buyer/login" variant="ghost" size="sm">Sign In</Button>
              <Button as={Link} to="/buyer/register" colorScheme="blue" size="sm">Get Started</Button>
            </Stack>
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default Navbar;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\Router.jsx (starts at line 5915)

import React from 'react';
import { Route, Routes } from 'react-router-dom';

// Core Components
import BuyerDashboard from '../public/done/BuyerDashboard';
import BuyerProfile from '../public/done/BuyerProfile';
import Wallet from './components/Wallet';
import ProductSearch from './components/ProductSearch';
import ProductDetailsPage from './components/marketplace/ProductDetailsPage';
import NotFoundPage from '../pages/NotFoundPage';

import BuyerAccount from './components/account/BuyerAccount'



// Wallet & Transactions
import DepositFunds from './components/DepositFunds';
import DepositSuccess from '../public/done/DepositSuccess';
import DepositFailure from '../public/done/DepositFailure';
import TransactionHistory from './components/TransactionHistory';

// Orders & Wishlist
import BuyerOrders from '../public/done/BuyerOrders';
import BuyerWishlist from '../public/done/BuyerWishlist';
import PurchaseHistoryPage from './pages/PurchaseHistoryPage';

// Search & Analytics
import AdvancedProductSearch from './components/AdvancedProductSearch';
import AnalyticsPage from './pages/AnalyticsPage';

// Buyer Help
import BuyerSupport from '../public/done/BuyerSupport';
import BuyerFAQ from '../public/done/BuyerFAQ';

// ✅ Escrow Components
// DONE
import EscrowFlow from './components/escrow/EscrowFlow';
import EscrowStatusCard from './components/escrow/EscrowStatusCard';
import EscrowExplanation from './components/escrow/EscrowExplanation';

// Marketplace Components (added at root paths)
//DONE
import ProductList from './components/marketplace/ProductList';
import ProductTable from './components/marketplace/ProductTable';
import ProductListTable from './components/marketplace/ProductListTable';

const BuyerRouter = () => {
  return (
    <Routes>
      <Route index element={<BuyerDashboard />} />
      <Route path="dashboard" element={<BuyerDashboard />} />
      <Route path="profile" element={<BuyerProfile />} />

      {/* 🏦 Wallet & Transactions */}
      <Route path="wallet" element={<Wallet />} />
      <Route path="wallet/deposit" element={<DepositFunds />} />
      <Route path="wallet/deposit-success" element={<DepositSuccess />} />
      <Route path="wallet/deposit-failure" element={<DepositFailure />} />
      <Route path="wallet/transactions" element={<TransactionHistory />} />

      {/* 📦 Orders & Wishlist */}
      <Route path="orders" element={<BuyerOrders />} />
      <Route path="wishlist" element={<BuyerWishlist />} />
      <Route path="history" element={<PurchaseHistoryPage />} />

      {/* 🧠 Analytics */}
      <Route path="analytics" element={<AnalyticsPage />} />

      <Route path="/buyer/account" element={<BuyerAccount />} />


      {/* 🔍 Product Search */}
      <Route path="search" element={<AdvancedProductSearch />} />
      <Route path="product/:id" element={<ProductDetailsPage />} />

      {/* Marketplace Routes (at root, not nested under /marketplace) */}
      <Route path="products-list" element={<ProductList />} />
      <Route path="products-table" element={<ProductTable />} />
      <Route path="products-list-table" element={<ProductListTable />} />

      {/* 📜 Escrow System */}
      <Route path="escrow" element={<EscrowFlow />} />
      <Route path="escrow/status/:orderId" element={<EscrowStatusCard />} />
      <Route path="escrow/explanation" element={<EscrowExplanation />} />

      {/* 📞 Support */}
      <Route path="support" element={<BuyerSupport />} />
      <Route path="faq" element={<BuyerFAQ />} />

      {/* ❌ Fallback */}
      <Route path="*" element={<NotFoundPage />} />
    </Routes>
  );
};

export default BuyerRouter;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\BuyerDashboard.jsx (starts at line 6012)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Spinner,
  Center,
  useToast,
} from '@chakra-ui/react';

// Import smaller components from ./dashboard/
import BuyerNavbar from './dashboard/BuyerNavbar';
import ProductTable from './dashboard/ProductTable';
import AssistantWidget from './dashboard/AssistantWidget';

const BuyerDashboard = () => {
  const [products, setProducts] = useState([]);
  const [buyer, setBuyer] = useState({ name: 'Camble 👋', walletBalance: 0 });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const toast = useToast();
  const [wishlist, setWishlist] = useState({});
  const [cartId, setCartId] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // Fetch products list from public API
        const productsRes = await fetch('http://localhost:5000/api/public/');
        const productsData = await productsRes.json();

        // Fetch buyer profile including wallet and cart info
        const buyerRes = await fetch('http://localhost:5000/api/buyer/profile', {
          credentials: 'include', // send cookies for authentication
        });
        const buyerData = await buyerRes.json();

        setProducts(productsData.product || []);
        setBuyer(buyerData.buyer || {});
        setCartId(buyerData.buyer?.cart || null);
      } catch (err) {
        console.error('Failed to load data:', err);
        setError('Failed to load data. Please try again.');
        toast({
          title: 'Error',
          description: 'Could not fetch buyer data or products.',
          status: 'error',
          duration: 4000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  const handleAddToCart = async (productId) => {
    if (!cartId) {
      toast({
        title: 'Cart not found.',
        description: 'Please refresh the page or try again later.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    try {
      // Send POST request to add product to cart
      const res = await fetch(
        `http://localhost:5000/api/buyer/cart/${cartId}/item`,
        {
          method: 'POST',
          credentials: 'include',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, quantity: 1 }),
        }
      );
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || 'Failed to add to cart');
      }

      toast({
        title: 'Item added to cart.',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error('Add to cart error:', error);
      toast({
        title: 'Failed to add to cart.',
        description: error.message,
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const toggleWishlist = (id) => {
    setWishlist((prev) => ({ ...prev, [id]: !prev[id] }));
  };

  return (
    <Box p={6}>
      <BuyerNavbar />
      <Heading size="lg" mb={4}>
        Welcome back,{' '}
        <Text as="span" color="teal.500">
          {buyer.name || 'Buyer'}!
        </Text>
      </Heading>

      <Text fontSize="md" mb={6}>
        Wallet Balance:{' '}
        <Text as="span" color="green.500" fontWeight="bold">
          { buyer.walletBalance ? `frw${buyer.walletBalance} RWF` : 'N/A'}
        </Text>
      </Text>

      {loading ? (
        <Center mt={10}>
          <Spinner size="xl" thickness="4px" color="teal.400" />
        </Center>
      ) : error ? (
        <Center color="red.500">{error}</Center>
      ) : (
        <ProductTable
          products={products}
          wishlist={wishlist}
          toggleWishlist={toggleWishlist}
          handleAddToCart={handleAddToCart}
        />
      )}

      <AssistantWidget />
    </Box>
  );
};

export default BuyerDashboard;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\Wallet.jsx (starts at line 6160)

// src/buyer/components/Wallet.jsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Button,
  VStack,
  Spinner,
  Center,
  Alert,
  AlertIcon,
  HStack,
  Icon,
} from '@chakra-ui/react';
import { FaWallet, FaPlusCircle, FaCog, FaArrowUp } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const Wallet = () => {
  const [balance, setBalance] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchBalance = async () => {
      try {
        const res = await axios.get('/api/buyer/wallet');
        setBalance(res.data.balance);
      } catch (err) {
        setError('Could not fetch wallet balance.');
      } finally {
        setLoading(false);
      }
    };

    fetchBalance();
  }, []);

  if (loading) {
    return (
      <Center minH="50vh">
        <Spinner size="lg" color="blue.500" />
      </Center>
    );
  }

  if (error) {
    return (
      <Center mt={10}>
        <Alert status="error" maxW="md">
          <AlertIcon />
          {error}
        </Alert>
      </Center>
    );
  }

  return (
    <Box maxW="md" mx="auto" p={6} bg="white" rounded="lg" shadow="md">
      <VStack spacing={5} align="stretch">
        <HStack justify="center">
          <Icon as={FaWallet} boxSize={10} color="blue.500" />
          <Heading size="lg">My Wallet</Heading>
        </HStack>

        <Box textAlign="center">
          <Text fontSize="xl">Available Balance</Text>
          <Text fontSize="3xl" fontWeight="bold" color="green.500">
            ${balance?.toFixed(2)}
          </Text>
        </Box>

        <VStack spacing={3}>
          <Button
            leftIcon={<FaPlusCircle />}
            colorScheme="green"
            width="100%"
            onClick={() => navigate('/wallet/deposit')}
          >
            Deposit Funds
          </Button>

          <Button
            leftIcon={<FaArrowUp />}
            colorScheme="blue"
            variant="outline"
            width="100%"
            onClick={() => navigate('/wallet/transactions')}
          >
            View Transactions
          </Button>

          <Button
            leftIcon={<FaCog />}
            colorScheme="gray"
            variant="ghost"
            width="100%"
            onClick={() => navigate('/account/settings')}
          >
            Wallet Settings
          </Button>
        </VStack>
      </VStack>
    </Box>
  );
};

export default Wallet;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerAccount.jsx (starts at line 6271)

// src/buyer/components/account/BuyerAccount.jsx
import React from 'react';
import { Tabs, TabList, TabPanels, Tab, TabPanel } from '@chakra-ui/react';
import { Box, Heading } from '@chakra-ui/react';
import Wallet from './Wallet';
import DepositSuccess from './DepositSuccess';
import DepositFailure from './DepositFailure';

const BuyerAccount = () => {
  return (
    <Box maxW="6xl" mx="auto" p={6}>
      <Heading as="h2" size="lg" mb={6}>
        My Account
      </Heading>
      <Tabs variant="soft-rounded" colorScheme="teal" isFitted>
        <TabList mb="1em">
          <Tab>Wallet</Tab>
          <Tab>Deposit Success</Tab>
          <Tab>Deposit Failure</Tab>
        </TabList>

        <TabPanels>
          <TabPanel>
            <Wallet />
          </TabPanel>
          <TabPanel>
            <DepositSuccess />
          </TabPanel>
          <TabPanel>
            <DepositFailure />
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default BuyerAccount;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerOrders.jsx (starts at line 6310)

import React, { useState, useEffect } from 'react';
import {
  Box,
  Heading,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  Button,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  useDisclosure,
  Text,
  VStack,
  Spinner,
  useToast,
  useBreakpointValue,
} from '@chakra-ui/react';
import axios from 'axios';

const statusColor = {
  Pending: 'yellow',
  Shipped: 'blue',
  Delivered: 'green',
  Cancelled: 'red',
};

const OrderDetailsModal = ({ isOpen, onClose, order }) => {
  if (!order) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="lg" scrollBehavior="inside" isCentered>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Order Details</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Box>
            <Text><strong>Order ID:</strong> {order.id}</Text>
            <Text><strong>Date:</strong> {new Date(order.date).toLocaleString()}</Text>
            <Text>
              <strong>Status:</strong>{' '}
              <Badge colorScheme={statusColor[order.status] || 'gray'}>{order.status}</Badge>
            </Text>
            <Text><strong>Payment Method:</strong> {order.paymentMethod}</Text>
            <Text><strong>Shipping Address:</strong> {order.shippingAddress}</Text>

            <Heading size="sm" mt={4} mb={2}>Items</Heading>
            <VStack align="start" spacing={2}>
              {order.items.map((item, i) => (
                <Box
                  key={i}
                  p={2}
                  borderWidth="1px"
                  borderRadius="md"
                  w="100%"
                  bg="gray.50"
                >
                  <Text>
                    {item.name} - Qty: {item.qty} - Price: {item.price.toLocaleString()} RWF
                  </Text>
                </Box>
              ))}
            </VStack>
            <Text mt={4} fontWeight="bold">
              Total: {order.total.toLocaleString()} RWF
            </Text>
          </Box>
        </ModalBody>
        <ModalFooter>
          <Button onClick={onClose}>Close</Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

const OrderRow = ({ order, onViewDetails, onCancel }) => {
  return (
    <Tr>
      <Td>{order.id}</Td>
      <Td>{new Date(order.date).toLocaleDateString()}</Td>
      <Td>
        <Badge colorScheme={statusColor[order.status] || 'gray'}>{order.status}</Badge>
      </Td>
      <Td isNumeric>{order.total.toLocaleString()}</Td>
      <Td>
        <Button size="sm" mr={2} onClick={() => onViewDetails(order)}>
          View Details
        </Button>
        {order.status === 'Pending' && (
          <Button size="sm" colorScheme="red" onClick={() => onCancel(order.id)}>
            Cancel
          </Button>
        )}
      </Td>
    </Tr>
  );
};

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';

const BuyerOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedOrder, setSelectedOrder] = useState(null);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();
  const isMobile = useBreakpointValue({ base: true, md: false });

  useEffect(() => {
    const fetchOrders = async () => {
      setLoading(true);
      try {
        const res = await axios.get(`${BACKEND_URL}/api/buyer/orders`, {
          withCredentials: true,
        });
        setOrders(res.data.orders || []);
      } catch (err) {
        setError(err.response?.data?.message || err.message || 'Failed to load orders');
        toast({
          title: 'Error loading orders',
          description: err.response?.data?.message || err.message,
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, [toast]);

  const openOrderDetails = (order) => {
    setSelectedOrder(order);
    onOpen();
  };

  const handleCancelOrder = async (orderId) => {
    try {
      // Your backend expects PATCH /api/buyer/order/:orderId/cancel
      await axios.patch(
        `${BACKEND_URL}/api/buyer/order/${orderId}/cancel`,
        {},
        { withCredentials: true }
      );
      setOrders((prev) =>
        prev.map((order) =>
          order.id === orderId ? { ...order, status: 'Cancelled' } : order
        )
      );
      toast({
        title: 'Order cancelled',
        description: `Order ${orderId} has been cancelled.`,
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: 'Failed to cancel order',
        description: err.response?.data?.message || err.message || 'Try again later',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  if (loading)
    return (
      <Spinner size="xl" mx="auto" mt={20} display="block" />
    );

  if (error)
    return (
      <Box maxW="900px" mx="auto" mt={10} p={6}>
        <Text color="red.500">{error}</Text>
      </Box>
    );

  return (
    <Box maxW="900px" mx="auto" mt={10} p={6} overflowX={isMobile ? 'auto' : 'visible'}>
      <Heading mb={6}>My Orders</Heading>
      {orders.length === 0 ? (
        <Text>No orders found.</Text>
      ) : (
        <Table variant="simple" size="md" minWidth="600px">
          <Thead>
            <Tr>
              <Th>Order ID</Th>
              <Th>Date</Th>
              <Th>Status</Th>
              <Th isNumeric>Total (RWF)</Th>
              <Th>Actions</Th>
            </Tr>
          </Thead>
          <Tbody>
            {orders.map((order) => (
              <OrderRow
                key={order.id}
                order={order}
                onViewDetails={openOrderDetails}
                onCancel={handleCancelOrder}
              />
            ))}
          </Tbody>
        </Table>
      )}

      <OrderDetailsModal isOpen={isOpen} onClose={onClose} order={selectedOrder} />
    </Box>
  );
};

export default BuyerOrders;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerProfile.jsx (starts at line 6537)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  Stack,
  Avatar,
  Button,
  useToast,
  Spinner,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  Input,
  ModalFooter,
} from '@chakra-ui/react';
import axios from 'axios';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';

const BuyerProfile = () => {
  const [buyer, setBuyer] = useState(null);
  const [loading, setLoading] = useState(true);
  const toast = useToast();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [newLocation, setNewLocation] = useState('');

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await axios.get(`${BACKEND_URL}/api/buyer/profile`, {
          withCredentials: true,
        });
        setBuyer(res.data);
      } catch (err) {
        toast({
          title: 'Failed to fetch profile',
          description: err.response?.data?.message || 'Server error',
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };
    fetchProfile();
  }, [toast]);

  const handleLocationUpdate = async () => {
    try {
      const res = await axios.put(
        `${BACKEND_URL}/api/buyer/profile/location`,
        { location: newLocation },
        { withCredentials: true }
      );
      setBuyer((prev) => ({ ...prev, location: res.data.location }));
      toast({
        title: 'Location updated successfully',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
      onClose();
      setNewLocation('');
    } catch (err) {
      toast({
        title: 'Failed to update location',
        description: err.response?.data?.message || 'Try again later',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  if (loading) return <Spinner size="xl" mx="auto" mt={20} display="block" />;

  if (!buyer)
    return (
      <Box mt={10} textAlign="center">
        <Text color="gray.500">Profile data not available</Text>
      </Box>
    );

  return (
    <Box maxW="600px" mx="auto" mt={10} p={6}>
      <Heading mb={4}>My Profile</Heading>
      <Stack spacing={4}>
        <Avatar name={buyer.name} size="xl" />
        <Box>
          <Text fontWeight="bold">Name:</Text>
          <Text>{buyer.name}</Text>
        </Box>
        <Box>
          <Text fontWeight="bold">Email:</Text>
          <Text>{buyer.email}</Text>
        </Box>
        <Box>
          <Text fontWeight="bold">Location:</Text>
          <Text>{buyer.location || 'Not set'}</Text>
        </Box>
        <Button onClick={onOpen} colorScheme="blue" w="fit-content">
          Update Location
        </Button>
      </Stack>

      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Update Location</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Input
              placeholder="Enter new location"
              value={newLocation}
              onChange={(e) => setNewLocation(e.target.value)}
            />
          </ModalBody>
          <ModalFooter>
            <Button
              colorScheme="blue"
              mr={3}
              onClick={handleLocationUpdate}
              isDisabled={!newLocation.trim()}
            >
              Save
            </Button>
            <Button onClick={onClose} variant="ghost">
              Cancel
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default BuyerProfile;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\BuyerWishlist.jsx (starts at line 6681)

import React, { useState, useEffect } from 'react';
import {
  Box,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Badge,
  useToast,
  Spinner,
  useBreakpointValue,
} from '@chakra-ui/react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';

const WishlistItem = ({ item, onRemove }) => (
  <Box
    p={4}
    borderWidth="1px"
    borderRadius="md"
    display="flex"
    justifyContent="space-between"
    alignItems="center"
  >
    <Box>
      <Link to={`/buyer/product/${item.productId}`}>
        <Text fontWeight="bold">{item.name}</Text>
      </Link>
      <Text fontSize="sm" color="gray.600">
        Seller: {item.seller} | Category: {item.category}
      </Text>
    </Box>
    <HStack spacing={6} align="center">
      <Badge colorScheme="green" fontSize="sm">
        RWF {item.price.toLocaleString()}
      </Badge>
      <Button size="sm" colorScheme="red" onClick={() => onRemove(item.productId)}>
        Remove
      </Button>
    </HStack>
  </Box>
);

const BuyerWishlist = () => {
  const [wishlist, setWishlist] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const toast = useToast();
  const isMobile = useBreakpointValue({ base: true, md: false });

  useEffect(() => {
    const fetchWishlist = async () => {
      setLoading(true);
      try {
        const res = await axios.get(`${BACKEND_URL}/api/buyer/wishlist`, {
          withCredentials: true,
        });
        setWishlist(res.data.wishlist || []);
      } catch (err) {
        setError(err.response?.data?.message || err.message || 'Failed to load wishlist');
        toast({
          title: 'Error loading wishlist',
          description: err.response?.data?.message || err.message,
          status: 'error',
          duration: 5000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };
    fetchWishlist();
  }, [toast]);

  const removeFromWishlist = async (productId) => {
    try {
      await axios.delete(`${BACKEND_URL}/api/buyer/wishlist/${productId}`, {
        withCredentials: true,
      });
      setWishlist((prev) => prev.filter((item) => item.productId !== productId));
      toast({
        title: 'Removed from wishlist',
        status: 'info',
        duration: 2000,
        isClosable: true,
      });
    } catch (err) {
      toast({
        title: 'Failed to remove item',
        description: err.response?.data?.message || err.message || 'Try again later',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  if (loading)
    return <Spinner size="xl" mx="auto" mt={20} display="block" />;

  if (error)
    return (
      <Box maxW="600px" mx="auto" mt={10} p={6}>
        <Text color="red.500">{error}</Text>
      </Box>
    );

  if (wishlist.length === 0)
    return (
      <Box maxW="600px" mx="auto" mt={10} p={6} textAlign="center">
        <Heading size="md" mb={4}>
          Your wishlist is empty
        </Heading>
        <Text>Start adding your favorite products!</Text>
      </Box>
    );

  return (
    <Box maxW="700px" mx="auto" mt={10} p={6} overflowX={isMobile ? 'auto' : 'visible'}>
      <Heading mb={6}>My Wishlist</Heading>
      <VStack spacing={4} align="stretch">
        {wishlist.map((item) => (
          <WishlistItem key={item.productId} item={item} onRemove={removeFromWishlist} />
        ))}
      </VStack>
    </Box>
  );
};

export default BuyerWishlist;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\DepositFailure.jsx (starts at line 6815)

// src/buyer/components/DepositFailure.jsx
import React from 'react';
import { Box, Heading, Text, Button, Icon } from '@chakra-ui/react';
import { WarningIcon } from '@chakra-ui/icons';
import { useNavigate } from 'react-router-dom';

const DepositFailure = () => {
  const navigate = useNavigate();

  return (
    <Box textAlign="center" py={10} px={6}>
      <Icon as={WarningIcon} w={20} h={20} color="red.400" />
      <Heading as="h2" size="xl" mt={6} mb={2}>
        Deposit Failed
      </Heading>
      <Text color={'gray.500'}>
        There was an issue processing your deposit. Please try again or contact support.
      </Text>
      <Button mt={6} colorScheme="red" onClick={() => navigate('/buyer/wallet')}>
        Back to Wallet
      </Button>
    </Box>
  );
};

export default DepositFailure;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\DepositSuccess.jsx (starts at line 6842)

// src/buyer/components/DepositSuccess.jsx
import React from 'react';
import { Box, Heading, Text, Button, Icon } from '@chakra-ui/react';
import { CheckCircleIcon } from '@chakra-ui/icons';
import { useNavigate } from 'react-router-dom';

const DepositSuccess = () => {
  const navigate = useNavigate();

  return (
    <Box textAlign="center" py={10} px={6}>
      <Icon as={CheckCircleIcon} w={20} h={20} color="green.400" />
      <Heading as="h2" size="xl" mt={6} mb={2}>
        Deposit Successful!
      </Heading>
      <Text color={'gray.500'}>
        Your funds have been added to your wallet. You can now start shopping!
      </Text>
      <Button mt={6} colorScheme="green" onClick={() => navigate('/buyer/dashboard')}>
        Go to Dashboard
      </Button>
    </Box>
  );
};

export default DepositSuccess;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\TransactionHistory.jsx (starts at line 6869)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Spinner,
  Text,
} from '@chakra-ui/react';
import axios from 'axios';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';

const TransactionHistory = () => {
  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const { data } = await axios.get(`${BACKEND_URL}/api/buyer/transactions`, {
          withCredentials: true,
        });
        setTransactions(data.transactions || []);
      } catch (error) {
        console.error('Failed to fetch transactions:', error);
        setTransactions([]);
      } finally {
        setLoading(false);
      }
    };

    fetchTransactions();
  }, []);

  return (
    <Box p={6}>
      <Heading size="lg" mb={4}>Transaction History</Heading>
      {loading ? (
        <Spinner size="lg" />
      ) : transactions.length === 0 ? (
        <Text>No transactions found.</Text>
      ) : (
        <Table variant="striped" colorScheme="gray">
          <Thead>
            <Tr>
              <Th>ID</Th>
              <Th>Date</Th>
              <Th>Amount</Th>
              <Th>Type</Th>
              <Th>Status</Th>
            </Tr>
          </Thead>
          <Tbody>
            {transactions.map((txn) => (
              <Tr key={txn._id}>
                <Td>{txn._id}</Td>
                <Td>{new Date(txn.date).toLocaleString()}</Td>
                <Td>RWF {txn.amount.toLocaleString()}</Td>
                <Td>{txn.type}</Td>
                <Td>{txn.status}</Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      )}
    </Box>
  );
};

export default TransactionHistory;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\account\Wallet.jsx (starts at line 6945)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  VStack,
  HStack,
  Text,
  Button,
  Spinner,
  useToast,
} from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:5000';

const Wallet = () => {
  const [balance, setBalance] = useState(null);
  const [loading, setLoading] = useState(true);
  const toast = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const fetchWallet = async () => {
      try {
        const res = await axios.get(`${BACKEND_URL}/api/buyer/wallet`, {
          withCredentials: true,
        });
        setBalance(res.data.balance);
      } catch (error) {
        console.error('Failed to fetch wallet:', error);
        toast({
          title: 'Error',
          description: 'Could not load wallet information.',
          status: 'error',
          duration: 4000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };

    fetchWallet();
  }, [toast]);

  return (
    <Box p={6}>
      <VStack spacing={6} align="start">
        <Heading size="lg">My Wallet</Heading>

        {loading ? (
          <Spinner />
        ) : (
          <Text fontSize="md">
            Your current balance: <strong>RWF {balance?.toLocaleString()}</strong>
          </Text>
        )}

        <HStack spacing={4}>
          <Button colorScheme="blue" onClick={() => navigate('/buyer/wallet/deposit')}>
            Deposit Funds
          </Button>

          <Button colorScheme="green" onClick={() => navigate('/buyer/wallet/withdraw')}>
            Withdraw Funds
          </Button>

          <Button
            variant="outline"
            colorScheme="gray"
            onClick={() => navigate('/buyer/wallet/transactions')}
          >
            View Transactions
          </Button>
        </HStack>

        <Button
          variant="ghost"
          colorScheme="purple"
          onClick={() => navigate('/buyer/wallet/settings')}
        >
          Update Wallet Settings
        </Button>
      </VStack>
    </Box>
  );
};

export default Wallet;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\dashboard\AssistantWidget.jsx (starts at line 7036)

import React from 'react';
import { Box, Text } from '@chakra-ui/react';

const AssistantWidget = () => {
  return (
    <Box
      position="fixed"
      bottom={6}
      right={6}
      p={4}
      bg="teal.100"
      borderRadius="md"
      boxShadow="md"
      maxWidth="300px"
    >
      <Text fontWeight="bold" mb={2}>
        Virtual Assistant
      </Text>
      <Text fontSize="sm">How can I help you today?</Text>
    </Box>
  );
};

export default AssistantWidget;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\dashboard\BuyerNavbar.jsx (starts at line 7061)

import React from 'react';
import { Box, Flex, Link, Spacer, Avatar, Text } from '@chakra-ui/react';
import { Link as RouterLink } from 'react-router-dom';

const navLinks = [
  { name: 'Dashboard', to: '/buyer/dashboard' },
  { name: 'Orders', to: '/buyer/orders' },
  { name: 'Escrow Flow', to: '/buyer/escrow-flow' },
  { name: 'Escrow Help', to: '/buyer/escrow-help' },
  { name: 'Wishlist', to: '/buyer/wishlist' },
  { name: 'Wallet', to: '/buyer/wallet' },
  { name: 'Profile', to: '/buyer/profile' },
];

const BuyerNavbar = () => {
  return (
    <Box bg="blue.600" color="white" px={6} py={3} boxShadow="md">
      <Flex align="center">
        <Text fontSize="xl" fontWeight="bold">
          VirMar Buyer
        </Text>
        <Spacer />
        <Flex gap={4}>
          {navLinks.map((link) => (
            <Link
              key={link.to}
              as={RouterLink}
              to={link.to}
              _hover={{ textDecoration: 'underline' }}
              fontWeight="medium"
            >
              {link.name}
            </Link>
          ))}
        </Flex>
        <Spacer />
        <Avatar size="sm" name="Buyer" />
      </Flex>
    </Box>
  );
};

export default BuyerNavbar;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\dashboard\ProductTable.jsx (starts at line 7105)

import React from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Avatar,
  Badge,
  HStack,
  Text,
  Button,
  Checkbox,
} from '@chakra-ui/react';
import { StarIcon } from '@chakra-ui/icons';

const ProductTable = ({ products, wishlist, toggleWishlist, handleAddToCart }) => {
  return (
    <Box overflowX="auto" borderRadius="lg" boxShadow="md">
      <Table variant="simple">
        <Thead bg="gray.100">
          <Tr>
            <Th>Image</Th>
            <Th>Name</Th>
            <Th>Seller</Th>
            <Th>Reserved Price (frw)</Th>
            <Th>Rating</Th>
            <Th>Status</Th>
            <Th>Wishlist</Th>
            <Th>Actions</Th>
          </Tr>
        </Thead>
        <Tbody>
          {products.map((product) => {
            const price = product.price || {};
            const reservedPrice = price?.reservedPrice ?? 'N/A';

            return (
              <Tr key={product._id} _hover={{ bg: 'gray.50', cursor: 'pointer' }}>
                <Td>
                  <Avatar
                    size="md"
                    src={product.imageUrl || `https://via.placeholder.com/100?text=Product`}
                    name={product.name}
                    borderRadius="md"
                  />
                </Td>
                <Td fontWeight="medium">{product.name}</Td>
                <Td>
                  <Text color="blue.600" fontWeight="medium">
                    {product.seller_id?.name || 'Unknown'}
                  </Text>
                </Td>
                <Td>
                  <Text color="teal.600" fontWeight="bold">
                    {reservedPrice}
                  </Text>
                </Td>
                <Td>
                  <HStack spacing={1}>
                    {Array(5)
                      .fill('')
                      .map((_, i) => (
                        <StarIcon
                          key={i}
                          color={i < (product.rating || 0) ? 'yellow.400' : 'gray.300'}
                        />
                      ))}
                  </HStack>
                </Td>
                <Td>
                  <Badge colorScheme={product.status === 'available' ? 'green' : 'gray'}>
                    {product.status || 'Unknown'}
                  </Badge>
                </Td>
                <Td>
                  <Checkbox
                    isChecked={wishlist[product._id] || false}
                    onChange={() => toggleWishlist(product._id)}
                    colorScheme="purple"
                  >
                    Save
                  </Checkbox>
                </Td>
                <Td>
                  <Button
                    size="sm"
                    colorScheme="blue"
                    onClick={() => handleAddToCart(product._id)}
                  >
                    Add to Cart
                  </Button>
                </Td>
              </Tr>
            );
          })}
        </Tbody>
      </Table>
    </Box>
  );
};

export default ProductTable;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowExplanation.jsx (starts at line 7211)

// src/buyer/components/escrow/EscrowExplanation.jsx
import React from 'react';
import {
  Box,
  Text,
  Heading,
  VStack,
  Icon,
  useColorModeValue,
  Stack,
  Flex,
} from '@chakra-ui/react';
import { LockIcon, CheckCircleIcon } from '@chakra-ui/icons';
import { FaShieldAlt } from 'react-icons/fa';

const EscrowExplanation = () => {
  const cardBg = useColorModeValue('white', 'gray.800');
  const iconColor = useColorModeValue('blue.500', 'blue.300');

  return (
    <Flex justify="center" align="center" minH="80vh" px={4}>
      <Box
        p={6}
        borderWidth="1px"
        borderRadius="xl"
        boxShadow="lg"
        bg={cardBg}
        maxW="lg"
        textAlign="center"
      >
        <VStack spacing={5}>
          <Icon as={FaShieldAlt} boxSize={12} color={iconColor} />
          <Heading size="lg">How Escrow Protects Your Purchase</Heading>

          <Stack spacing={3} fontSize="md">
            <Text>
              <Icon as={LockIcon} color="blue.400" mr={2} />
              Your payment is securely held in escrow when you place an order.
            </Text>

            <Text>
              <Icon as={CheckCircleIcon} color="green.400" mr={2} />
              The seller only receives funds after you confirm delivery and satisfaction.
            </Text>

            <Text>
              This ensures fairness, transparency, and trust for both parties.
            </Text>
          </Stack>
        </VStack>
      </Box>
    </Flex>
  );
};

export default EscrowExplanation;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowFlow.jsx (starts at line 7268)

// src/buyer/components/escrow/EscrowFlow.jsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  VStack,
  HStack,
  Text,
  Icon,
  useColorModeValue,
  Divider,
  Spinner,
  Center,
  Alert,
  AlertIcon,
} from '@chakra-ui/react';
import { LockIcon, TimeIcon, CheckCircleIcon } from '@chakra-ui/icons';
import { FaTruck } from 'react-icons/fa';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const steps = [
  { label: 'Payment Held', icon: LockIcon },
  { label: 'Order Shipped', icon: FaTruck },
  { label: 'Delivery Confirmed', icon: CheckCircleIcon },
  { label: 'Funds Released', icon: TimeIcon },
];

const EscrowFlow = () => {
  const { orderId } = useParams();
  const [activeStep, setActiveStep] = useState(0);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const iconColor = useColorModeValue('blue.500', 'blue.300');

  useEffect(() => {
    const fetchOrderStatus = async () => {
      try {
        const response = await axios.get(`/api/buyer/orders/${orderId}`);
        const { status, transactionStatus } = response.data.order;

        let stepIndex = 0;

        if (transactionStatus === 'held') stepIndex = 0;
        if (status === 'shipped') stepIndex = 1;
        if (status === 'delivered') stepIndex = 2;
        if (transactionStatus === 'released') stepIndex = 3;

        setActiveStep(stepIndex);
      } catch (err) {
        setError('Failed to load escrow flow. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchOrderStatus();
  }, [orderId]);

  if (loading) {
    return (
      <Center mt={10}>
        <Spinner size="lg" color="blue.500" />
      </Center>
    );
  }

  if (error) {
    return (
      <Center mt={10}>
        <Alert status="error" maxW="lg">
          <AlertIcon />
          {error}
        </Alert>
      </Center>
    );
  }

  return (
    <Box p={5} maxW="lg" mx="auto" bg="white" borderRadius="xl" boxShadow="md">
      <VStack spacing={6}>
        {steps.map((step, index) => (
          <React.Fragment key={index}>
            <HStack spacing={4}>
              <Icon
                as={step.icon}
                color={index === activeStep ? 'green.500' : iconColor}
                boxSize={6}
              />
              <Text fontWeight={index === activeStep ? 'bold' : 'medium'}>
                {step.label}
              </Text>
            </HStack>
            {index < steps.length - 1 && <Divider />}
          </React.Fragment>
        ))}
      </VStack>
    </Box>
  );
};

export default EscrowFlow;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\escrow\EscrowStatusCard.jsx (starts at line 7371)

// src/buyer/components/escrow/EscrowStatusCard.jsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Text,
  Badge,
  Spinner,
  Center,
  Alert,
  AlertIcon,
} from '@chakra-ui/react';
import { useParams } from 'react-router-dom';
import axios from 'axios';

const EscrowStatusCard = () => {
  const { orderId } = useParams();
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const escrowColor = {
    held: 'yellow',
    released: 'green',
    cancelled: 'red',
    completed: 'blue',
    pending: 'gray',
  };

  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const response = await axios.get(`/api/buyer/orders/${orderId}`);
        setOrder(response.data.order);
      } catch (err) {
        setError('Failed to fetch escrow details. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchOrder();
  }, [orderId]);

  if (loading) {
    return (
      <Center mt={10}>
        <Spinner size="lg" color="blue.500" />
      </Center>
    );
  }

  if (error || !order) {
    return (
      <Center mt={10}>
        <Alert status="error" maxW="lg">
          <AlertIcon />
          {error || 'Escrow data not found.'}
        </Alert>
      </Center>
    );
  }

  const { _id, status, totalAmount, transactionStatus } = order;

  return (
    <Box p={5} shadow="md" borderWidth="1px" rounded="md" maxW="lg" mx="auto" bg="white">
      <Text fontSize="lg" fontWeight="bold" mb={2}>
        Order ID: {_id}
      </Text>
      <Text>Total: ${totalAmount}</Text>
      <Text>
        Order Status: <Badge colorScheme="blue" ml={1}>{status}</Badge>
      </Text>
      <Text>
        Escrow Status:{' '}
        <Badge colorScheme={escrowColor[transactionStatus]} ml={1}>
          {transactionStatus?.toUpperCase()}
        </Badge>
      </Text>
    </Box>
  );
};

export default EscrowStatusCard;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductCard.jsx (starts at line 7456)

import React, { useState } from 'react';
import {
  Box,
  Image,
  Text,
  Badge,
  Button,
  HStack,
  Checkbox,
  useToast,
  Tooltip,
} from '@chakra-ui/react';
import { StarIcon } from '@chakra-ui/icons';

const ProductCard = ({ product, onAddToCart }) => {
  const toast = useToast();
  const [isWishlisted, setIsWishlisted] = useState(false);
  const [loadingCart, setLoadingCart] = useState(false);

  const toggleWishlist = () => {
    // Ideally call backend to update wishlist here
    setIsWishlisted((prev) => !prev);
    toast({
      title: isWishlisted ? 'Removed from wishlist' : 'Added to wishlist',
      status: isWishlisted ? 'info' : 'success',
      duration: 2000,
      isClosable: true,
    });
  };

  const handleAddToCart = async () => {
    if (loadingCart) return;
    setLoadingCart(true);
    try {
      await onAddToCart(product._id);
      toast({
        title: 'Added to cart',
        status: 'success',
        duration: 2000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Failed to add to cart',
        description: error.response?.data?.message || 'Please try again later.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoadingCart(false);
    }
  };

  return (
    <Box
      borderWidth="1px"
      borderRadius="md"
      overflow="hidden"
      boxShadow="sm"
      _hover={{ boxShadow: 'md' }}
      maxW="280px"
      p={4}
      role="group"
    >
      <Tooltip label={product.name}>
        <Image
          src={product.imageUrl || 'https://via.placeholder.com/280?text=No+Image'}
          alt={product.name}
          objectFit="cover"
          height="160px"
          width="100%"
          borderRadius="md"
          mb={3}
        />
      </Tooltip>

      <Text fontWeight="bold" fontSize="lg" mb={1} noOfLines={1}>
        {product.name}
      </Text>

      <Text fontSize="sm" color="gray.600" mb={1} noOfLines={1}>
        Seller: {product.seller_id?.name || 'Unknown'}
      </Text>

      <Badge colorScheme={product.status === 'available' ? 'green' : 'gray'} mb={2}>
        {product.status || 'Unknown'}
      </Badge>

      <HStack spacing={1} mb={3} aria-label={`Rating: ${product.rating || 0} out of 5`}>
        {[...Array(5)].map((_, i) => (
          <StarIcon
            key={i}
            color={i < (product.rating || 0) ? 'yellow.400' : 'gray.300'}
            boxSize={4}
          />
        ))}
      </HStack>

      <Text fontWeight="bold" fontSize="xl" mb={3}>
        {product.price?.reservedPrice
          ? `frw${product.price.reservedPrice.toLocaleString()}`
          : 'N/A'}
      </Text>

      <HStack justify="space-between">
        <Checkbox
          isChecked={isWishlisted}
          onChange={toggleWishlist}
          colorScheme="purple"
          size="md"
          aria-label="Toggle wishlist"
        >
          Wishlist
        </Checkbox>

        <Button
          colorScheme="blue"
          size="sm"
          onClick={handleAddToCart}
          isLoading={loadingCart}
          aria-label="Add to cart"
          isDisabled={product.status !== 'available'}
        >
          Add to Cart
        </Button>
      </HStack>
    </Box>
  );
};

export default ProductCard;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductDetailModal.jsx (starts at line 7589)

import React, { useState } from 'react';
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  ModalFooter,
  Button,
  Text,
  Box,
  Badge,
  VStack,
  HStack,
  Image,
  useToast,
} from '@chakra-ui/react';
import RatingStars from './RatingStars';

const statusColorScheme = {
  available: 'green',
  unavailable: 'red',
  pending: 'yellow',
};

const ProductDetailsModal = ({ product, isOpen, onClose, onAddToCart }) => {
  const toast = useToast();
  const [loading, setLoading] = useState(false);

  if (!product) return null;

  const handleAddToCart = async () => {
    setLoading(true);
    try {
      await onAddToCart(product._id);
      toast({
        title: 'Added to cart',
        description: `${product.name} added to your cart.`,
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
      onClose();
    } catch (error) {
      toast({
        title: 'Failed to add to cart',
        description: error.response?.data?.message || 'Try again later.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="lg" isCentered scrollBehavior="inside">
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>{product.name}</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Box mb={4} textAlign="center">
            <Image
              src={product.imageUrl || 'https://via.placeholder.com/300?text=No+Image'}
              alt={product.name}
              maxH="300px"
              mx="auto"
              borderRadius="md"
              objectFit="contain"
            />
          </Box>

          <HStack justifyContent="space-between" mb={3}>
            <Text fontWeight="bold">Seller: {product.seller_id?.name || 'Unknown'}</Text>
            <Badge colorScheme={statusColorScheme[product.status] || 'gray'}>
              {product.status || 'Unknown'}
            </Badge>
          </HStack>

          <Text mb={3}>{product.description || 'No description available.'}</Text>

          <Text fontSize="lg" fontWeight="bold" mb={3}>
            Reserved Price: {product.price?.reservedPrice?.toLocaleString() || 'N/A'} RWF
          </Text>

          <VStack align="start" spacing={1} mb={4}>
            <Text>Rating:</Text>
            <RatingStars rating={product.rating || 0} />
          </VStack>

          {product.category && <Text mb={2}>Category: {product.category}</Text>}
          {product.stock !== undefined && <Text mb={2}>Stock: {product.stock}</Text>}
        </ModalBody>

        <ModalFooter>
          <Button variant="ghost" mr={3} onClick={onClose}>
            Close
          </Button>
          <Button
            colorScheme="blue"
            onClick={handleAddToCart}
            isLoading={loading}
            loadingText="Adding..."
            isDisabled={product.status !== 'available'}
          >
            Add to Cart
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default ProductDetailsModal;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductList.jsx (starts at line 7707)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  Button,
  Spinner,
  Center,
  Text,
  HStack,
  useToast,
} from '@chakra-ui/react';
import axios from 'axios';
import { StarIcon } from '@chakra-ui/icons';
import ProductCard from './ProductCard';

const statusColor = {
  available: 'green',
  unavailable: 'red',
  pending: 'yellow',
};

const ProductList = () => {
  const [products, setProducts] = useState([]);
  const [wishlist, setWishlist] = useState([]); // store productIds in wishlist
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [cartId, setCartId] = useState(null);
  const toast = useToast();

  // Fetch products, buyer profile (for cart), and wishlist on mount
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const [productsRes, buyerRes, wishlistRes] = await Promise.all([
          axios.get('http://localhost:5000/api/public/products'),
          axios.get('http://localhost:5000/api/buyer/profile', { withCredentials: true }),
          axios.get('http://localhost:5000/api/buyer/wishlist', { withCredentials: true }),
        ]);

        setProducts(productsRes.data.products || []);
        setCartId(buyerRes.data.buyer?.cart || null);
        setWishlist(wishlistRes.data.wishlist || []); // assuming backend returns array of productIds
      } catch (err) {
        setError('Failed to load products, buyer info, or wishlist.');
        toast({
          title: 'Error',
          description: 'Could not fetch required data.',
          status: 'error',
          duration: 4000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  // Add or remove from wishlist backend calls and update state
  const toggleWishlist = async (productId) => {
    const isInWishlist = wishlist.includes(productId);
    try {
      if (!isInWishlist) {
        // Add to wishlist
        await axios.post(
          'http://localhost:5000/api/buyer/wishlist',
          { productId },
          { withCredentials: true }
        );
        setWishlist((prev) => [...prev, productId]);
        toast({ title: 'Added to wishlist', status: 'success', duration: 2000, isClosable: true });
      } else {
        // Remove from wishlist
        await axios.delete(`http://localhost:5000/api/buyer/wishlist/${productId}`, {
          withCredentials: true,
        });
        setWishlist((prev) => prev.filter((id) => id !== productId));
        toast({ title: 'Removed from wishlist', status: 'info', duration: 2000, isClosable: true });
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Could not update wishlist. Please try again.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  // Add product to cart
  const handleAddToCart = async (productId) => {
    if (!cartId) {
      throw new Error('Cart not found. Please refresh and try again.');
    }
    await axios.post(
      `http://localhost:5000/api/buyer/cart/${cartId}/item`,
      { productId, quantity: 1 },
      { withCredentials: true }
    );
  };

  if (loading)
    return (
      <Center mt={20}>
        <Spinner size="xl" />
      </Center>
    );

  if (error)
    return (
      <Center mt={20} color="red.500" fontWeight="bold">
        {error}
      </Center>
    );

  if (products.length === 0)
    return (
      <Center mt={20} color="gray.500" fontWeight="bold">
        No products available at the moment.
      </Center>
    );

  return (
    <Box p={6}>
      <Table variant="striped" size="md" mb={8}>
        <Thead>
          <Tr>
            <Th>Name</Th>
            <Th>Seller</Th>
            <Th>Reserved Price (frw)</Th>
            <Th>Status</Th>
            <Th>Rating</Th>
            <Th>Wishlist</Th>
            <Th>Actions</Th>
          </Tr>
        </Thead>
        <Tbody>
          {products.map((product) => (
            <Tr key={product._id}>
              <Td>{product.name}</Td>
              <Td>{product.seller_id?.name || 'Unknown'}</Td>
              <Td>
                {product.price?.reservedPrice
                  ? `frw${product.price.reservedPrice.toLocaleString()}`
                  : 'N/A'}
              </Td>
              <Td>
                <Badge colorScheme={statusColor[product.status] || 'gray'}>
                  {product.status || 'Unknown'}
                </Badge>
              </Td>
              <Td>
                <HStack spacing={1}>
                  {[...Array(5)].map((_, i) => (
                    <StarIcon
                      key={i}
                      color={i < (product.rating || 0) ? 'yellow.400' : 'gray.300'}
                      boxSize={4}
                    />
                  ))}
                </HStack>
              </Td>
              <Td>
                {/* Wishlist toggle checkbox */}
                <input
                  type="checkbox"
                  checked={wishlist.includes(product._id)}
                  onChange={() => toggleWishlist(product._id)}
                  aria-label={`Toggle wishlist for ${product.name}`}
                />
              </Td>
              <Td>
                <Button
                  size="sm"
                  colorScheme="blue"
                  mr={2}
                  onClick={() => setSelectedProduct(product)}
                >
                  View Details
                </Button>
                <Button
                  size="sm"
                  colorScheme="green"
                  onClick={() => handleAddToCart(product._id)}
                  isDisabled={product.status !== 'available'}
                >
                  Add to Cart
                </Button>
              </Td>
            </Tr>
          ))}
        </Tbody>
      </Table>

      {/* Show product card + close button below table when selected */}
      {selectedProduct && (
        <Box mt={6}>
          <ProductCard
            product={selectedProduct}
            onAddToCart={handleAddToCart}
            // Pass wishlist state and toggle handler so ProductCard can reflect it too
            isWishlisted={wishlist.includes(selectedProduct._id)}
            toggleWishlist={toggleWishlist}
          />
          <Button mt={3} onClick={() => setSelectedProduct(null)}>
            Close Details
          </Button>
        </Box>
      )}
    </Box>
  );
};

export default ProductList;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductListTable.jsx (starts at line 7932)

import React, { useState, useEffect } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Spinner,
  Center,
  Button,
  Badge,
  Text,
} from '@chakra-ui/react';
import axios from 'axios';
import RatingStars from './RatingStars';
import ProductDetailsModal from './ProductDetailsModal';
import SearchBar from './SearchBar';

const statusColorScheme = {
  available: 'green',
  unavailable: 'red',
  pending: 'yellow',
};

const ProductListTable = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      setError(null);
      try {
        const res = await axios.get('http://localhost:5000/api/public/products');
        setProducts(res.data.products || []);
      } catch (err) {
        setError('Failed to load products. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  const openModal = (product) => {
    setSelectedProduct(product);
    setModalOpen(true);
  };

  const closeModal = () => {
    setSelectedProduct(null);
    setModalOpen(false);
  };

  // Filter products by search term (case insensitive)
  const filteredProducts = products.filter((product) =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading)
    return (
      <Center mt={10}>
        <Spinner size="xl" color="teal.400" />
      </Center>
    );

  if (error)
    return (
      <Center mt={10}>
        <Text color="red.500">{error}</Text>
      </Center>
    );

  if (filteredProducts.length === 0)
    return (
      <Center mt={10}>
        <Text>No products match your search.</Text>
      </Center>
    );

  return (
    <Box overflowX="auto" maxW="100%" p={4}>
      <SearchBar searchTerm={searchTerm} onSearchChange={setSearchTerm} />

      <Table variant="simple" size="md">
        <Thead bg="gray.100">
          <Tr>
            <Th>Name</Th>
            <Th>Seller</Th>
            <Th>Reserved Price (RWF)</Th>
            <Th>Rating</Th>
            <Th>Status</Th>
            <Th>Action</Th>
          </Tr>
        </Thead>
        <Tbody>
          {filteredProducts.map((product) => (
            <Tr key={product._id}>
              <Td>{product.name}</Td>
              <Td>{product.seller_id?.name || 'Unknown'}</Td>
              <Td>{product.price?.reservedPrice?.toLocaleString() || 'N/A'}</Td>
              <Td>
                <RatingStars rating={product.rating || 0} />
              </Td>
              <Td>
                <Badge colorScheme={statusColorScheme[product.status] || 'gray'}>
                  {product.status || 'Unknown'}
                </Badge>
              </Td>
              <Td>
                <Button size="sm" colorScheme="blue" onClick={() => openModal(product)}>
                  View More
                </Button>
              </Td>
            </Tr>
          ))}
        </Tbody>
      </Table>

      {selectedProduct && (
        <ProductDetailsModal
          product={selectedProduct}
          isOpen={modalOpen}
          onClose={closeModal}
          onAddToCart={() => {
            // pass an onAddToCart handler here if needed, e.g. show toast or update cart
            // for demo, just a dummy promise:
            return Promise.resolve();
          }}
        />
      )}
    </Box>
  );
};

export default ProductListTable;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\ProductTable.jsx (starts at line 8075)

// src/buyer/components/marketplace/ProductTable.jsx
import React, { useEffect, useState } from 'react';
import {
  Box,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Button,
  Spinner,
  Center,
  Avatar,
  Badge,
  HStack,
  Text,
  useToast,
} from '@chakra-ui/react';
import axios from 'axios';
import ProductDetailsModal from './ProductDetailsModal';
import RatingStars from './RatingStars';

const ProductTable = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const toast = useToast();

  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      try {
        const res = await axios.get('http://localhost:5000/api/public/products'); // update with actual endpoint
        setProducts(res.data.products || []);
      } catch (error) {
        toast({
          title: 'Failed to load products',
          description: error.response?.data?.message || error.message,
          status: 'error',
          duration: 4000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };
    fetchProducts();
  }, []);

  const openModal = (product) => {
    setSelectedProduct(product);
    setModalOpen(true);
  };

  const closeModal = () => {
    setSelectedProduct(null);
    setModalOpen(false);
  };

  if (loading) {
    return (
      <Center mt={20}>
        <Spinner size="xl" />
      </Center>
    );
  }

  if (products.length === 0) {
    return (
      <Center mt={20}>
        <Text>No products available.</Text>
      </Center>
    );
  }

  return (
    <Box overflowX="auto" maxW="100%" p={4}>
      <Table variant="simple" size="md">
        <Thead bg="gray.100">
          <Tr>
            <Th>Image</Th>
            <Th>Name</Th>
            <Th>Seller</Th>
            <Th>Price (RWF)</Th>
            <Th>Rating</Th>
            <Th>Status</Th>
            <Th>Actions</Th>
          </Tr>
        </Thead>
        <Tbody>
          {products.map((product) => (
            <Tr key={product._id} _hover={{ bg: 'gray.50', cursor: 'pointer' }}>
              <Td>
                <Avatar
                  size="sm"
                  src={product.imageUrl || 'https://via.placeholder.com/100?text=Product'}
                  name={product.name}
                  borderRadius="md"
                />
              </Td>
              <Td>{product.name}</Td>
              <Td>{product.seller_id?.name || 'Unknown'}</Td>
              <Td>{product.price?.reservedPrice?.toLocaleString() || 'N/A'}</Td>
              <Td>
                <RatingStars rating={product.rating || 0} />
              </Td>
              <Td>
                <Badge colorScheme={product.status === 'available' ? 'green' : 'gray'}>
                  {product.status || 'Unknown'}
                </Badge>
              </Td>
              <Td>
                <Button size="sm" colorScheme="blue" onClick={() => openModal(product)}>
                  View Details
                </Button>
              </Td>
            </Tr>
          ))}
        </Tbody>
      </Table>

      {selectedProduct && (
        <ProductDetailsModal
          product={selectedProduct}
          isOpen={modalOpen}
          onClose={closeModal}
        />
      )}
    </Box>
  );
};

export default ProductTable;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\RatingStars.jsx (starts at line 8211)

import React from 'react';
import { HStack } from '@chakra-ui/react';
import { StarIcon } from '@chakra-ui/icons';

const RatingStars = ({ rating = 0, maxStars = 5 }) => {
  return (
    <HStack spacing={1}>
      {Array.from({ length: maxStars }).map((_, i) => (
        <StarIcon key={i} color={i < rating ? 'yellow.400' : 'gray.300'} />
      ))}
    </HStack>
  );
};

export default RatingStars;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\SearchBar.jsx (starts at line 8227)

import React from 'react';
import { Input, Box } from '@chakra-ui/react';

const SearchBar = ({ searchTerm, onSearchChange }) => {
  return (
    <Box mb={4}>
      <Input
        placeholder="Search products..."
        value={searchTerm}
        onChange={(e) => onSearchChange(e.target.value)}
        size="md"
        focusBorderColor="teal.400"
        aria-label="Search products"
      />
    </Box>
  );
};

export default SearchBar;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\components\marketplace\WishlistToggle.jsx (starts at line 8247)




================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\forms\BudgetForm.jsx (starts at line 8248)

import React, { useState } from "react";
import {
  Box,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Select,
  Textarea,
  Button,
  FormErrorMessage,
  useToast,
} from "@chakra-ui/react";

const currencies = ["USD", "EUR", "RWF", "GBP"];

const BudgetForm = () => {
  const [form, setForm] = useState({
    description: "",
    estimatedBudget: "",
    currency: "",
    phone: "",
    deadline: "",
  });
  const [errors, setErrors] = useState({});
  const toast = useToast();

  const validate = () => {
    const errs = {};
    if (!form.description.trim()) errs.description = "Description is required";
    if (
      !form.estimatedBudget ||
      isNaN(form.estimatedBudget) ||
      Number(form.estimatedBudget) <= 0
    )
      errs.estimatedBudget = "Please enter a valid budget";
    if (!form.currency) errs.currency = "Currency is required";
    if (!form.phone.trim()) errs.phone = "Phone number is required";
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) return;

    // TODO: submit budget request to backend
    toast({
      title: "Budget submitted",
      description: "Your budget request has been sent.",
      status: "success",
      duration: 3000,
      isClosable: true,
    });
  };

  return (
    <Box maxW="600px" mx="auto" p={5} borderWidth={1} borderRadius="md">
      <Heading size="md" mb={4}>
        Submit Your Budget
      </Heading>
      <form onSubmit={handleSubmit}>
        <FormControl isInvalid={!!errors.description} mb={3} isRequired>
          <FormLabel>Project / Service Description</FormLabel>
          <Textarea
            name="description"
            value={form.description}
            onChange={handleChange}
            placeholder="Describe your project or service request"
          />
          <FormErrorMessage>{errors.description}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.estimatedBudget} mb={3} isRequired>
          <FormLabel>Estimated Budget</FormLabel>
          <Input
            type="number"
            name="estimatedBudget"
            value={form.estimatedBudget}
            onChange={handleChange}
            placeholder="Enter your budget"
            min="0"
          />
          <FormErrorMessage>{errors.estimatedBudget}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.currency} mb={3} isRequired>
          <FormLabel>Currency</FormLabel>
          <Select name="currency" value={form.currency} onChange={handleChange}>
            <option value="">Select currency</option>
            {currencies.map((c) => (
              <option key={c} value={c}>
                {c}
              </option>
            ))}
          </Select>
          <FormErrorMessage>{errors.currency}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.phone} mb={3} isRequired>
          <FormLabel>Phone Number</FormLabel>
          <Input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="Your phone number"
          />
          <FormErrorMessage>{errors.phone}</FormErrorMessage>
        </FormControl>

        <FormControl mb={5}>
          <FormLabel>Deadline / Timeframe (optional)</FormLabel>
          <Input
            type="date"
            name="deadline"
            value={form.deadline}
            onChange={handleChange}
          />
        </FormControl>

        <Button type="submit" colorScheme="teal" width="full">
          Submit Budget
        </Button>
      </form>
    </Box>
  );
};

export default BudgetForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\forms\DepositForm.jsx (starts at line 8384)

import React, { useState } from "react";
import {
  Box,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Select,
  Button,
  FormErrorMessage,
  useToast,
} from "@chakra-ui/react";

const paymentMethods = ["Credit Card", "PayPal", "Bank Transfer"];

const DepositForm = () => {
  const [form, setForm] = useState({
    amount: "",
    paymentMethod: "",
    phone: "",
    transactionRef: "",
  });
  const [errors, setErrors] = useState({});
  const toast = useToast();

  const validate = () => {
    const errs = {};
    if (!form.amount || isNaN(form.amount) || Number(form.amount) <= 0)
      errs.amount = "Please enter a valid amount";
    if (!form.paymentMethod) errs.paymentMethod = "Select a payment method";
    if (!form.phone.trim()) errs.phone = "Phone number is required";
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) return;

    // TODO: integrate with backend deposit API
    toast({
      title: "Deposit submitted",
      description: `Amount: ${form.amount} via ${form.paymentMethod}`,
      status: "success",
      duration: 3000,
      isClosable: true,
    });
  };

  return (
    <Box maxW="400px" mx="auto" p={5} borderWidth={1} borderRadius="md">
      <Heading size="md" mb={4}>
        Deposit Funds
      </Heading>
      <form onSubmit={handleSubmit}>
        <FormControl isInvalid={!!errors.amount} mb={3} isRequired>
          <FormLabel>Amount</FormLabel>
          <Input
            type="number"
            name="amount"
            value={form.amount}
            onChange={handleChange}
            placeholder="Enter amount"
            min="0"
          />
          <FormErrorMessage>{errors.amount}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.paymentMethod} mb={3} isRequired>
          <FormLabel>Payment Method</FormLabel>
          <Select
            name="paymentMethod"
            value={form.paymentMethod}
            onChange={handleChange}
          >
            <option value="">Select payment method</option>
            {paymentMethods.map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </Select>
          <FormErrorMessage>{errors.paymentMethod}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.phone} mb={3} isRequired>
          <FormLabel>Phone Number</FormLabel>
          <Input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="Your phone number"
          />
          <FormErrorMessage>{errors.phone}</FormErrorMessage>
        </FormControl>

        <FormControl mb={5}>
          <FormLabel>Transaction Reference (optional)</FormLabel>
          <Input
            name="transactionRef"
            value={form.transactionRef}
            onChange={handleChange}
            placeholder="Transaction ID or reference"
          />
        </FormControl>

        <Button type="submit" colorScheme="purple" width="full">
          Submit Deposit
        </Button>
      </form>
    </Box>
  );
};

export default DepositForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\forms\EscrowConfirmationForm.jsx (starts at line 8506)

import React, { useState } from "react";
import {
  Box,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Checkbox,
  Button,
  FormErrorMessage,
  useToast,
} from "@chakra-ui/react";

const EscrowConfirmationForm = ({ transactionId }) => {
  const [phone, setPhone] = useState("");
  const [agreed, setAgreed] = useState(false);
  const [errors, setErrors] = useState({});
  const toast = useToast();

  const validate = () => {
    const errs = {};
    if (!phone.trim()) errs.phone = "Phone number is required";
    if (!agreed) errs.agreed = "You must agree to terms";
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) return;

    // TODO: submit data to backend
    toast({
      title: "Escrow confirmed",
      description: "Thank you for confirming escrow.",
      status: "success",
      duration: 3000,
      isClosable: true,
    });
  };

  return (
    <Box maxW="400px" mx="auto" p={5} borderWidth={1} borderRadius="md">
      <Heading size="md" mb={4}>
        Escrow Confirmation
      </Heading>
      <form onSubmit={handleSubmit}>
        <FormControl mb={3}>
          <FormLabel>Transaction ID</FormLabel>
          <Input value={transactionId || ""} isReadOnly />
        </FormControl>
        <FormControl isInvalid={!!errors.phone} mb={3} isRequired>
          <FormLabel>Phone Number</FormLabel>
          <Input
            type="tel"
            placeholder="Enter your phone number"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
          <FormErrorMessage>{errors.phone}</FormErrorMessage>
        </FormControl>
        <FormControl isInvalid={!!errors.agreed} mb={5} isRequired>
          <Checkbox
            isChecked={agreed}
            onChange={(e) => setAgreed(e.target.checked)}
          >
            I agree to the terms and conditions
          </Checkbox>
          <FormErrorMessage>{errors.agreed}</FormErrorMessage>
        </FormControl>
        <Button type="submit" colorScheme="blue" width="full">
          Confirm Escrow
        </Button>
      </form>
    </Box>
  );
};

export default EscrowConfirmationForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\forms\LocationForm.jsx (starts at line 8586)

import React, { useState } from "react";
import {
  Box,
  Heading,
  FormControl,
  FormLabel,
  Input,
  Select,
  Button,
  FormErrorMessage,
  useToast,
} from "@chakra-ui/react";

const countries = ["Rwanda", "USA", "Canada", "UK", "Other"];

const LocationForm = () => {
  const [form, setForm] = useState({
    fullName: "",
    phone: "",
    country: "",
    state: "",
    city: "",
    postalCode: "",
    streetAddress: "",
    landmark: "",
  });
  const [errors, setErrors] = useState({});
  const toast = useToast();

  const validate = () => {
    const errs = {};
    if (!form.fullName.trim()) errs.fullName = "Full name is required";
    if (!form.phone.trim()) errs.phone = "Phone number is required";
    if (!form.country) errs.country = "Country is required";
    if (!form.city.trim()) errs.city = "City is required";
    if (!form.streetAddress.trim()) errs.streetAddress = "Street address is required";
    setErrors(errs);
    return Object.keys(errs).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) return;

    // TODO: submit location to backend
    toast({
      title: "Location saved",
      description: "Your address has been updated.",
      status: "success",
      duration: 3000,
      isClosable: true,
    });
  };

  return (
    <Box maxW="500px" mx="auto" p={5} borderWidth={1} borderRadius="md">
      <Heading size="md" mb={4}>
        Set Your Location
      </Heading>
      <form onSubmit={handleSubmit}>
        <FormControl isInvalid={!!errors.fullName} mb={3} isRequired>
          <FormLabel>Full Name</FormLabel>
          <Input
            name="fullName"
            value={form.fullName}
            onChange={handleChange}
            placeholder="Your full name"
          />
          <FormErrorMessage>{errors.fullName}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.phone} mb={3} isRequired>
          <FormLabel>Phone Number</FormLabel>
          <Input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            placeholder="Your phone number"
          />
          <FormErrorMessage>{errors.phone}</FormErrorMessage>
        </FormControl>

        <FormControl isInvalid={!!errors.country} mb={3} isRequired>
          <FormLabel>Country</FormLabel>
          <Select name="country" value={form.country} onChange={handleChange}>
            <option value="">Select country</option>
            {countries.map((c) => (
              <option key={c} value={c}>
                {c}
              </option>
            ))}
          </Select>
          <FormErrorMessage>{errors.country}</FormErrorMessage>
        </FormControl>

        <FormControl mb={3}>
          <FormLabel>State/Province</FormLabel>
          <Input
            name="state"
            value={form.state}
            onChange={handleChange}
            placeholder="State or Province"
          />
        </FormControl>

        <FormControl isInvalid={!!errors.city} mb={3} isRequired>
          <FormLabel>City</FormLabel>
          <Input
            name="city"
            value={form.city}
            onChange={handleChange}
            placeholder="City"
          />
          <FormErrorMessage>{errors.city}</FormErrorMessage>
        </FormControl>

        <FormControl mb={3}>
          <FormLabel>Postal / ZIP Code</FormLabel>
          <Input
            name="postalCode"
            value={form.postalCode}
            onChange={handleChange}
            placeholder="Postal or ZIP code"
          />
        </FormControl>

        <FormControl isInvalid={!!errors.streetAddress} mb={3} isRequired>
          <FormLabel>Street Address</FormLabel>
          <Input
            name="streetAddress"
            value={form.streetAddress}
            onChange={handleChange}
            placeholder="Street address"
          />
          <FormErrorMessage>{errors.streetAddress}</FormErrorMessage>
        </FormControl>

        <FormControl mb={5}>
          <FormLabel>Landmark / Additional Info</FormLabel>
          <Input
            name="landmark"
            value={form.landmark}
            onChange={handleChange}
            placeholder="Optional landmark or directions"
          />
        </FormControl>

        <Button type="submit" colorScheme="green" width="full">
          Save Location
        </Button>
      </form>
    </Box>
  );
};

export default LocationForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\hooks\useBuyerWallet.js (starts at line 8749)

import { useState, useEffect } from 'react';
import { walletApi } from '../../api/walletApi';
import useAuth from '../../hooks/useAuth';

const useBuyerWallet = () => {
    const [balance, setBalance] = useState(0);
    const { token } = useAuth();

    useEffect(() => {
        const fetchBalance = async () => {
            if (token) {
                try {
                    const response = await walletApi.getBalance(token);
                    setBalance(response.data.balance);
                } catch (error) {
                    console.error('Failed to fetch balance:', error);
                }
            }
        };
        fetchBalance();
    }, [token]);

    const deposit = async (amount) => {
        try {
            const response = await walletApi.deposit(amount, token);
            setBalance(response.data.balance);
        } catch (error) {
            console.error('Deposit failed:', error);
        }
    };

    return { balance, deposit };
};

export default useBuyerWallet;


================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\hooks\useDepositFunds.js (starts at line 8784)

// src/buyer/hooks/useDepositFunds.js
import { useState } from "react";
import axios from "axios";

const useDepositFunds = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMsg, setSuccessMsg] = useState(null);

  const depositFunds = async (amount) => {
    setLoading(true);
    setError(null);
    setSuccessMsg(null);

    try {
      const response = await axios.post(
        "http://localhost:5000/api/transactions/deposit",
        { amount },
        { withCredentials: true } // send cookies if using sessions/auth
      );
      setSuccessMsg(response.data.message);
      setLoading(false);
      return response.data;
    } catch (err) {
      setError(err.response?.data?.message || "Error depositing funds");
      setLoading(false);
    }
  };

  return { depositFunds, loading, error, successMsg };
};

export default useDepositFunds;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\hooks\useEscrowFlow.js (starts at line 8818)

import { useState } from 'react';
import { escrowApi } from '../../api/escrowApi';
import useAuth from '../../hooks/useAuth';

const useEscrowFlow = () => {
    const [escrowState, setEscrowState] = useState('idle');
    const { token } = useAuth();

    const startEscrow = async (productId, amount) => {
        try {
            setEscrowState('pending');
            await escrowApi.start(productId, amount, token);
            setEscrowState('started');
        } catch (error) {
            console.error('Failed to start escrow:', error);
            setEscrowState('error');
        }
    };

    const confirmEscrow = async (escrowId) => {
        try {
            setEscrowState('confirming');
            await escrowApi.confirm(escrowId, token);
            setEscrowState('confirmed');
        } catch (error) {
            console.error('Failed to confirm escrow:', error);
            setEscrowState('error');
        }
    };

    const releaseEscrow = async (escrowId) => {
        try {
            setEscrowState('releasing');
            await escrowApi.release(escrowId, token);
            setEscrowState('released');
        } catch (error) {
            console.error('Failed to release escrow:', error);
            setEscrowState('error');
        }
    };

    return { escrowState, startEscrow, confirmEscrow, releaseEscrow };
};

export default useEscrowFlow;


================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\orderchat\Chat.css (starts at line 8863)

/* src/buyer/orderChat/chat.css */
.chat-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 1rem;
  background: #f7f7f7;
  border-radius: 8px;
}

.chat-messages {
  max-height: 400px;
  overflow-y: auto;
  margin-bottom: 1rem;
}

.chat-bubble {
  margin: 0.5rem 0;
  padding: 0.6rem 1rem;
  border-radius: 12px;
  max-width: 80%;
  position: relative;
}

.chat-bubble.sent {
  background: #cce5ff;
  align-self: flex-end;
  margin-left: auto;
}

.chat-bubble.received {
  background: #e2e2e2;
  align-self: flex-start;
  margin-right: auto;
}

.timestamp {
  font-size: 0.7rem;
  color: gray;
  display: block;
  margin-top: 4px;
  text-align: right;
}

.chat-input {
  display: flex;
  gap: 0.5rem;
}

.chat-input input {
  flex: 1;
  padding: 0.6rem;
  border-radius: 6px;
  border: 1px solid #ccc;
}

.chat-input button {
  padding: 0.6rem 1rem;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\orderchat\ChatInputBox.jsx (starts at line 8927)

// src/buyer/orderChat/ChatInputBox.jsx
import React, { useState } from 'react';

const ChatInputBox = ({ onSend, senderId, receiverId, orderId }) => {
  const [text, setText] = useState('');

  const sendMessage = () => {
    if (text.trim() === '') return;
    const newMsg = {
      senderId,
      receiverId,
      orderId,
      message: text,
      timestamp: new Date(),
    };
    onSend(newMsg);
    setText('');
  };

  return (
    <div className="chat-input">
      <input
        type="text"
        placeholder="Type a message..."
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

export default ChatInputBox;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\orderchat\ChatMessageList.jsx (starts at line 8962)

// src/buyer/orderChat/ChatMessageList.jsx
import React from 'react';

const ChatMessageList = ({ messages, buyerId }) => {
  return (
    <div className="chat-messages">
      {messages.map((msg, index) => (
        <div
          key={index}
          className={`chat-bubble ${msg.senderId === buyerId ? 'sent' : 'received'}`}
        >
          <p>{msg.message}</p>
          <span className="timestamp">{new Date(msg.timestamp).toLocaleTimeString()}</span>
        </div>
      ))}
    </div>
  );
};

export default ChatMessageList;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\orderchat\OrderChatPage.jsx (starts at line 8983)

// src/buyer/orderChat/OrderChatPage.jsx
import React, { useState, useEffect } from 'react';
import ChatMessageList from './ChatMessageList';
import ChatInputBox from './ChatInputBox';
import useOrderChatSocket from './useOrderChatSocket';  // <-- use the socket hook
import './chat.css'; 

const OrderChatPage = ({ orderId }) => {
  const [messages, setMessages] = useState([]);
  const buyerId = 'buyer123'; // ← Replace with actual buyer ID from auth
  const sellerId = 'seller456'; // ← Replace with seller from order

  // Fetching initial messages (Could use API here)
  useEffect(() => {
    setMessages([
      { senderId: buyerId, message: 'Hi, is my order shipped?', timestamp: new Date() },
      { senderId: sellerId, message: 'Yes, it’s on the way!', timestamp: new Date() },
    ]);
  }, [orderId]);

  // New message handler from socket
  const handleNewMessage = (newMsg) => {
    setMessages((prev) => [...prev, newMsg]);
  };

  // Use socket to receive and send messages
  useOrderChatSocket(orderId, handleNewMessage);

  const handleSend = (newMsg) => {
    setMessages((prev) => [...prev, newMsg]);
    // Emit message to backend through socket
    const socket = io('http://localhost:5000');  // Assuming socket is already initialized here
    socket.emit('sendMessage', newMsg);
  };

  return (
    <div className="chat-container">
      <h2>Order Chat</h2>
      <ChatMessageList messages={messages} buyerId={buyerId} />
      <ChatInputBox onSend={handleSend} senderId={buyerId} receiverId={sellerId} orderId={orderId} />
    </div>
  );
};

export default OrderChatPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\orderchat\useOrderChatSocket.js (starts at line 9029)

import { useEffect } from 'react';
import { io } from 'socket.io-client';

const useOrderChatSocket = (orderId, handleNewMessage) => {
  useEffect(() => {
    const socket = io('http://localhost:5000', {
      withCredentials: true,
    });

    socket.emit('joinRoom', { orderId });

    socket.on(`chat-${orderId}`, (messageData) => {
      handleNewMessage(messageData);
    });

    return () => {
      socket.disconnect();
    };
  }, [orderId, handleNewMessage]);
};

export default useOrderChatSocket;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\pages\AnalyticsPage.jsx (starts at line 9052)

import React, { useState, useEffect } from 'react';
import { Box, Heading, Text, SimpleGrid, Stat, StatLabel, StatNumber, StatHelpText, StatArrow } from '@chakra-ui/react';
import { PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';

const mockData = {
  totalSpent: 5000000,
  topProducts: [
    { name: 'iPhone 15 Pro Max', count: 3 },
    { name: 'MacBook Pro M3', count: 2 },
    { name: 'Samsung QLED TV', count: 1 },
  ],
  monthlySpending: [
    { month: 'Jan', amount: 1000000 },
    { month: 'Feb', amount: 1500000 },
    { month: 'Mar', amount: 2500000 },
  ],
};

const AnalyticsPage = () => {
  const [analyticsData, setAnalyticsData] = useState(mockData);

  useEffect(() => {
    // Fetch analytics data from the backend
    setAnalyticsData(mockData); // Replace with API call
  }, []);

  const spendingChartData = analyticsData.monthlySpending.map(item => ({
    name: item.month,
    spending: item.amount,
  }));

  return (
    <Box p={5}>
      <Heading as="h2" size="lg" mb={4}>Analytics</Heading>

      {/* Total Spending */}
      <SimpleGrid columns={3} spacing={6} mb={8}>
        <Stat>
          <StatLabel>Total Spent</StatLabel>
          <StatNumber>{analyticsData.totalSpent}</StatNumber>
          <StatHelpText>
            <StatArrow type="increase" />
            15% increase from last month
          </StatHelpText>
        </Stat>

        {/* Top Products */}
        <Stat>
          <StatLabel>Top Products</StatLabel>
          {analyticsData.topProducts.map((product, index) => (
            <Text key={index}>{product.name}: {product.count} orders</Text>
          ))}
        </Stat>
      </SimpleGrid>

      {/* Spending over Time (Line Chart) */}
      <Heading size="md" mb={4}>Spending Over Time</Heading>
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={spendingChartData}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="name" />
          <YAxis />
          <Tooltip />
          <Line type="monotone" dataKey="spending" stroke="#8884d8" />
        </LineChart>
      </ResponsiveContainer>
    </Box>
  );
};

export default AnalyticsPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\pages\BuyerOrders.jsx (starts at line 9124)

import React, { useEffect, useState } from 'react';
import {
  Box, Heading, Table, Thead, Tbody, Tr, Th, Td,
  Spinner, Center, Badge, Button, useToast
} from '@chakra-ui/react';
import axios from 'axios';
import BuyerNavbar from '../components/BuyerNavBar';

const BuyerOrders = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const toast = useToast();

  const fetchOrders = async () => {
    try {
      const res = await axios.get('http://localhost:5000/api/buyer/orders', {
        withCredentials: true,
      });
      setOrders(res.data.orders);
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Could not fetch orders.',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  const cancelOrder = async (orderId) => {
    try {
      await axios.patch(
        `http://localhost:5000/api/buyer/order/${orderId}/cancel`,
        { reason: "Changed my mind" }, // You can prompt for input later
        { withCredentials: true }
      );
      toast({
        title: 'Order Cancelled',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
      fetchOrders(); // refresh
    } catch (err) {
      toast({
        title: 'Error',
        description: 'Failed to cancel order',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  return (
    <Box p={6}>
      <BuyerNavbar />
      <Heading size="lg" mb={4}>🧾 My Orders</Heading>

      {loading ? (
        <Center><Spinner size="xl" /></Center>
      ) : (
        <Table variant="simple">
          <Thead>
            <Tr>
              <Th>Order #</Th>
              <Th>Status</Th>
              <Th>Total</Th>
              <Th>Date</Th>
              <Th>Actions</Th>
            </Tr>
          </Thead>
          <Tbody>
            {orders.map(order => (
              <Tr key={order._id}>
                <Td>{order.orderNumber || order._id.slice(-6)}</Td>
                <Td>
                  <Badge colorScheme={
                    order.status === 'pending' ? 'yellow' :
                    order.status === 'confirmed' ? 'green' :
                    order.status === 'cancelled' ? 'red' : 'blue'
                  }>
                    {order.status}
                  </Badge>
                </Td>
                <Td>{order.totalAmount} RWF</Td>
                <Td>{new Date(order.createdAt).toLocaleDateString()}</Td>
                <Td>
                  {["pending", "confirmed"].includes(order.status) && (
                    <Button
                      size="sm"
                      colorScheme="red"
                      onClick={() => cancelOrder(order._id)}
                    >
                      Cancel
                    </Button>
                  )}
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      )}
    </Box>
  );
};

export default BuyerOrders;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\pages\BuyerOrdersWithEscrow.jsx (starts at line 9240)

import React, { useEffect, useState } from 'react';
import { VStack, Heading, Spinner, Center } from '@chakra-ui/react';
import EscrowStatusCard from '../components/EscrowStatusCard';
import axios from 'axios';

const BuyerOrdersWithEscrow = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchOrders = async () => {
    try {
      const { data } = await axios.get("/api/buyer/orders", {
        withCredentials: true,
      });
      setOrders(data.orders || []);
    } catch (error) {
      console.error("Failed to fetch orders:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  if (loading) return <Center><Spinner /></Center>;

  return (
    <VStack spacing={4} align="stretch" p={4}>
      <Heading size="lg">My Escrow Orders</Heading>
      {orders.map(order => (
        <EscrowStatusCard key={order._id} order={order} />
      ))}
    </VStack>
  );
};

export default BuyerOrdersWithEscrow;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\pages\OrderDetailsModal.jsx (starts at line 9280)

import React from 'react';
import { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, Button, Table, Tbody, Tr, Td, Text } from '@chakra-ui/react';

const OrderDetailsModal = ({ isOpen, onClose, order }) => {
  // Add a check to prevent accessing properties of null or undefined
  if (!order) {
    return null; // If no order is selected, return null and do not render the modal
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose}>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Order Details</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Text fontSize="lg" mb={4}>Order ID: {order.orderId}</Text>
          <Text fontSize="lg" mb={4}>Order Date: {order.date}</Text>
          <Text fontSize="lg" mb={4}>Status: {order.status}</Text>
          
          <Table variant="simple">
            <Tbody>
              {order.items.map((item, index) => (
                <Tr key={index}>
                  <Td>{item.product}</Td>
                  <Td>{item.price}</Td>
                </Tr>
              ))}
            </Tbody>
          </Table>
          
          <Text fontSize="lg" mt={4}>Total: {order.total}</Text>
        </ModalBody>

        <ModalFooter>
          <Button colorScheme="blue" mr={3} onClick={onClose}>
            Close
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

export default OrderDetailsModal;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\pages\PurchaseHistoryPage.jsx (starts at line 9326)

import React, { useState, useEffect } from 'react';
import { Table, Thead, Tbody, Tr, Th, Td, Button, Box, Heading } from '@chakra-ui/react';
import { Link } from 'react-router-dom';
import OrderDetailsModal from './OrderDetailsModal';  // Import the modal

const mockOrders = [
  {
    orderId: 'order123',
    date: '2025-07-21',
    total: 1500000,
    status: 'Shipped',
    items: [
      { product: 'iPhone 15 Pro Max', price: 1500000 },
    ],
  },
  {
    orderId: 'order124',
    date: '2025-07-20',
    total: 3200000,
    status: 'Delivered',
    items: [
      { product: 'MacBook Pro M3', price: 3200000 },
    ],
  },
];

const PurchaseHistoryPage = () => {
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null); // Track the selected order for details modal
  const [isModalOpen, setIsModalOpen] = useState(false); // Modal visibility state

  useEffect(() => {
    // Fetch orders from the API
    setOrders(mockOrders); // Using mock data for now, replace with API call
  }, []);

  const openOrderDetails = (order) => {
    setSelectedOrder(order);
    setIsModalOpen(true);
  };

  const closeOrderDetails = () => {
    setIsModalOpen(false);
    setSelectedOrder(null);
  };

  return (
    <Box p={5}>
      <Heading as="h2" size="lg" mb={4}>Purchase History</Heading>
      <Table variant="simple">
        <Thead>
          <Tr>
            <Th>Order ID</Th>
            <Th>Date</Th>
            <Th>Total</Th>
            <Th>Status</Th>
            <Th>Details</Th>
          </Tr>
        </Thead>
        <Tbody>
          {orders.map(order => (
            <Tr key={order.orderId}>
              <Td>{order.orderId}</Td>
              <Td>{order.date}</Td>
              <Td>{order.total}</Td>
              <Td>{order.status}</Td>
              <Td>
                <Button onClick={() => openOrderDetails(order)}>View Details</Button>
              </Td>
            </Tr>
          ))}
        </Tbody>
      </Table>

      {/* Order Details Modal */}
      <OrderDetailsModal
        isOpen={isModalOpen}
        onClose={closeOrderDetails}
        order={selectedOrder} // Pass the selected order
      />
    </Box>
  );
};

export default PurchaseHistoryPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\assistantLogic.js (starts at line 9412)

// src/buyer/components/VirtualAssistant/assistantLogic.js

export function getAssistantReply(userInput) {
  const input = userInput.toLowerCase();

  if (input.includes("track")) {
    return "You can track your order in the 'Orders' section.";
  }
  if (input.includes("cart")) {
    return "Click the cart icon to view items you've added.";
  }
  if (input.includes("suggest") || input.includes("best")) {
    return "Sure! I recommend checking out the trending products section.";
  }
  if (input.includes("hello") || input.includes("hi")) {
    return "Hello! 👋 I'm your shopping assistant. How can I help?";
  }

  return "Sorry, I didn’t quite get that. Try asking about 'tracking', 'suggestions', or 'cart'.";
}



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\AssistantWadget.jsx (starts at line 9433)

// src/buyer/components/VirtualAssistant/AssistantWidget.jsx
import React, { useState } from "react";
import ChatBubble from "./ChatBubble";
import { getAssistantReply } from "./assistantLogic";
import "./widget.css"; // Optional styling

function AssistantWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { sender: "assistant", message: "Hi! Need help with anything?" }
  ]);
  const [input, setInput] = useState("");

  const toggleWidget = () => setIsOpen(!isOpen);

  const handleSend = () => {
    if (!input.trim()) return;

    const userMsg = { sender: "user", message: input };
    const replyMsg = { sender: "assistant", message: getAssistantReply(input) };

    setMessages([...messages, userMsg, replyMsg]);
    setInput("");
  };

  return (
    <div className="assistant-widget">
      <button onClick={toggleWidget} className="toggle-btn">
        {isOpen ? "×" : "🤖"}
      </button>

      {isOpen && (
        <div className="chat-box">
          <div className="messages">
            {messages.map((msg, i) => (
              <ChatBubble key={i} {...msg} />
            ))}
          </div>
          <div className="input-area">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Ask me something..."
            />
            <button onClick={handleSend}>Send</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default AssistantWidget;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\chat.css (starts at line 9487)

/* src/buyer/components/VirtualAssistant/chat.css */

.chat-bubble {
  max-width: 80%;
  padding: 8px 12px;
  margin: 6px 0;
  border-radius: 12px;
}

.chat-bubble.user {
  align-self: flex-end;
  background-color: #dbf4ff;
  text-align: right;
}

.chat-bubble.assistant {
  align-self: flex-start;
  background-color: #f3f4f6;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\ChatBubble.jsx (starts at line 9507)

// src/buyer/components/VirtualAssistant/ChatBubble.jsx
import React from "react";
import "./chat.css"; // you can style as needed

function ChatBubble({ message, sender }) {
  const isUser = sender === "user";

  return (
    <div className={`chat-bubble ${isUser ? "user" : "assistant"}`}>
      <p>{message}</p>
    </div>
  );
}

export default ChatBubble;



================================================================================

File: frontend\VirMar-RWANDA\src\Buyer\VirtualAssistant\widget.css (starts at line 9523)

/* src/buyer/components/VirtualAssistant/widget.css */

.assistant-widget {
  position: fixed;
  bottom: 20px;
  right: 20px;
  font-family: Arial, sans-serif;
  z-index: 999;
}

.toggle-btn {
  background: #3b82f6;
  color: white;
  border: none;
  border-radius: 50%;
  padding: 12px;
  font-size: 20px;
  cursor: pointer;
}

.chat-box {
  background: white;
  border: 1px solid #ccc;
  border-radius: 8px;
  width: 300px;
  height: 380px;
  display: flex;
  flex-direction: column;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.messages {
  flex: 1;
  padding: 10px;
  overflow-y: auto;
}

.input-area {
  display: flex;
  border-top: 1px solid #eee;
  padding: 8px;
}

.input-area input {
  flex: 1;
  padding: 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.input-area button {
  margin-left: 6px;
  padding: 6px 10px;
  background: #10b981;
  color: white;
  border: none;
  border-radius: 4px;
}



================================================================================

File: frontend\VirMar-RWANDA\src\hooks\useAuth.js (starts at line 9582)

import { useState, useEffect } from 'react';
import { authApi } from '../api/authApi';

const useAuth = () => {
    const [user, setUser] = useState(null);
    const [token, setToken] = useState(localStorage.getItem('token'));

    useEffect(() => {
        if (token) {
            // You would typically decode the token to get user info
            // For now, we'll just set a dummy user
            setUser({ username: 'testuser' });
        }
    }, [token]);

    const login = async (email, password, role) => {
        try {
            const response = await authApi.login(email, password, role);
            const { token, user } = response.data;
            localStorage.setItem('token', token);
            setToken(token);
            setUser(user);
        } catch (error) {
            console.error('Login failed:', error);
        }
    };

    const logout = () => {
        localStorage.removeItem('token');
        setToken(null);
        setUser(null);
    };

    return { user, token, login, logout };
};

export default useAuth;


================================================================================

File: frontend\VirMar-RWANDA\src\pages\NotFoundPage.css (starts at line 9619)

/* Dark-themed 404 styling */

.notfound-container {
  background-color: #0d0d0d;
  color: #f0f0f0;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  animation: fadeIn 1s ease-in-out;
}

.icon {
  font-size: 5rem;
  animation: float 2s ease-in-out infinite;
  margin-bottom: 20px;
}

.title {
  font-size: 2.5rem;
  margin-bottom: 10px;
  font-weight: 700;
  letter-spacing: 1px;
}

.message {
  font-size: 1.2rem;
  margin-bottom: 30px;
  color: #ccc;
}

.home-button {
  padding: 12px 24px;
  background-color: #ff4c60;
  color: white;
  text-decoration: none;
  border-radius: 8px;
  font-weight: bold;
  transition: background-color 0.3s ease;
}

.home-button:hover {
  background-color: #ff1f3d;
}

/* Animations */
@keyframes float {
  0%   { transform: translateY(0); }
  50%  { transform: translateY(-10px); }
  100% { transform: translateY(0); }
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to   { opacity: 1; transform: translateY(0); }
}



================================================================================

File: frontend\VirMar-RWANDA\src\pages\NotFoundPage.jsx (starts at line 9678)

import React from 'react';
import './NotFoundPage.css';

/**
 * 404 Not Found Page – Dark theme with animated icon.
 */
const NotFoundPage = () => {
  return (
    <div className="notfound-container">
      <div className="icon">😵‍💫</div>
      <h1 className="title">404 - Page Not Found</h1>
      <p className="message">Oops! We couldn’t find that page.</p>
      <a href="/" className="home-button">Go Back Home</a>
    </div>
  );
};

export default NotFoundPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\Router.jsx (starts at line 9697)

import React from 'react';
import { Route, Routes } from 'react-router-dom';
import LandingPage from './components/LandingPage';
import AboutPage from './components/AboutPage';
import BlogPage from './components/BlogPage';
import ContactPage from './components/ContactPage';
import BuyerRegisterForm from '.forms/BuyerRegisterForm';
import BuyerLoginForm from './forms/BuyerLoginForm';
import SellerRegisterForm from '.forms/SellerRegisterForm';
import SellerLoginForm from './forms/SellerLoginForm';
import NotFoundPage from '../pages/NotFoundPage';
import MarketplacePage from './components/MarketPlacePage';


/**
 * Public routes accessible by anyone.
 */
const PublicRouter = () => {
  return (
    <Routes>
      <Route index element={<LandingPage />} />

      <Route path="/about" element={<AboutPage />} />
      <Route path='/marketplace' element={<MarketplacePage />} />
      <Route path="/blog" element={<BlogPage />} />
      <Route path="/contact" element={<ContactPage />} />
      <Route path="/buyer/register" element={<BuyerRegisterForm />} />
      <Route path="/buyer/login" element={<BuyerLoginForm />} />
      <Route path="/seller/register" element={<SellerRegisterForm />} />
      <Route path="/seller/login" element={<SellerLoginForm />} />

       {/* Catch-all for public routes */}
      <Route path="*" element={<NotFoundPage />} />
    </Routes>
  );
};

export default PublicRouter;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\AboutUs.jsx (starts at line 9736)

import React from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  SimpleGrid, 
  VStack,
  Avatar,
  Icon,
  useColorModeValue,
} from '@chakra-ui/react';
import { FaLightbulb, FaUsers, FaHandshake } from 'react-icons/fa';
import './css/about'
import Navbar from './Marketplace/Navbar';
import Footer from './Marketplace/Footer';

// Team member data - can be expanded later
const teamMembers = [
  {
    name: 'Camble Isaac',
    role: 'Founder & CEO',
    imageUrl: 'https://i.pravatar.cc/150?img=12',
  },
];

// Core values to display with icons, titles, and descriptions
const coreValues = [
  {
    icon: FaLightbulb,
    title: 'Innovation',
    description: 'We continuously innovate to bring the best digital marketplace experience.',
  },
  {
    icon: FaUsers,
    title: 'Community',
    description: 'Building a strong and trustworthy community of buyers and sellers.',
  },
  {
    icon: FaHandshake,
    title: 'Trust',
    description: 'Trust and transparency are at the heart of everything we do.',
  },
];

const AboutUs = () => {
  // Color mode aware background and text colors
  const bg = useColorModeValue('gray.50', 'gray.900');
  const textColor = useColorModeValue('gray.700', 'gray.300');

  return (
    <Box bg={bg} minH="100vh">
      {/* Navbar component */}
      <Navbar />

      {/* Main content container */}
      <Container maxW="6xl" py={16} px={6}>
        {/* Page main heading */}
        <Heading
          as="h1"
          size="3xl"
          textAlign="center"
          mb={8}
          fontWeight="extrabold"
          color="teal.600"
        >
          About VirMar
        </Heading>

        {/* Introductory paragraph */}
        <Text fontSize="xl" color={textColor} maxW="3xl" mx="auto" mb={16} textAlign="center">
          VirMar is Rwanda’s first virtual market which is Camble’s first invention marketplace built with love and technology to
          empower buyers and sellers across the country. We strive to bring transparency,
          ease, and innovation to everyday commerce.
        </Text>

        {/* Core values grid */}
        <SimpleGrid columns={[1, null, 3]} spacing={10} mb={20}>
          {coreValues.map(({ icon, title, description }) => (
            <VStack
              key={title}
              bg={useColorModeValue('white', 'gray.700')}
              p={6}
              rounded="xl"
              shadow="md"
              textAlign="center"
              spacing={4}
              role="group" // for accessibility if needed
            >
              {/* Icon */}
              <Icon as={icon} w={12} h={12} color="teal.400" aria-hidden="true" />
              {/* Value title */}
              <Heading as="h3" size="lg" color="teal.600">
                {title}
              </Heading>
              {/* Description */}
              <Text color={textColor}>{description}</Text>
            </VStack>
          ))}
        </SimpleGrid>

        {/* Creator section */}
        <Box textAlign="center" mb={12}>
          <Heading as="h2" size="2xl" mb={4} color="teal.600">
            Meet Our Creator
          </Heading>
          <Text color={textColor} maxW="2xl" mx="auto" fontSize="lg">
            A passionate school boy dedicated to building the best marketplace experience
            for Rwanda.
          </Text>
        </Box>

        {/* Team members grid */}
        <SimpleGrid columns={[1, 2, 3]} spacing={10}>
          {teamMembers.map(({ name, role, imageUrl }) => (
            <VStack
              key={name}
              bg={useColorModeValue('white', 'gray.700')}
              p={6}
              rounded="xl"
              shadow="md"
              spacing={4}
              textAlign="center"
              transition="all 0.3s ease"
              _hover={{ transform: 'scale(1.05)', shadow: 'lg' }}
            >
              {/* Avatar with lazy loading */}
              <Avatar 
                size="xl" 
                src={imageUrl} 
                name={name} 
                imgProps={{ loading: 'lazy' }} 
              />
              <Heading as="h3" size="md" color="teal.600">
                {name}
              </Heading>
              <Text color={textColor}>{role}</Text>
            </VStack>
          ))}
        </SimpleGrid>
      </Container>

      {/* Footer component */}
      <Footer />
    </Box>
  );
};

export default AboutUs;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\BlogPage.jsx (starts at line 9886)

import React from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  HStack,
  Tag,
  Link,
  Image,
  useColorModeValue,
  Fade,
  Divider,
} from '@chakra-ui/react';
import { ArrowForwardIcon } from '@chakra-ui/icons';

// ✅ Navbar and Footer are imported from Marketplace folder
import Navbar from './Marketplace/Navbar';
import Footer from './Marketplace/Footer';

import './css/blog.css'; // Blog-specific styling

// 📝 Mock blog post data – Replace with actual API fetch later
const mockPosts = [
  {
    id: 1,
    title: 'The Future of E-commerce in Rwanda',
    excerpt:
      'Explore how VirMar is shaping the next generation of marketplaces across Kigali, Rubavu, Huye, and beyond.',
    author: 'Camble Isaac',
    date: '2025-07-21',
    tags: ['E-commerce', 'Rwanda', 'Innovation'],
    imageUrl:
      'https://images.unsplash.com/photo-1611784729110-2b3e1c2f2fd1?auto=format&fit=crop&w=1350&q=80',
  },
  {
    id: 2,
    title: 'How VirMar Handles Price Elasticity in Real Time',
    excerpt:
      'From demand scores to inflation tracking — see how our platform empowers sellers with smart data.',
    author: 'VirMar Dev Team',
    date: '2025-07-19',
    tags: ['Price', 'Data', 'Seller Insights'],
    imageUrl:
      'https://images.unsplash.com/photo-1591696331115-44cbf2bff7f1?auto=format&fit=crop&w=1350&q=80',
  },
];

const BlogPage = () => {
  // Dynamic background based on color mode (light/dark)
  const bg = useColorModeValue('#f7f9fb', '#0f1115');

  return (
    <Box bg={bg} minH="100vh">
      <Navbar />

      <Container maxW="7xl" py={16}>
        <Heading
          as="h1"
          fontSize={['3xl', '4xl', '5xl']}
          textAlign="center"
          mb={12}
          fontWeight="extrabold"
        >
          VirMar Blog & Economic Stories 📊
        </Heading>

        {/* Blog Post Cards Section */}
        <VStack spacing={14} align="stretch">
          {mockPosts.map((post, index) => (
            <Fade in key={post.id} delay={index * 0.2}>
              <Box
                className="blog-card"
                p={6}
                borderRadius="2xl"
                boxShadow="lg"
                bg={useColorModeValue('white', 'gray.800')}
                _hover={{
                  transform: 'scale(1.01)',
                  transition: '0.3s ease-in-out',
                }}
              >
                <HStack spacing={6} align="flex-start" flexDir={['column', 'row']}>
                  {/* Blog Image */}
                  <Box flexShrink={0} w={['100%', '45%']}>
                    <Image
                      src={post.imageUrl}
                      alt={post.title}
                      borderRadius="2xl"
                      className="blog-image"
                    />
                  </Box>

                  {/* Blog Text Content */}
                  <VStack align="start" spacing={3} w="100%">
                    <Link
                      href={`/blog/${post.id}`}
                      fontSize="2xl"
                      fontWeight="bold"
                      className="blog-title"
                    >
                      {post.title}
                    </Link>
                    <Text fontSize="md" color="gray.600">
                      {post.excerpt}
                    </Text>

                    {/* Tags */}
                    <HStack spacing={2} pt={1}>
                      {post.tags.map((tag) => (
                        <Tag key={tag} colorScheme="purple" variant="solid">
                          {tag}
                        </Tag>
                      ))}
                    </HStack>

                    {/* Author + Date */}
                    <Text fontSize="sm" color="gray.500" fontStyle="italic">
                      ✍️ {post.author} &nbsp;&nbsp; • &nbsp;&nbsp; 🗓️ {post.date}
                    </Text>

                    {/* Read More Link */}
                    <Link
                      href={`/blog/${post.id}`}
                      fontSize="sm"
                      color="teal.500"
                      fontWeight="medium"
                      mt={2}
                    >
                      Read more <ArrowForwardIcon mx="2px" />
                    </Link>
                  </VStack>
                </HStack>
              </Box>
            </Fade>
          ))}
        </VStack>
      </Container>

      <Divider mt={20} />
      <Footer />
    </Box>
  );
};

export default BlogPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\ContactPage.jsx (starts at line 10034)

// src/pages/ContactPage.jsx
import React from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  VStack,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  Button,
  HStack,
  Icon,
  useToast,
} from '@chakra-ui/react';
import { FaPhone, FaEnvelope, FaMapMarkerAlt } from 'react-icons/fa';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';

const ContactPage = () => {
  const toast = useToast();

  const handleSubmit = (e) => {
    e.preventDefault();
    toast({
      title: 'Message sent!',
      description: "We'll get back to you soon.",
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
    e.target.reset(); // reset the form
  };

  return (
    <Box bg="gray.50" minH="100vh">
      <Navbar />
      <Container maxW="7xl" py={{ base: '8', md: '16' }}>
        <VStack spacing={10} align="start">
          <Heading size="2xl" color="brand.700">
            Contact Us
          </Heading>
          <Text fontSize="lg" color="gray.600">
            We'd love to hear from you. Whether you're a buyer, seller, or just curious about VirMar, reach out!
          </Text>

          <HStack spacing={10} flexWrap="wrap" w="100%" align="start">
            {/* Contact Details */}
            <VStack align="start" spacing={4} flex="1">
              <HStack>
                <Icon as={FaPhone} color="brand.500" />
                <Text>+250 793 680 614</Text>
              </HStack>
              <HStack>
                <Icon as={FaEnvelope} color="brand.500" />
                <Text>hscamble@gmail.com</Text>
              </HStack>
              <HStack>
                <Icon as={FaMapMarkerAlt} color="brand.500" />
                <Text>Kigali, Rwanda</Text>
              </HStack>
            </VStack>

            {/* Contact Form */}
            <Box bg="white" p={6} rounded="md" shadow="md" flex="1" w="100%" maxW="500px">
              <form onSubmit={handleSubmit}>
                <VStack spacing={4}>
                  <FormControl isRequired>
                    <FormLabel>Name</FormLabel>
                    <Input type="text" placeholder="Your name" />
                  </FormControl>

                  <FormControl isRequired>
                    <FormLabel>Email</FormLabel>
                    <Input type="email" placeholder="you@example.com" />
                  </FormControl>

                  <FormControl isRequired>
                    <FormLabel>Message</FormLabel>
                    <Textarea placeholder="How can we help?" rows={5} />
                  </FormControl>

                  <Button type="submit" colorScheme="brand" width="full">
                    Send Message
                  </Button>
                </VStack>
              </form>
            </Box>
          </HStack>
        </VStack>
      </Container>
      <Footer />
    </Box>
  );
};

export default ContactPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\LandingPage.jsx (starts at line 10134)

import React from 'react';
import { Box, useColorModeValue } from '@chakra-ui/react';
import LandingNavbar from './landingpage/Navbar';
import Footer from './landingpage/Footer';
import HeroSection from './landingpage/HeroSection';
import ProductSearchBar from './landingpage/ProductSearchBar';
import HowItWorks from './landingpage/HowItWorks';
import StatsSection from './landingpage/StatsSection';
import FeaturesSection from './landingpage/FeaturesSection';
import TestimonialsSection from './landingpage/TestimonialsSection';
import CallToAction from './landingpage/CallToAction';

const LandingPage = () => {
  const bg = useColorModeValue('white', 'gray.800');

  return (
    <Box className="landing-page" bg={bg}>
      <Navbar />
      <HeroSection />
      <ProductSearchBar />
      <HowItWorks />
      <StatsSection />
      <FeaturesSection />
      <TestimonialsSection />
      <CallToAction />
      <Footer />
    </Box>
  );
};

export default LandingPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\MarketplacePage.jsx (starts at line 10166)

import React, { useState, useEffect, useMemo } from 'react';
import {
  Box,
  Container,
  Heading,
  useBreakpointValue,
  useDisclosure,
  Spinner,
  Center,
  Text,
} from '@chakra-ui/react';
import axios from 'axios';
import './css/market.css';  // Adjust path if needed


import Navbar from './landingpage/Navbar';
import Footer from './landingpage/Footer';

import MarketplaceStats from './Marketplace/MarketplaceStats';
import MarketplaceFilters from './Marketplace/MarketplaceFilters';
import ProductList from './Marketplace/ProductList';
import ProductDetailsModal from './Marketplace/ProductDetailsModal';

/**
 * Main marketplace page component - displays products, filters, stats, and modal
 */
const MarketplacePage = () => {
  const isMobile = useBreakpointValue({ base: true, md: false });
  const { isOpen, onOpen, onClose } = useDisclosure();
  
  // State: data
  const [sellers, setSellers] = useState([]);
  const [allProducts, setAllProducts] = useState([]);

  // State: UI & filters
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  
  const [filters, setFilters] = useState({
    category: '',
    location: '',
    maxPrice: 3000,
    sortBy: '',
    searchTerm: '',
  });

  // Static options (could be fetched from backend later)
  const categories = ['Roots', 'Fruits', 'Legumes', 'Dairy'];
  const locations = ['Kigali', 'Rubavu', 'Huye'];

  /**
   * Fetch marketplace data from backend API on mount
   * - Expects { sellers: [], products: [] } in response
   */
  useEffect(() => {
    setLoading(true);
    setError(null);

    axios
      .get('http://localhost:5000/api/public', { withCredentials: true })
      .then((res) => {
        const data = res.data;

        setSellers(data.sellers ?? []);

        // Normalize products for frontend usage, especially price parsing
        const mappedProducts = (data.products ?? []).map((p) => {
          let priceAmount = 0;
          let priceLabel = '₣0';

          if (p.price) {
            if (typeof p.price === 'object') {
              priceAmount = p.price.amount ?? 0;
              priceLabel = `₣${priceAmount}`;
            } else if (typeof p.price === 'number') {
              priceAmount = p.price;
              priceLabel = `₣${priceAmount}`;
            } else if (typeof p.price === 'string') {
              const num = p.price.replace(/[^\d]/g, '');
              priceAmount = num ? parseInt(num, 10) : 0;
              priceLabel = p.price.startsWith('₣') ? p.price : `₣${priceAmount}`;
            }
          }

          return {
            _id: p._id,
            name: p.name,
            price: priceAmount,
            priceLabel,
            category: p.category || 'Uncategorized',
            location: p.location || 'Unknown',
            available: p.status === 'available',
            quantity: p.quantity ?? 0,
            img: p.img || '/products/default.png',
          };
        });

        setAllProducts(mappedProducts);
      })
      .catch((err) => {
        console.error('Failed to fetch marketplace data:', err);
        setError('Failed to load marketplace data.');
      })
      .finally(() => setLoading(false));
  }, []);

  /**
   * Filter and sort products based on filters state
   */
  const filteredProducts = useMemo(() => {
    let filtered = allProducts;

    if (filters.category) {
      filtered = filtered.filter((p) => p.category === filters.category);
    }
    if (filters.location) {
      filtered = filtered.filter((p) => p.location === filters.location);
    }
    filtered = filtered.filter((p) => p.price <= filters.maxPrice);

    if (filters.searchTerm) {
      filtered = filtered.filter((p) =>
        p.name.toLowerCase().includes(filters.searchTerm.toLowerCase())
      );
    }

    if (filters.sortBy === 'priceAsc') {
      filtered = filtered.slice().sort((a, b) => a.price - b.price);
    } else if (filters.sortBy === 'priceDesc') {
      filtered = filtered.slice().sort((a, b) => b.price - a.price);
    } else if (filters.sortBy === 'nameAsc') {
      filtered = filtered.slice().sort((a, b) => a.name.localeCompare(b.name));
    }

    return filtered;
  }, [allProducts, filters]);

  /**
   * Handler for showing product details modal
   */
  const handleShowDetails = (product) => {
    setSelectedProduct(product);
    onOpen();
  };

  /**
   * Handler for updating filter values
   */
  const handleFilterChange = (name, value) => {
    setFilters((prev) => ({ ...prev, [name]: value }));
  };

  // Market stats data shown in stats section
  const marketStats = [
    { label: 'Transactions', value: '1,042', helpText: '+12% this week' },
    { label: 'Avg Budget', value: '₣28,300', helpText: 'Based on buyer wallets' },
    { label: 'Total Products', value: allProducts.length.toString(), helpText: 'Dynamic count' },
    { label: 'Market Trust Index', value: '88%', helpText: 'Up from 83% last month' },
  ];

  return (
    <Box bg="gray.50" minH="100vh">
      <Navbar />

      <Container maxW="8xl" py={10}>
        <Heading size="xl" mb={6} textAlign="center" color="brand.600">
          VirMar Marketplace
        </Heading>

        {/* Marketplace Stats */}
        <MarketplaceStats stats={marketStats} />

        {/* Show loading spinner or error if needed */}
        {loading && (
          <Center py={20}>
            <Spinner size="xl" color="brand.500" />
          </Center>
        )}

        {error && (
          <Center py={20}>
            <Text color="red.500" fontWeight="bold">
              {error}
            </Text>
          </Center>
        )}

        {/* Filters + Product List */}
        {!loading && !error && (
          <>
            <MarketplaceFilters
              categories={categories}
              locations={locations}
              filters={filters}
              onFilterChange={handleFilterChange}
              maxPrice={filters.maxPrice}
            />

            <ProductList products={filteredProducts} onShowDetails={handleShowDetails} />
          </>
        )}

        {/* Product Details Modal */}
        <ProductDetailsModal
          isOpen={isOpen}
          onClose={onClose}
          product={selectedProduct}
        />
      </Container>

      <Footer />
    </Box>
  );
};

export default MarketplacePage;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\css\about.css (starts at line 10384)

.blog-card {
  transition: all 0.4s ease-in-out;
}

.blog-image {
  width: 100%;
  height: auto;
  transition: all 0.4s ease;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
}

.blog-card:hover .blog-image {
  transform: scale(1.03);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25);
}

.blog-title {
  color: #2c5282;
  transition: color 0.3s ease;
}

.blog-title:hover {
  color: #3182ce;
  text-decoration: underline;
}
.blog-card {
  transition: all 0.4s ease-in-out;
}

.blog-image {
  width: 100%;
  height: auto;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
}

.blog-card:hover .blog-image {
  transform: scale(1.02);
  box-shadow: 0 12px 28px rgba(0, 0, 0, 0.35);
}

.blog-title {
  color: #2a4365;
  transition: color 0.3s ease;
}

.blog-title:hover {
  color: #3182ce;
  text-decoration: underline;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\css\blog.css (starts at line 10435)

.blog-card {
  transition: all 0.4s ease-in-out;
}

.blog-image {
  width: 100%;
  height: auto;
  transition: all 0.4s ease;
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
}

.blog-card:hover .blog-image {
  transform: scale(1.03);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.25);
}

.blog-title {
  color: #2c5282;
  transition: color 0.3s ease;
}

.blog-title:hover {
  color: #3182ce;
  text-decoration: underline;
}
.blog-card {
  transition: all 0.4s ease-in-out;
}

.blog-image {
  width: 100%;
  height: auto;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
}

.blog-card:hover .blog-image {
  transform: scale(1.02);
  box-shadow: 0 12px 28px rgba(0, 0, 0, 0.35);
}

.blog-title {
  color: #2a4365;
  transition: color 0.3s ease;
}

.blog-title:hover {
  color: #3182ce;
  text-decoration: underline;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\css\market.css (starts at line 10486)

.marketplace-container {
  padding: 2rem;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #f9f9f9;
}

.market-title {
  text-align: center;
  font-size: 2.5rem;
  font-weight: bold;
  margin-bottom: 2rem;
  color: #222;
}

/* Sellers */
.market-sellers,
.market-buyers,
.market-products {
  margin-bottom: 3rem;
}

h2 {
  font-size: 1.8rem;
  margin-bottom: 1.5rem;
  color: #333;
}

/* Sellers */
.seller-list {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

.seller-card {
  background-color: #fff;
  border: 1px solid #ddd;
  border-left: 4px solid #007BFF;
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 1px 5px rgba(0,0,0,0.06);
  transition: transform 0.2s;
}
.seller-card:hover {
  transform: translateY(-3px);
}

/* Buyers */
.buyer-list {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.buyer-card {
  background-color: #fff;
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 10px;
  flex: 1 1 200px;
  text-align: center;
  box-shadow: 0 1px 5px rgba(0,0,0,0.05);
}

.buyer-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  margin-bottom: 0.5rem;
}

/* Products */
.product-list {
  display: grid;
  gap: 1.5rem;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

.product-card {
  background: #fff;
  border-radius: 10px;
  padding: 1rem;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.04);
  border: 1px solid #e0e0e0;
  text-align: center;
}

.product-img {
  width: 100%;
  height: 160px;
  object-fit: cover;
  border-radius: 8px;
  margin-bottom: 1rem;
}

.market-loading,
.market-error {
  text-align: center;
  font-size: 1.2rem;
  padding: 3rem;
  color: #888;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\CallToAction.jsx (starts at line 10590)

// CallToAction.jsx
import React from 'react';
import { Box, Heading, Text, Button } from '@chakra-ui/react';

const CallToAction = () => (
  <Box textAlign="center" py={12}>
    <Heading mb={4}>Ready to get started?</Heading>
    <Text fontSize="lg" mb={6}>Sign up today and join thousands of users on VirMar.</Text>
    <Button colorScheme="blue" size="lg">Get Started</Button>
  </Box>
);

export default CallToAction;


================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\FeatureSection.jsx (starts at line 10603)

// FeaturesSection.jsx
import React from 'react';
import { Box, Heading, SimpleGrid, Text } from '@chakra-ui/react';

const FeaturesSection = () => (
  <Box py={12} px={4} textAlign="center">
    <Heading mb={6}>Platform Features</Heading>
    <SimpleGrid columns={{ base: 1, md: 3 }} spacing={6}>
      <Box><Heading size="sm">Escrow System</Heading><Text>Secure payment between buyer and seller.</Text></Box>
      <Box><Heading size="sm">Review System</Heading><Text>Leave feedback for transparency.</Text></Box>
      <Box><Heading size="sm">Live Chat</Heading><Text>Talk in real-time before trading.</Text></Box>
    </SimpleGrid>
  </Box>
);

export default FeaturesSection;


================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\Footer.jsx (starts at line 10619)

import React from 'react';
import {
  Box,
  Container,
  SimpleGrid,
  Stack,
  Text,
  Link,
  VisuallyHidden,
  chakra,
  useColorModeValue,
  HStack,
  IconButton,
} from '@chakra-ui/react';
import { FaFacebook, FaTwitter, FaInstagram, FaLinkedin } from 'react-icons/fa';

const SocialButton = ({ children, label, href }) => {
  return (
    <chakra.button
      bg={useColorModeValue('gray.200', 'gray.700')}
      rounded="full"
      w={10}
      h={10}
      cursor="pointer"
      as="a"
      href={href}
      target="_blank"
      rel="noopener noreferrer"
      display="inline-flex"
      alignItems="center"
      justifyContent="center"
      transition="background 0.3s ease"
      _hover={{ bg: useColorModeValue('teal.400', 'teal.600'), color: 'white' }}
      aria-label={label}
    >
      <VisuallyHidden>{label}</VisuallyHidden>
      {children}
    </chakra.button>
  );
};

const Footer = () => {
  const linkColor = useColorModeValue('gray.600', 'gray.200');
  const linkHoverColor = useColorModeValue('teal.600', 'teal.300');

  return (
    <Box
      bg={useColorModeValue('gray.100', 'gray.900')}
      color={useColorModeValue('gray.700', 'gray.200')}
      mt={20}
      pt={10}
      pb={6}
      borderTop="1px solid"
      borderColor={useColorModeValue('gray.300', 'gray.700')}
    >
      <Container as={Stack} maxW="6xl" spacing={8}>
        <SimpleGrid
          templateColumns={{ sm: '1fr 1fr', md: '2fr 1fr 1fr 1fr' }}
          spacing={8}
        >
          <Stack spacing={4}>
            <Text fontWeight="bold" fontSize="xl" color="teal.600">
              VirMar
            </Text>
            <Text fontSize="sm" maxW="300px" color={linkColor}>
              Empowering Rwandan markets with digital innovation — buy, sell, and grow with confidence.
            </Text>
            <HStack spacing={4} mt={4}>
              <SocialButton label="Facebook" href="https://facebook.com/isaacchris">
                <FaFacebook />
              </SocialButton>
              <SocialButton label="Twitter" href="https://twitter.com/yourhandle">
                <FaTwitter />
              </SocialButton>
              <SocialButton label="Instagram" href="https://www.instagram.com/camble_coding/">
                <FaInstagram />
              </SocialButton>
              <SocialButton label="LinkedIn" href="https://linkedin.com/company/yourcompany">
                <FaLinkedin />
              </SocialButton>
            </HStack>
          </Stack>

          <Stack align="flex-start">
            <Text fontWeight="bold" fontSize="lg" mb={2} color="teal.600">
              Quick Links
            </Text>
            <Link href="/" color={linkColor} _hover={{ color: linkHoverColor }}>
              Home
            </Link>
            <Link href="/blog" color={linkColor} _hover={{ color: linkHoverColor }}>
              Blog
            </Link>
            <Link href="/about" color={linkColor} _hover={{ color: linkHoverColor }}>
              About Us
            </Link>
            <Link href="/contact" color={linkColor} _hover={{ color: linkHoverColor }}>
              Contact
            </Link>
          </Stack>

          <Stack align="flex-start">
            <Text fontWeight="bold" fontSize="lg" mb={2} color="teal.600">
              Support
            </Text>
            <Link href="/faq" color={linkColor} _hover={{ color: linkHoverColor }}>
              FAQ
            </Link>
            <Link href="/help" color={linkColor} _hover={{ color: linkHoverColor }}>
              Help Center
            </Link>
            <Link href="/privacy" color={linkColor} _hover={{ color: linkHoverColor }}>
              Privacy Policy
            </Link>
            <Link href="/terms" color={linkColor} _hover={{ color: linkHoverColor }}>
              Terms of Service
            </Link>
          </Stack>

          <Stack align="flex-start">
            <Text fontWeight="bold" fontSize="lg" mb={2} color="teal.600">
              Contact
            </Text>
            <Text color={linkColor}>Email: hscamble@gmail.com</Text>
            <Text color={linkColor}>Phone: +250 793 680614</Text>
            <Text color={linkColor}>huye, Rwanda</Text>
          </Stack>
        </SimpleGrid>

        <Text fontSize="sm" textAlign="center" pt={6} color={linkColor}>
          © {new Date().getFullYear()} VirMar. All rights reserved.
        </Text>
      </Container>
    </Box>
  );
};

export default Footer;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\HeroSection.jsx (starts at line 10758)

import React from 'react';
import {
  Box,
  Container,
  Stack,
  Heading,
  Text,
  Button,
  HStack,
  VStack,
  Flex,
  Image,
  useColorModeValue,
} from '@chakra-ui/react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import {
  FiShoppingBag,
  FiTrendingUp,
} from 'react-icons/fi';

const MotionBox = motion(Box);

const HeroSection = () => {
  return (
    <Container maxW={'7xl'} py={20}>
      <Stack
        align={'center'}
        spacing={{ base: 8, md: 10 }}
        py={{ base: 20, md: 28 }}
        direction={{ base: 'column', md: 'row' }}
      >
        <Stack flex={1} spacing={{ base: 5, md: 10 }}>
          <MotionBox initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
            <Heading lineHeight={1.1} fontWeight={700} fontSize={{ base: '3xl', sm: '4xl', lg: '6xl' }}>
              <Text as={'span'}>The Future of</Text><br />
              <Text as={'span'} color={'brand.600'}>Digital Commerce</Text>
            </Heading>
          </MotionBox>

          <MotionBox initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.2 }}>
            <Text color={'gray.500'} fontSize={'xl'} maxW={'3xl'}>
              Join Rwanda&apos;s most trusted marketplace where innovation meets security.
              Connect with verified sellers, discover unique products, and experience seamless transactions with our advanced escrow system.
            </Text>
          </MotionBox>

          <MotionBox initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.4 }}>
            <Stack spacing={{ base: 4, sm: 6 }} direction={{ base: 'column', sm: 'row' }}>
              <Button as={Link} to="/buyer/register" size={'lg'} fontWeight={'600'} px={8} colorScheme={'brand'} leftIcon={<FiShoppingBag />}>
                Start Shopping
              </Button>
              <Button as={Link} to="/seller/register" size={'lg'} fontWeight={'600'} px={8} variant={'outline'} colorScheme={'brand'} leftIcon={<FiTrendingUp />}>
                Start Selling
              </Button>
            </Stack>
          </MotionBox>

          <MotionBox initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5, delay: 0.6 }}>
            <HStack spacing={8} pt={4}>
              <VStack spacing={1}>
                <Text fontSize="2xl" fontWeight="bold" color="brand.600">50K+</Text>
                <Text fontSize="sm" color="gray.500">Active Users</Text>
              </VStack>
              <VStack spacing={1}>
                <Text fontSize="2xl" fontWeight="bold" color="brand.600">10K+</Text>
                <Text fontSize="sm" color="gray.500">Products</Text>
              </VStack>
              <VStack spacing={1}>
                <Text fontSize="2xl" fontWeight="bold" color="brand.600">99.9%</Text>
                <Text fontSize="sm" color="gray.500">Uptime</Text>
              </VStack>
            </HStack>
          </MotionBox>
        </Stack>

        <Flex flex={1} justify={'center'} align={'center'} position={'relative'} w={'full'}>
          <MotionBox initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.5, delay: 0.6 }}>
            <Image
              alt={'Hero Image'}
              fit={'cover'}
              w={'100%'}
              h={'100%'}
              borderRadius={'2xl'}
              boxShadow={'2xl'}
              src={'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80'}
            />
          </MotionBox>
        </Flex>
      </Stack>
    </Container>
  );
};

export default HeroSection;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\HowItWorks.jsx (starts at line 10854)

import React from 'react';
import {
  Box,
  Heading,
  VStack,
  Text,
  Icon,
  SimpleGrid,
  useColorModeValue
} from '@chakra-ui/react';
import {
  FiSearch,
  FiShield,
  FiTruck,
  FiThumbsUp
} from 'react-icons/fi';

const HowItWorks = () => {
  const steps = [
    { icon: FiSearch, title: 'Discover Products', description: 'Browse a wide variety of products from verified sellers.' },
    { icon: FiShield, title: 'Secure Escrow Payment', description: 'Your payment is safely held until you confirm delivery.' },
    { icon: FiTruck, title: 'Fast & Reliable Delivery', description: 'Track your orders and get deliveries on time.' },
    { icon: FiThumbsUp, title: 'Rate & Build Trust', description: 'Leave ratings to help build a trustworthy community.' }
  ];

  return (
    <Box py={16} px={4} bg={useColorModeValue('gray.50', 'gray.700')}>
      <Heading textAlign="center" mb={12} fontSize="3xl" fontWeight="bold">
        How VirMar Works
      </Heading>
      <SimpleGrid columns={{ base: 1, md: 4 }} spacing={10} maxW="7xl" mx="auto">
        {steps.map(({ icon, title, description }, idx) => (
          <VStack key={idx} spacing={4} textAlign="center" px={4}>
            <Box
              bg="brand.500"
              color="white"
              p={5}
              rounded="full"
              fontSize="3xl"
              boxShadow="md"
            >
              <Icon as={icon} />
            </Box>
            <Text fontWeight="bold" fontSize="lg">{title}</Text>
            <Text color={useColorModeValue('gray.600', 'gray.300')}>{description}</Text>
          </VStack>
        ))}
      </SimpleGrid>
    </Box>
  );
};

export default HowItWorks;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\Navbar.jsx (starts at line 10908)

import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import {
  Box,
  Flex,
  HStack,
  IconButton,
  Button,
  useDisclosure,
  Stack,
  Text,
  Container,
  useColorModeValue,
} from '@chakra-ui/react';
import { HamburgerIcon, CloseIcon, SearchIcon } from '@chakra-ui/icons';

// NavLink Component with active styling
const NavLink = ({ to, children, isActive }) => (
  <Box
    as={Link}
    to={to}
    px={3}
    py={2}
    rounded="md"
    fontWeight={isActive ? 'bold' : 'medium'}
    color={isActive ? 'brand.600' : 'gray.600'}
    _hover={{
      bg: 'gray.100',
      color: 'brand.700',
      transform: 'translateY(-1px)',
    }}
    transition="all 0.2s"
    bg={isActive ? 'gray.100' : 'transparent'}
  >
    {children}
  </Box>
);

const LandingNavbar = () => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const location = useLocation();
  const isActive = (path) => location.pathname === path;

  return (
    <Box
      position="sticky"
      top="0"
      zIndex="1000"
      bg={useColorModeValue('white', 'gray.800')}
      boxShadow="sm"
      borderBottom="1px solid"
      borderColor={useColorModeValue('gray.200', 'gray.700')}
    >
      <Container maxW="7xl">
        <Flex h={16} alignItems="center" justifyContent="space-between">
          {/* Mobile menu toggle */}
          <IconButton
            size="md"
            icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}
            aria-label="Toggle Menu"
            display={{ md: 'none' }}
            onClick={isOpen ? onClose : onOpen}
            variant="ghost"
          />

          {/* Logo and nav links */}
          <HStack spacing={4} alignItems="center">
            {/* Logo */}
            <Box
              as={Link}
              to="/"
              display="flex"
              alignItems="center"
              _hover={{ textDecoration: 'none' }}
            >
              <Box
                w={10}
                h={10}
                bgGradient="linear(to-br, brand.400, brand.600)"
                borderRadius="lg"
                display="flex"
                alignItems="center"
                justifyContent="center"
              >
                <Text color="white" fontWeight="bold" fontSize="md">
                  VM
                </Text>
              </Box>
              <Text fontSize="lg" fontWeight="bold" color={useColorModeValue('gray.800', 'white')} ml={2}>
                VirMar
              </Text>
            </Box>

            {/* Desktop nav links */}
            <HStack spacing={2} display={{ base: 'none', md: 'flex' }} ml={5}>
              <NavLink to="/" isActive={isActive('/')}>
                Home
              </NavLink>
              <NavLink to="/marketplace" isActive={isActive('/marketplace')}>
                Marketplace
              </NavLink>
              <NavLink to="/categories" isActive={isActive('/categories')}>
                Categories
              </NavLink>
              <NavLink to="/about" isActive={isActive('/about')}>
                About
              </NavLink>
              <NavLink to="/contact" isActive={isActive('/contact')}>
                Contact
              </NavLink>
            </HStack>
          </HStack>

          {/* Right side: Search and auth buttons */}
          <Flex alignItems="center" gap={2}>
            <IconButton
              icon={<SearchIcon />}
              variant="ghost"
              aria-label="Search"
              size="md"
              // Optional: Add onClick to open a search modal here
            />

            <HStack spacing={2} display={{ base: 'none', md: 'flex' }}>
              <Button as={Link} to="/buyer/login" variant="ghost" size="sm">
                Sign In
              </Button>
              <Button as={Link} to="/buyer/register" size="sm" colorScheme="blue">
                Get Started
              </Button>
            </HStack>
          </Flex>
        </Flex>

        {/* Mobile menu */}
        {isOpen && (
          <Box pb={4} display={{ md: 'none' }}>
            <Stack spacing={2}>
              <NavLink to="/" isActive={isActive('/')}>
                Home
              </NavLink>
              <NavLink to="/marketplace" isActive={isActive('/marketplace')}>
                Marketplace
              </NavLink>
              <NavLink to="/categories" isActive={isActive('/categories')}>
                Categories
              </NavLink>
              <NavLink to="/about" isActive={isActive('/about')}>
                About
              </NavLink>
              <NavLink to="/contact" isActive={isActive('/contact')}>
                Contact
              </NavLink>
              <Button as={Link} to="/buyer/login" variant="ghost" size="sm">
                Sign In
              </Button>
              <Button as={Link} to="/buyer/register" colorScheme="blue" size="sm">
                Get Started
              </Button>
            </Stack>
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default LandingNavbar;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\ProductSearchBar.jsx (starts at line 11077)

import React, { useState } from 'react';
import {
  Box,
  HStack,
  Input,
  Button,
  useColorModeValue
} from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import { FiSearch } from 'react-icons/fi';

const ProductSearchBar = () => {
  const [query, setQuery] = useState('');
  const navigate = useNavigate();

  const handleSearch = () => {
    if (!query.trim()) return;
    navigate(`/buyer/search?query=${encodeURIComponent(query)}`);
  };

  return (
    <Box maxW="7xl" mx="auto" p={6} rounded="lg" boxShadow="md" mb={12} bg={useColorModeValue('white', 'gray.700')}>
      <HStack maxW="600px" mx="auto">
        <Input
          placeholder="Search for products..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          size="lg"
          onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
          bg={useColorModeValue('gray.100', 'gray.600')}
        />
        <Button colorScheme="brand" size="lg" onClick={handleSearch} leftIcon={<FiSearch />}>
          Search
        </Button>
      </HStack>
    </Box>
  );
};

export default ProductSearchBar;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\StatsSection.jsx (starts at line 11118)

import React from 'react';
import {
  Box,
  Container,
  Heading,
  SimpleGrid,
  Text,
  Flex,
  useColorModeValue
} from '@chakra-ui/react';
import {
  FiTrendingUp,
  FiUsers,
  FiShoppingBag,
  FiStar
} from 'react-icons/fi';

const StatCard = ({ title, stat, icon, helpText }) => (
  <Box
    px={8}
    py={5}
    shadow="xl"
    border="1px solid"
    borderColor={useColorModeValue('gray.200', 'gray.500')}
    rounded="lg"
    bg={useColorModeValue('white', 'gray.800')}
  >
    <Flex justify="space-between">
      <Box>
        <Text fontWeight="medium">{title}</Text>
        <Heading fontSize="2xl">{stat}</Heading>
        <Text>{helpText}</Text>
      </Box>
      <Box my="auto" color={useColorModeValue('gray.800', 'gray.200')}>
        {icon}
      </Box>
    </Flex>
  </Box>
);

const StatsSection = () => (
  <Box bg={useColorModeValue('gray.50', 'gray.900')} py={16}>
    <Container maxW="7xl">
      <SimpleGrid columns={{ base: 1, md: 4 }} spacing={10}>
        <StatCard title="Total Sales" stat="$2.5M" icon={<FiTrendingUp size="3em" />} helpText="23% from last month" />
        <StatCard title="Active Sellers" stat="1,200" icon={<FiUsers size="3em" />} helpText="12% from last month" />
        <StatCard title="Products Listed" stat="15,000" icon={<FiShoppingBag size="3em" />} helpText="8% from last month" />
        <StatCard title="Customer Satisfaction" stat="4.9/5" icon={<FiStar size="3em" />} helpText="Based on 10k+ reviews" />
      </SimpleGrid>
    </Container>
  </Box>
);

export default StatsSection;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\landingpage\TestmonialSection.jsx (starts at line 11173)

// TestimonialsSection.jsx
import React from 'react';
import { Box, Heading, Text, SimpleGrid } from '@chakra-ui/react';

const TestimonialsSection = () => (
  <Box py={12} px={4} textAlign="center">
    <Heading mb={6}>What Our Users Say</Heading>
    <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>
      <Box>
        <Text fontSize="lg">"VirMar made my first trade online super smooth and safe!"</Text>
        <Text mt={2} fontWeight="bold">– A Happy Buyer</Text>
      </Box>
      <Box>
        <Text fontSize="lg">"The escrow feature is a game changer. Highly recommend!"</Text>
        <Text mt={2} fontWeight="bold">– Trusted Seller</Text>
      </Box>
    </SimpleGrid>
  </Box>
);

export default TestimonialsSection;


================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\Marketplace\MarketplaceFilters.jsx (starts at line 11194)

import React from 'react';
import {
  Box,
  SimpleGrid,
  Select,
  Input,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  FormControl,
  FormLabel,
} from '@chakra-ui/react';

/**
 * Filters UI: category, location, max price, search, sorting
 */
const MarketplaceFilters = ({
  categories,
  locations,
  filters,
  onFilterChange,
  maxPrice,
}) => {
  return (
    <Box bg="white" p={6} rounded="md" boxShadow="md" mb={8}>
      <SimpleGrid columns={{ base: 1, md: 4 }} spacing={6}>

        <FormControl>
          <FormLabel>Category</FormLabel>
          <Select
            placeholder="All categories"
            value={filters.category}
            onChange={(e) => onFilterChange('category', e.target.value)}
          >
            {categories.map((c) => (
              <option key={c} value={c}>
                {c}
              </option>
            ))}
          </Select>
        </FormControl>

        <FormControl>
          <FormLabel>Location</FormLabel>
          <Select
            placeholder="All locations"
            value={filters.location}
            onChange={(e) => onFilterChange('location', e.target.value)}
          >
            {locations.map((l) => (
              <option key={l} value={l}>
                {l}
              </option>
            ))}
          </Select>
        </FormControl>

        <FormControl>
          <FormLabel>Max Price: ₣{maxPrice}</FormLabel>
          <Slider
            min={0}
            max={5000}
            step={100}
            value={maxPrice}
            onChange={(val) => onFilterChange('maxPrice', val)}
          >
            <SliderTrack bg="gray.200">
              <SliderFilledTrack bg="brand.500" />
            </SliderTrack>
            <SliderThumb boxSize={6} />
          </Slider>
        </FormControl>

        <FormControl>
          <FormLabel>Sort By</FormLabel>
          <Select
            placeholder="Default"
            value={filters.sortBy}
            onChange={(e) => onFilterChange('sortBy', e.target.value)}
          >
            <option value="priceAsc">Price: Low to High</option>
            <option value="priceDesc">Price: High to Low</option>
            <option value="nameAsc">Name: A to Z</option>
          </Select>
        </FormControl>
      </SimpleGrid>

      {/* Search bar */}
      <Box mt={6}>
        <Input
          placeholder="Search products by name..."
          value={filters.searchTerm}
          onChange={(e) => onFilterChange('searchTerm', e.target.value)}
        />
      </Box>
    </Box>
  );
};

export default MarketplaceFilters;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\Marketplace\MarketplaceStats.jsx (starts at line 11296)

import React from 'react';
import { SimpleGrid, Stat, StatLabel, StatNumber, StatHelpText, Box } from '@chakra-ui/react';

/**
 * Marketplace statistics section showing key market figures
 */
const MarketplaceStats = ({ stats }) => (
  <SimpleGrid columns={{ base: 1, sm: 2, md: 4 }} spacing={6} mb={10}>
    {stats.map((stat, i) => (
      <Stat key={i} p={5} bg="white" boxShadow="sm" borderRadius="lg" textAlign="center">
        <StatLabel>{stat.label}</StatLabel>
        <StatNumber fontSize="2xl">{stat.value}</StatNumber>
        <StatHelpText>{stat.helpText}</StatHelpText>
      </Stat>
    ))}
  </SimpleGrid>
);

export default MarketplaceStats;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\Marketplace\ProductDetailsModal.jsx (starts at line 11316)

import React from 'react';
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalCloseButton,
  ModalBody,
  Image,
  Text,
  Badge,
  Stack,
  Box,
  Button,
  Flex,
  useColorModeValue,
} from '@chakra-ui/react';

/**
 * Modal to display selected product details
 */
const ProductDetailsModal = ({ isOpen, onClose, product }) => {
  if (!product) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="lg" isCentered>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>{product.name}</ModalHeader>
        <ModalCloseButton />
        <ModalBody>
          <Flex direction={{ base: 'column', md: 'row' }} gap={6}>
            <Box flex="1">
              <Image
                src={product.img}
                alt={product.name}
                borderRadius="md"
                maxH="300px"
                objectFit="cover"
                fallbackSrc="/products/default.png"
                loading="lazy"
              />
            </Box>
            <Box flex="2">
              <Stack spacing={4}>
                <Text fontSize="xl" fontWeight="bold" color="brand.600">
                  Price: {product.priceLabel}
                </Text>
                <Badge colorScheme={product.available ? 'green' : 'red'} fontSize="md" width="fit-content">
                  {product.available ? 'Available' : 'Unavailable'}
                </Badge>
                <Text>Category: {product.category}</Text>
                <Text>Location: {product.location}</Text>
                <Text>Quantity Available: {product.quantity}</Text>

                <Button colorScheme="brand" mt={4} onClick={() => alert('Add to cart functionality pending')}>
                  Add to Cart
                </Button>
              </Stack>
            </Box>
          </Flex>
        </ModalBody>
      </ModalContent>
    </Modal>
  );
};

export default ProductDetailsModal;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\components\Marketplace\ProductList.jsx (starts at line 11385)

import React from 'react';
import {
  SimpleGrid,
  Box,
  Image,
  Text,
  Badge,
  Stack,
  Button,
  Tooltip,
} from '@chakra-ui/react';

/**
 * Product cards list display
 */
const ProductList = ({ products, onShowDetails }) => {
  if (!products.length) {
    return (
      <Text textAlign="center" mt={10} fontSize="lg" color="gray.600">
        No products found matching your criteria.
      </Text>
    );
  }

  return (
    <SimpleGrid columns={{ base: 1, sm: 2, md: 3, lg: 4 }} spacing={6}>
      {products.map((p) => (
        <Box
          key={p._id}
          bg="white"
          boxShadow="md"
          borderRadius="md"
          overflow="hidden"
          cursor="pointer"
          role="group"
          _hover={{ boxShadow: 'xl' }}
          onClick={() => onShowDetails(p)}
        >
          <Image
            src={p.img}
            alt={p.name}
            height="200px"
            width="100%"
            objectFit="cover"
            fallbackSrc="/products/default.png"
            loading="lazy"
          />

          <Stack p={4} spacing={2}>
            <Text fontWeight="bold" fontSize="lg" noOfLines={1}>
              {p.name}
            </Text>
            <Badge colorScheme={p.available ? 'green' : 'red'}>
              {p.available ? 'Available' : 'Unavailable'}
            </Badge>
            <Text color="brand.600" fontWeight="bold">
              {p.priceLabel}
            </Text>
            <Tooltip label={`Quantity: ${p.quantity}`} aria-label="quantity tooltip">
              <Text fontSize="sm" color="gray.500">
                Quantity: {p.quantity}
              </Text>
            </Tooltip>
            <Button
              mt={2}
              size="sm"
              colorScheme="brand"
              variant="outline"
              onClick={(e) => {
                e.stopPropagation(); // prevent parent onClick
                onShowDetails(p);
              }}
            >
              View Details
            </Button>
          </Stack>
        </Box>
      ))}
    </SimpleGrid>
  );
};

export default ProductList;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\forms\BuyerLoginForm.jsx (starts at line 11469)

import React, { useState } from 'react';
import {
  Box, Button, Input, FormControl, FormLabel, Heading, Text, VStack, useToast,
} from '@chakra-ui/react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const BuyerLogin = () => {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const toast = useToast();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // 🔄 POST buyer login data to backend
      const { data } = await axios.post('/api/buyer/login', formData);

      // ✅ Notify and redirect
      toast({
        title: 'Login successful',
        description: `Welcome back, ${data.buyer?.name || 'Buyer'}!`,
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
      navigate('/buyer/dashboard');
    } catch (err) {
      toast({
        title: 'Login failed',
        description: err.response?.data?.message || 'Check credentials',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  return (
    <Box maxW="sm" mx="auto" mt={16} p={8} boxShadow="lg" borderRadius="lg" bg="white">
      <Heading size="lg" mb={6} textAlign="center">Buyer Login</Heading>
      <form onSubmit={handleSubmit}>
        <VStack spacing={4}>
          <FormControl isRequired>
            <FormLabel>Email</FormLabel>
            <Input name="email" type="email" onChange={handleChange} value={formData.email} />
          </FormControl>
          <FormControl isRequired>
            <FormLabel>Password</FormLabel>
            <Input name="password" type="password" onChange={handleChange} value={formData.password} />
          </FormControl>
          <Button type="submit" colorScheme="blue" width="full">Login</Button>
          <Text fontSize="sm">
            Don’t have an account? <strong><a href="/buyer/register">Register</a></strong>
          </Text>
        </VStack>
      </form>
    </Box>
  );
};

export default BuyerLogin;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\forms\BuyerRegisterForm.jsx (starts at line 11537)

import React, { useState } from 'react';
import {
  Box, Button, Input, FormControl, FormLabel, Heading, Text, VStack, useToast,
} from '@chakra-ui/react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const BuyerRegister = () => {
  const [formData, setFormData] = useState({
    name: '', email: '', phone: '', password: ''
  });

  const toast = useToast();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // 🔄 POST buyer registration to backend
      const { data } = await axios.post('/api/buyer/register', formData);

      toast({
        title: 'Registration successful',
        description: `Welcome ${data.buyer?.name || 'Buyer'}!`,
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
      navigate('/buyer/login');
    } catch (err) {
      toast({
        title: 'Registration failed',
        description: err.response?.data?.message || 'Please try again',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    }
  };

  return (
    <Box maxW="sm" mx="auto" mt={16} p={8} boxShadow="lg" borderRadius="lg" bg="white">
      <Heading size="lg" mb={6} textAlign="center">Buyer Registration</Heading>
      <form onSubmit={handleSubmit}>
        <VStack spacing={4}>
          <FormControl isRequired>
            <FormLabel>Name</FormLabel>
            <Input name="name" onChange={handleChange} value={formData.name} />
          </FormControl>
          <FormControl isRequired>
            <FormLabel>Email</FormLabel>
            <Input name="email" type="email" onChange={handleChange} value={formData.email} />
          </FormControl>
          <FormControl isRequired>
            <FormLabel>Phone</FormLabel>
            <Input name="phone" type="tel" onChange={handleChange} value={formData.phone} />
          </FormControl>
          <FormControl isRequired>
            <FormLabel>Password</FormLabel>
            <Input name="password" type="password" onChange={handleChange} value={formData.password} />
          </FormControl>
          <Button type="submit" colorScheme="green" width="full">Register</Button>
          <Text fontSize="sm">
            Already have an account? <strong><a href="/buyer/login">Login</a></strong>
          </Text>
        </VStack>
      </form>
    </Box>
  );
};

export default BuyerRegister;



================================================================================

File: frontend\VirMar-RWANDA\src\Public\forms\SellerLoginForm.jsx (starts at line 11615)

// Polished SellerLoginForm.jsx
import React, { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  FormErrorMessage,
  Heading,
  Stack,
  Text,
  useToast,
} from '@chakra-ui/react';
import { Link, useNavigate } from 'react-router-dom';
import { useSeller } from '../context/SellerContext'; // Adjust path if needed

const SellerLoginForm = () => {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const toast = useToast();
  const navigate = useNavigate();
  const { login } = useSeller();

  const validate = () => {
    const newErrors = {};
    if (!formData.email) newErrors.email = 'Email is required';
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = 'Email is invalid';
    if (!formData.password) newErrors.password = 'Password is required';
    return newErrors;
  };

  const handleChange = (e) => {
    setFormData((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    setErrors(validationErrors);
    if (Object.keys(validationErrors).length > 0) return;

    setIsSubmitting(true);
    try {
      await login(formData);
      toast({ title: 'Login successful.', status: 'success', duration: 4000, isClosable: true });
      navigate('/seller/dashboard');
    } catch (error) {
      toast({
        title: 'Login failed.',
        description: error.response?.data?.message || 'Invalid credentials.',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Box maxW="md" mx="auto" mt={10} p={8} borderWidth={1} borderRadius="lg" boxShadow="lg">
      <Heading mb={6} textAlign="center">Seller Login</Heading>
      <form onSubmit={handleSubmit} noValidate>
        <Stack spacing={4}>
          <FormControl id="email" isInvalid={errors.email}>
            <FormLabel>Email address</FormLabel>
            <Input
              type="email"
              name="email"
              placeholder="your@example.com"
              value={formData.email}
              onChange={handleChange}
              autoComplete="email"
            />
            <FormErrorMessage>{errors.email}</FormErrorMessage>
          </FormControl>

          <FormControl id="password" isInvalid={errors.password}>
            <FormLabel>Password</FormLabel>
            <Input
              type="password"
              name="password"
              placeholder="Enter password"
              value={formData.password}
              onChange={handleChange}
              autoComplete="current-password"
            />
            <FormErrorMessage>{errors.password}</FormErrorMessage>
          </FormControl>

          <Button
            type="submit"
            colorScheme="brand"
            isLoading={isSubmitting}
            loadingText="Logging in..."
            size="lg"
            fontWeight="bold"
          >
            Login
          </Button>

          <Text fontSize="sm" textAlign="center">
            Don't have an account?{' '}
            <Link to="/seller/register" style={{ color: '#3182ce' }}>
              Register here
            </Link>
          </Text>
        </Stack>
      </form>
    </Box>
  );
};

export default SellerLoginForm;


================================================================================

File: frontend\VirMar-RWANDA\src\Public\forms\SellerRegisterForm.jsx (starts at line 11731)

// Polished SellerRegisterForm.jsx with phone field
import React, { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  FormErrorMessage,
  Heading,
  Stack,
  Text,
  useToast,
} from '@chakra-ui/react';
import { Link, useNavigate } from 'react-router-dom';
import { useSeller } from '../context/SellerContext';

const SellerRegisterForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
    phone: '',
  });
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const toast = useToast();
  const navigate = useNavigate();
  const { register } = useSeller();

  const validate = () => {
    const newErrors = {};
    if (!formData.name.trim()) newErrors.name = 'Name is required';
    if (!formData.email) newErrors.email = 'Email is required';
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = 'Email is invalid';
    if (!formData.phone) newErrors.phone = 'Phone is required';
    if (!formData.password) newErrors.password = 'Password is required';
    else if (formData.password.length < 6) newErrors.password = 'Password must be at least 6 characters';
    if (formData.confirmPassword !== formData.password) newErrors.confirmPassword = 'Passwords do not match';
    return newErrors;
  };

  const handleChange = (e) => {
    setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const validationErrors = validate();
    setErrors(validationErrors);
    if (Object.keys(validationErrors).length > 0) return;

    setIsSubmitting(true);
    try {
      await register(formData);
      toast({
        title: 'Registration successful.',
        description: "You're now registered! Please login.",
        status: 'success',
        duration: 4000,
        isClosable: true,
      });
      navigate('/seller/dashboard');
    } catch (error) {
      toast({
        title: 'Registration failed.',
        description: error.response?.data?.message || 'An error occurred.',
        status: 'error',
        duration: 4000,
        isClosable: true,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Box maxW="md" mx="auto" mt={10} p={8} borderWidth={1} borderRadius="lg" boxShadow="lg">
      <Heading mb={6} textAlign="center">Seller Registration</Heading>
      <form onSubmit={handleSubmit} noValidate>
        <Stack spacing={4}>
          <FormControl id="name" isInvalid={errors.name}>
            <FormLabel>Name</FormLabel>
            <Input
              type="text"
              name="name"
              placeholder="Your full name"
              value={formData.name}
              onChange={handleChange}
              autoComplete="name"
            />
            <FormErrorMessage>{errors.name}</FormErrorMessage>
          </FormControl>

          <FormControl id="email" isInvalid={errors.email}>
            <FormLabel>Email address</FormLabel>
            <Input
              type="email"
              name="email"
              placeholder="your@example.com"
              value={formData.email}
              onChange={handleChange}
              autoComplete="email"
            />
            <FormErrorMessage>{errors.email}</FormErrorMessage>
          </FormControl>

          <FormControl id="phone" isInvalid={errors.phone}>
            <FormLabel>Phone Number</FormLabel>
            <Input
              type="tel"
              name="phone"
              placeholder="e.g. 0789123456"
              value={formData.phone}
              onChange={handleChange}
              autoComplete="tel"
            />
            <FormErrorMessage>{errors.phone}</FormErrorMessage>
          </FormControl>

          <FormControl id="password" isInvalid={errors.password}>
            <FormLabel>Password</FormLabel>
            <Input
              type="password"
              name="password"
              placeholder="Enter password"
              value={formData.password}
              onChange={handleChange}
              autoComplete="new-password"
            />
            <FormErrorMessage>{errors.password}</FormErrorMessage>
          </FormControl>

          <FormControl id="confirmPassword" isInvalid={errors.confirmPassword}>
            <FormLabel>Confirm Password</FormLabel>
            <Input
              type="password"
              name="confirmPassword"
              placeholder="Confirm password"
              value={formData.confirmPassword}
              onChange={handleChange}
              autoComplete="new-password"
            />
            <FormErrorMessage>{errors.confirmPassword}</FormErrorMessage>
          </FormControl>

          <Button
            type="submit"
            colorScheme="brand"
            isLoading={isSubmitting}
            loadingText="Registering..."
            size="lg"
            fontWeight="bold"
          >
            Register
          </Button>

          <Text fontSize="sm" textAlign="center">
            Already have an account?{' '}
            <Link to="/seller/login" style={{ color: '#3182ce' }}>
              Login here
            </Link>
          </Text>
        </Stack>
      </form>
    </Box>
  );
};

export default SellerRegisterForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\Router.jsx (starts at line 11903)

// src/seller/SellerRouter.jsx

import React from 'react';
import { Route, Routes } from 'react-router-dom';

import SellerDashboard from './components/SellerDashboard';
import AddProductForm from './forms/AddProductForm';
import SellerProfile from './components/userAccount/SellerProfile';
import TrustScoreCard from './components/TrustScoreCard';
import FollowerNotificationList from './components/FollowerNotificationList';
import NotFoundPage from '../pages/NotFoundPage';
import SellerLoginForm from './forms/SellerLoginForm';
import SellerRegisterForm from './forms/SellerRegisterForm';

import MarketplaceDashboard from './components/marketplace/MarketplaceDashboard';
import GeolocationDashboard from './components/geolocation/GeolocationDashboard';

// ✅ Escrow Component
import SellerEscrowStatus from './components/escrow/SellerEscrowStatus';

const SellerRouter = () => {
  return (
    <Routes>
      <Route index element={<SellerDashboard />} />
      <Route path="dashboard" element={<SellerDashboard />} />
      <Route path="add-product" element={<AddProductForm />} />
      <Route path="login" element={<SellerLoginForm />} />
      <Route path="profile" element={<SellerProfile />} />
      <Route path="trust-score" element={<TrustScoreCard />} />
      <Route path="notifications" element={<FollowerNotificationList />} />
      <Route path="register" element={<SellerRegisterForm />} />
      <Route path="marketplace" element={<MarketplaceDashboard />} />
      <Route path="locate" element={<GeolocationDashboard />} />

      {/* ✅ Escrow Route */}
      <Route path="escrow/status/:orderId" element={<SellerEscrowStatus />} />

      <Route path="*" element={<NotFoundPage />} />
    </Routes>
  );
};

export default SellerRouter;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashboardCharts.jsx (starts at line 11947)

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Box, Text, useColorModeValue, Spinner, Center } from '@chakra-ui/react';
import {
  ResponsiveContainer,
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  CartesianGrid,
} from 'recharts';

const DashboardCharts = () => {
  const bg = useColorModeValue('white', 'gray.900');

  const [storeId, setStoreId] = useState(null);
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [salesData, setSalesData] = useState([]);

  useEffect(() => {
    const fetchProfileAndItems = async () => {
      try {
        setLoading(true);
        setError(null);

        // Get seller profile
        const profileRes = await axios.get('http://localhost:5000/api/seller/profile', { withCredentials: true });
        const seller = profileRes.data;
        if (!seller.store) throw new Error('No store found in seller profile');
        setStoreId(seller.store);

        // Get store items
        const itemsRes = await axios.get(`http://localhost:5000/api/seller/store/${seller.store}/items`, { withCredentials: true });
        setItems(itemsRes.data.items || []);

        // For now, let's assume the backend sends weekly sales data here
        // Replace this with a real API call when backend supports sales data
        // For example:
        // const salesRes = await axios.get(`http://localhost:5000/api/seller/store/${seller.store}/sales`);
        // setSalesData(salesRes.data.sales);

        setLoading(false);
      } catch (err) {
        setError(err.message || 'Error loading data');
        setLoading(false);
      }
    };

    fetchProfileAndItems();
  }, []);

  // Generate product views data from actual items quantity
  const viewsData = items.map(item => ({
    product: item.name,
    views: item.quantity,
  }));

  if (loading)
    return (
      <Center h="400px">
        <Spinner size="xl" />
      </Center>
    );

  if (error)
    return (
      <Box p={5} bg="red.100" color="red.700" borderRadius="md">
        Error: {error}
      </Box>
    );

  return (
    <Box bg={bg} p={5} rounded="md" shadow="sm" borderWidth="1px" w="100%">
      <Text fontSize="lg" fontWeight="bold" mb={4}>
        Sales Overview (Weekly)
      </Text>
      <Box h="300px">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={salesData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="day" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Line type="monotone" dataKey="sales" stroke="#3182ce" strokeWidth={3} dot={{ r: 6 }} />
          </LineChart>
        </ResponsiveContainer>
      </Box>

      <Text fontSize="lg" fontWeight="bold" mt={10} mb={4}>
        Product Views (Quantity)
      </Text>
      <Box h="300px">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={viewsData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="product" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="views" fill="#38B2AC" barSize={40} />
          </BarChart>
        </ResponsiveContainer>
      </Box>
    </Box>
  );
};

export default DashboardCharts;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashboardLinks.jsx (starts at line 12063)

import React from 'react';
import {
  Box,
  Flex,
  Text,
  Icon,
  LinkBox,
  LinkOverlay,
  VStack,
  useColorModeValue,
} from '@chakra-ui/react';
import {
  Package,
  Settings,
  Users,
  Truck,
  ClipboardList,
  MapPin,
  ShieldCheck,
  BellRing,
  HandCoins,
  // Shop
} from 'lucide-react';

const links = [
  {
    id: 1,
    title: 'Marketplace',
    // icon: Shop,
    href: '/seller/marketplace',
    description: 'See market conditions and buyer trends.',
  },
  {
    id: 2,
    title: 'Manage Account',
    icon: Package,
    href: '/seller/profile',
    description: 'Edit, remove or add account info.',
  },
  {
    id: 3,
    title: 'Orders',
    icon: ClipboardList,
    href: '/seller/orders',
    description: 'Track customer purchases and deliveries.',
  },
  {
    id: 4,
    title: 'Geolocation',
    icon: MapPin,
    href: '/seller/locate',
    description: 'Manage delivery areas and fees.',
  },
  {
    id: 5,
    title: 'Customers',
    icon: Users,
    href: '/seller/customers',
    description: 'View and manage your customer list.',
  },
  {
    id: 6,
    title: 'Deliveries',
    icon: Truck,
    href: '/seller/deliveries',
    description: 'Assign, verify and view delivery status.',
  },
  {
    id: 7,
    title: 'Escrow Status',
    icon: HandCoins,
    href: '/seller/escrow',
    description: 'Track release or hold of buyer payments.',
  },
  {
    id: 8,
    title: 'Trust & Security',
    icon: ShieldCheck,
    href: '/seller/trust-score',
    description: 'View your trust score and security settings.',
  },
  {
    id: 9,
    title: 'Notifications',
    icon: BellRing,
    href: '/seller/notifications',
    description: 'Check follower and system notifications.',
  },
  {
    id: 10,
    title: 'Settings',
    icon: Settings,
    href: '/seller/settings',
    description: 'Control your store preferences.',
  },
];

const DashboardLinks = () => {
  const cardBg = useColorModeValue('white', 'gray.800');
  const cardHover = useColorModeValue('gray.50', 'gray.700');

  return (
    <Box
      w={{ base: '100%', md: '280px' }}
      bg={cardBg}
      p={4}
      rounded="lg"
      shadow="md"
    >
      <Text fontSize="lg" fontWeight="bold" mb={4}>
        Seller Services
      </Text>
      <VStack spacing={3} align="stretch">
        {links.map((link) => (
          <LinkBox
            key={link.id}
            as="article"
            p={3}
            rounded="md"
            borderWidth="1px"
            _hover={{ bg: cardHover }}
            transition="all 0.2s ease"
          >
            <Flex align="center">
              <Icon as={link.icon} boxSize={5} color="blue.500" mr={3} />
              <Box>
                <Text fontWeight="semibold" fontSize="sm">
                  <LinkOverlay href={link.href}>{link.title}</LinkOverlay>
                </Text>
                <Text fontSize="xs" color="gray.500">
                  {link.description}
                </Text>
              </Box>
            </Flex>
          </LinkBox>
        ))}
      </VStack>
    </Box>
  );
};

export default DashboardLinks;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashboardNotifications.jsx (starts at line 12206)

import React, { useEffect, useState } from 'react';
import {
  Box,
  Text,
  VStack,
  HStack,
  Icon,
  Divider,
  Spinner,
  Center,
  useColorModeValue,
} from '@chakra-ui/react';
import { Bell } from 'lucide-react';
import axios from 'axios';

const DashboardNotifications = () => {
  const bg = useColorModeValue('white', 'gray.900');
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        setLoading(true);
        setError(null);

        // Replace this URL with your real backend notifications endpoint
        const res = await axios.get('http://localhost:5000/api/seller/notifications', { withCredentials: true });
        setNotifications(res.data.notifications || []);
      } catch (err) {
        setError(err.message || 'Failed to load notifications');
      } finally {
        setLoading(false);
      }
    };

    fetchNotifications();
  }, []);

  if (loading) {
    return (
      <Center h="150px">
        <Spinner size="lg" />
      </Center>
    );
  }

  if (error) {
    return (
      <Box p={4} bg="red.100" color="red.700" borderRadius="md">
        Error: {error}
      </Box>
    );
  }

  if (notifications.length === 0) {
    return (
      <Box p={5} bg={bg} borderRadius="md" shadow="sm" borderWidth="1px" w="100%">
        <HStack mb={4} spacing={3} alignItems="center">
          <Icon as={Bell} boxSize={6} />
          <Text fontSize="lg" fontWeight="bold">
            Notifications
          </Text>
        </HStack>
        <Divider mb={4} />
        <Text>No notifications yet.</Text>
      </Box>
    );
  }

  return (
    <Box
      bg={bg}
      p={5}
      rounded="md"
      shadow="sm"
      borderWidth="1px"
      w="100%"
    >
      <HStack mb={4} spacing={3} alignItems="center">
        <Icon as={Bell} boxSize={6} />
        <Text fontSize="lg" fontWeight="bold">
          Notifications
        </Text>
      </HStack>
      <Divider mb={4} />
      <VStack spacing={4} align="stretch">
        {notifications.map((note) => (
          <Box
            key={note.id}
            p={3}
            bg={useColorModeValue('gray.50', 'gray.800')}
            borderRadius="md"
          >
            <Text fontWeight="medium">{note.message}</Text>
            <Text fontSize="sm" color="gray.500">
              {note.time}
            </Text>
          </Box>
        ))}
      </VStack>
    </Box>
  );
};

export default DashboardNotifications;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashboardQuickLinks.jsx (starts at line 12314)

// src/seller/components/DashboardLinks.jsx
import React from 'react';
import {
  Box,
  SimpleGrid,
  Text,
  Icon,
  LinkBox,
  LinkOverlay,
  useColorModeValue,
} from '@chakra-ui/react';
import { Package, Settings, Users, Truck, ClipboardList } from 'lucide-react';

const links = [
  {
    id: 1,
    title: 'Manage Products',
    icon: Package,
    href: '/seller/products',
    description: 'Edit, remove or add new items.',
  },
  {
    id: 2,
    title: 'Orders',
    icon: ClipboardList,
    href: '/seller/orders',
    description: 'Track customer purchases and deliveries.',
  },
  {
    id: 3,
    title: 'Customers',
    icon: Users,
    href: '/seller/customers',
    description: 'View and manage your customer list.',
  },
  {
    id: 4,
    title: 'Deliveries',
    icon: Truck,
    href: '/seller/deliveries',
    description: 'Assign, verify and view delivery status.',
  },
  {
    id: 5,
    title: 'Settings',
    icon: Settings,
    href: '/seller/settings',
    description: 'Control your store preferences.',
  },
];

const DashboardLinks = () => {
  const cardBg = useColorModeValue('white', 'gray.800');
  const cardHover = useColorModeValue('gray.50', 'gray.700');

  return (
    <Box>
      <Text fontSize="xl" fontWeight="bold" mb={4}>
        Seller Services
      </Text>
      <SimpleGrid columns={{ base: 1, sm: 2, md: 3 }} spacing={6}>
        {links.map((link) => (
          <LinkBox
            key={link.id}
            as="article"
            p={5}
            rounded="md"
            shadow="sm"
            borderWidth="1px"
            bg={cardBg}
            _hover={{ bg: cardHover }}
            transition="background 0.2s ease-in-out"
          >
            <Icon as={link.icon} boxSize={6} mb={3} color="brand.500" />
            <Text fontWeight="bold" fontSize="md" mb={1}>
              <LinkOverlay href={link.href}>{link.title}</LinkOverlay>
            </Text>
            <Text fontSize="sm" color="gray.500">
              {link.description}
            </Text>
          </LinkBox>
        ))}
      </SimpleGrid>
    </Box>
  );
};

export default DashboardLinks;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashboardStats.jsx (starts at line 12403)

// src/seller/components/DashboardStats.jsx
import React from 'react';
import { Box, Flex, Stat, StatLabel, StatNumber, StatHelpText, useColorModeValue } from '@chakra-ui/react';
import { BarChart2, TrendingUp, ShoppingBag } from 'lucide-react';

const stats = [
  {
    label: 'Total Sales',
    value: '12.5M RWF',
    icon: <ShoppingBag size={28} />, // Will eventually come from backend
    helpText: '+18% from last month',
  },
  {
    label: 'Revenue Growth',
    value: '+8.2%',
    icon: <TrendingUp size={28} />,
    helpText: 'Monthly increase',
  },
  {
    label: 'Views',
    value: '5,430',
    icon: <BarChart2 size={28} />,
    helpText: 'From all products',
  },
];

const DashboardStats = () => {
  const bg = useColorModeValue('gray.50', 'gray.800');

  return (
    <Flex gap={6} wrap="wrap" justifyContent="space-between" bg={bg} p={5} rounded="md" shadow="sm">
      {stats.map((stat, index) => (
        <Box key={index} p={5} flex="1 1 200px" borderWidth="1px" borderRadius="lg" shadow="sm" bg="white">
          <Flex alignItems="center" gap={4} mb={2}>
            {stat.icon}
            <Stat>
              <StatLabel>{stat.label}</StatLabel>
              <StatNumber>{stat.value}</StatNumber>
              <StatHelpText>{stat.helpText}</StatHelpText>
            </Stat>
          </Flex>
        </Box>
      ))}
    </Flex>
  );
};

export default DashboardStats;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DashBoardWrapper.jsx (starts at line 12452)

// src/seller/pages/DashboardWrapper.jsx
import React from 'react';
import { Box, Grid } from '@chakra-ui/react';
import ProductOverview from '../components/ProductOverview';
import DashboardStats from '../components/DashboardStats';
import SellerLinks from '../components/SellerLinks';
import NotificationPanel from '../components/NotificationPanel';

const DashboardWrapper = () => {
  return (
    <Box p={6} bg="gray.50" minH="100vh">
      {/* Grid layout with 2 rows and responsive columns */}
      <Grid
        templateColumns={{ base: '1fr', md: '2fr 1fr' }}
        templateRows="auto auto"
        gap={6}
      >
        {/* Main Product List + Stats Graphs */}
        <Box gridColumn={{ base: '1', md: '1 / 2' }}>
          <ProductOverview />
          <Box mt={6}>
            <DashboardStats />
          </Box>
        </Box>

        {/* Sidebar: Quick Links + Notifications */}
        <Box gridColumn={{ base: '1', md: '2 / 3' }}>
          <SellerLinks />
          <Box mt={6}>
            <NotificationPanel />
          </Box>
        </Box>
      </Grid>
    </Box>
  );
};

export default DashboardWrapper;
// this is fotocopy


================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\DeleteConfirmation.jsx (starts at line 12491)

import React from 'react';
import Modal from './Modal';

const DeleteConfirmation = ({ product, onConfirm, onCancel }) => {
  return (
    <Modal isOpen={!!product} onClose={onCancel}>
      <h3>Confirm Deletion</h3>
      <p>
        Are you sure you want to delete <strong>{product?.name}</strong>?
      </p>

      <div className="modal-actions">
        <button className="btn btn-delete" onClick={onConfirm}>
          Yes, Delete
        </button>
        <button className="btn btn-cancel" onClick={onCancel}>
          Cancel
        </button>
      </div>
    </Modal>
  );
};

export default DeleteConfirmation;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\FollowerNotificationList.jsx (starts at line 12516)

import React from 'react';

const FollowerNotificationList = () => {
    const notifications = [
        { id: 1, message: 'John Doe started following you.' },
        { id: 2, message: 'Jane Doe started following you.' },
    ];

    return (
        <div>
            <h1>Follower Notifications</h1>
            <ul>
                {notifications.map((notification) => (
                    <li key={notification.id}>{notification.message}</li>
                ))}
            </ul>
        </div>
    );
};

export default FollowerNotificationList;


================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\Modal.jsx (starts at line 12537)

import React, { useEffect } from 'react';
import './Product.css';

const Modal = ({ isOpen, onClose, children }) => {
  // ESC key handler
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === 'Escape') onClose();
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
      document.body.style.overflow = 'hidden'; // Scroll lock
    }

    return () => {
      document.removeEventListener('keydown', handleEsc);
      document.body.style.overflow = 'auto'; // Restore scroll
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div
        className="modal-box modal-animate"
        onClick={(e) => e.stopPropagation()} // prevent closing when clicking inside box
      >
        {children}
      </div>
    </div>
  );
};

export default Modal;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\product-card.css (starts at line 12574)

/* src/seller/styles/product-card.css */
.product-card {
  background-color: #ffffff;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  padding: 16px;
  width: 220px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  transition: transform 0.2s ease-in-out;
}

.product-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.product-name {
  font-size: 1.1rem;
  font-weight: bold;
  color: #2f80ed;
  margin-bottom: 6px;
}

.product-price {
  color: #27ae60;
  font-weight: 500;
  margin-bottom: 4px;
}

.product-description {
  font-size: 0.9rem;
  color: #4a5568;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\Product.css (starts at line 12608)

/* src/seller/styles/product.css */
.product-section {
  margin-bottom: 40px;
}

.product-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.add-btn {
  background-color: #2f80ed;
  color: white;
  font-weight: bold;
  padding: 8px 16px;
  border-radius: 8px;
  border: none;
  cursor: pointer;
  transition: background 0.3s ease;
}

.add-btn:hover {
  background-color: #1c60d6;
}

.product-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
}
.product-card {
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1rem;
  width: 280px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.product-name {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
  color: #222;
}

.product-price {
  font-size: 1rem;
  font-weight: 500;
  color: #4caf50; /* nice green for price */
  margin-bottom: 0.5rem;
}

.product-description {
  font-size: 0.9rem;
  color: #555;
  margin-bottom: 1rem;
  min-height: 40px; /* to keep consistent height */
}

.product-actions {
  display: flex;
  gap: 0.75rem;
  justify-content: flex-end;
}

/* Base button styles */
.btn {
  padding: 0.4rem 0.8rem;
  border-radius: 5px;
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  border: none;
  transition: background-color 0.3s ease, color 0.3s ease;
}

/* Edit button - blue style */
.btn-edit {
  background-color: #1e90ff;
  color: white;
}

.btn-edit:hover {
  background-color: #1c7ed6;
}

/* Delete button - red style */
.btn-delete {
  background-color: #e74c3c;
  color: white;
}

.btn-delete:hover {
  background-color: #c0392b;
}


/* Product form styling */
.product-form {
  background-color: #fefefe;
  border: 1px solid #ccc;
  padding: 1rem 1.5rem;
  margin-bottom: 1.5rem;
  border-radius: 8px;
  max-width: 480px;
}

.product-form label {
  display: block;
  margin-bottom: 0.75rem;
  font-weight: 600;
  color: #333;
}

.product-form input,
.product-form textarea {
  width: 100%;
  padding: 0.5rem;
  border-radius: 5px;
  border: 1px solid #bbb;
  font-size: 1rem;
  margin-top: 0.25rem;
  resize: vertical;
}

.form-buttons {
  margin-top: 1rem;
  display: flex;
  gap: 1rem;
  justify-content: flex-end;
}

.btn-save {
  background-color: #1e90ff;
  color: white;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 5px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-save:hover {
  background-color: #1c7ed6;
}

.btn-cancel {
  background-color: #ccc;
  color: #333;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 5px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn-cancel:hover {
  background-color: #aaa;
}
.modal-overlay {
  position: fixed; /* stay over everything */
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(30, 30, 30, 0.5); /* dark overlay */
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999; /* super high priority */
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(30, 30, 30, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  animation: fadeIn 0.3s ease-in-out;
}

.modal-box {
  background-color: #fff;
  padding: 2rem;
  border-radius: 12px;
  max-width: 480px;
  width: 90%;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
  text-align: center;
  position: relative;
}

.modal-animate {
  animation: scaleIn 0.3s ease-in-out;
}

/* Animations */
@keyframes fadeIn {
  from {
    background-color: rgba(30, 30, 30, 0);
  }
  to {
    background-color: rgba(30, 30, 30, 0.5);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(30, 30, 30, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  animation: fadeIn 0.3s ease-in-out;
}

.modal-box {
  background-color: #fff;
  padding: 2rem;
  border-radius: 12px;
  max-width: 480px;
  width: 90%;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
  text-align: center;
  position: relative;
}

.modal-animate {
  animation: scaleIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    background-color: rgba(30, 30, 30, 0);
  }
  to {
    background-color: rgba(30, 30, 30, 0.5);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\Product.jsx (starts at line 12886)

import React, { useState, useEffect } from "react";
import ProductCard from "./ProductCard";
import ProductForm from "../forms/ProductForm";
import DeleteConfirmation from "./DeleteConfirmation";
import sellerApi from "../../api/seller.api.js";
import "./Product.css";

const Product = () => {
  const [products, setProducts] = useState([]);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [productToDelete, setProductToDelete] = useState(null);

  // TODO: Replace with actual storeId (from context or seller profile)
  const storeId = "YOUR_SELLER_STORE_ID_HERE";

  useEffect(() => {
    if (!storeId) return;
    sellerApi
      .fetchStoreItems(storeId)
      .then((res) => setProducts(res.data.items))
      .catch((err) => console.error("Failed to fetch products", err));
  }, [storeId]);

  const openAddForm = () => {
    setEditingProduct(null);
    setIsFormOpen(true);
  };

  const openEditForm = (product) => {
    setEditingProduct(product);
    setIsFormOpen(true);
  };

  const closeForm = () => {
    setIsFormOpen(false);
    setEditingProduct(null);
  };

  const handleSaveProduct = async (productData) => {
    try {
      if (editingProduct) {
        const res = await sellerApi.updateItemById(editingProduct._id, productData);
        setProducts((prev) =>
          prev.map((p) => (p._id === editingProduct._id ? res.data.item : p))
        );
      } else {
        const res = await sellerApi.addItemToStore(storeId, productData);
        setProducts((prev) => [...prev, res.data.item]);
      }
      closeForm();
    } catch (error) {
      console.error("Failed to save product", error);
    }
  };

  const requestDelete = (product) => {
    setProductToDelete(product);
  };

  const confirmDelete = async () => {
    try {
      await sellerApi.deleteItemById(productToDelete._id);
      setProducts((prev) => prev.filter((p) => p._id !== productToDelete._id));
      setProductToDelete(null);
    } catch (error) {
      console.error("Failed to delete product", error);
    }
  };

  const cancelDelete = () => {
    setProductToDelete(null);
  };

  return (
    <div className="product-section">
      <div className="product-header">
        <h2>Your Products</h2>
        <button className="add-btn" onClick={openAddForm}>
          + Add Product
        </button>
      </div>

      {isFormOpen && (
        <ProductForm
          initialData={editingProduct}
          onCancel={closeForm}
          onSave={handleSaveProduct}
        />
      )}

      <div className="product-grid">
        {products.map((product) => (
          <ProductCard
            key={product._id}
            product={product}
            onEdit={() => openEditForm(product)}
            onDelete={() => requestDelete(product)}
          />
        ))}
      </div>

      {productToDelete && (
        <DeleteConfirmation
          product={productToDelete}
          onConfirm={confirmDelete}
          onCancel={cancelDelete}
        />
      )}
    </div>
  );
};

export default Product;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\ProductCard.jsx (starts at line 13001)

import React from 'react';
import './product.css';

const ProductCard = ({ product, onEdit, onDelete }) => {
  return (
    <div className="product-card">
      <h3 className="product-name">{product.name}</h3>
      <p className="product-price">{product.price}</p>
      <p className="product-description">{product.description}</p>

      <div className="product-actions">
        <button className="btn btn-edit" onClick={onEdit}>
          Edit
        </button>
        <button className="btn btn-delete" onClick={onDelete}>
          Delete
        </button>
      </div>
    </div>
  );
};

export default ProductCard;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\ProductOverview.jsx (starts at line 13025)

// src/seller/components/ProductOverview.jsx
import React from 'react';
import { Box, SimpleGrid, Heading } from '@chakra-ui/react';
import ProductCard from '../../components/ProductCard'; // Assuming you already have this component

const mockProducts = [
  {
    id: 1,
    name: 'Iphone 15 pro',
    price: '1,500,000',
    imageUrl: 'https://via.placeholder.com/150',
    seller: 'Apple Inc.',
    rating: 4,
    reviewCount: 34,
  },
  {
    id: 2,
    name: 'Jeep Wrangler',
    price: '80,000,000',
    imageUrl: 'https://via.placeholder.com/150',
    seller: 'Jeep',
    rating: 5,
    reviewCount: 12,
  },
];

const ProductOverview = () => {
  return (
    <Box>
      <Heading size="lg" mb={4}>Your Products</Heading>
      <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing="10">
        {mockProducts.map(product => (
          <ProductCard key={product.id} product={product} />
        ))}
      </SimpleGrid>
    </Box>
  );
};

export default ProductOverview;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\seller.css (starts at line 13066)

/* seller-global.css */

/* Variables for colors and fonts - adjust as per your theme */
:root {
  --brand-color: #4a90e2; /* example brand blue */
  --brand-hover: #357ABD;
  --background-light: #f7fafc;
  --background-dark: #1a202c;
  --text-primary: #2d3748;
  --text-secondary: #718096;
  --border-radius: 8px;
  --transition-speed: 0.3s;
  --navbar-height: 64px; /* Adjust to your navbar height */
}

/* Global body for seller area */
.seller-root {
  padding-top: var(--navbar-height);
  background-color: var(--background-light);
  min-height: 100vh;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  color: var(--text-primary);
}

/* Buttons */
.seller-btn {
  background-color: var(--brand-color);
  color: white;
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: var(--border-radius);
  font-weight: 600;
  cursor: pointer;
  transition: background-color var(--transition-speed);
  box-shadow: 0 2px 6px rgba(74, 144, 226, 0.4);
}

.seller-btn:hover {
  background-color: var(--brand-hover);
}

/* Cards */
.seller-card {
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  padding: 1.2rem;
  margin-bottom: 1.5rem;
  transition: box-shadow var(--transition-speed);
}

.seller-card:hover {
  box-shadow: 0 4px 14px rgba(0,0,0,0.15);
}

/* Headings */
.seller-heading {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 1rem;
  color: var(--brand-color);
}

/* Layout tweaks */
.seller-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

/* Responsive Grid for product or stats */
.seller-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit,minmax(280px,1fr));
  gap: 1.5rem;
}

/* Notifications style */
.seller-notification {
  background-color: #edf2f7;
  border-left: 4px solid var(--brand-color);
  padding: 0.75rem 1rem;
  margin-bottom: 1rem;
  border-radius: var(--border-radius);
  font-weight: 500;
  color: var(--text-primary);
}

/* Links */
.seller-link {
  color: var(--brand-color);
  font-weight: 600;
  text-decoration: none;
  transition: color var(--transition-speed);
}

.seller-link:hover {
  color: var(--brand-hover);
  text-decoration: underline;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\SellerDashboard.jsx (starts at line 13167)

import React, { useState } from 'react';
import {
  Drawer,
  DrawerOverlay,
  DrawerContent,
  DrawerCloseButton,
  DrawerHeader,
  DrawerBody,
  useBreakpointValue,
  useDisclosure
} from '@chakra-ui/react';

import SellerNavbar from './SellerNavbar';
import DashboardLinks from './DashboardLinks';
import Product from './Product';
import DashboardCharts from './DashboardCharts';
import DashboardNotifications from './DashboardNotifications';
import '../styles/dashboard.css';

const SellerDashboard = () => {
  const isMobile = useBreakpointValue({ base: true, md: false });
  const { isOpen, onOpen, onClose } = useDisclosure();

  return (
    <div className="dashboard-wrapper">
      {/* Navbar gets toggle prop */}
      <SellerNavbar onToggleSidebar={onOpen} />

      <div className="dashboard-main">
        {/* Sidebar for desktop */}
        {!isMobile && (
          <div className="sidebar-box">
            <DashboardLinks />
          </div>
        )}

        {/* Drawer Sidebar for mobile */}
        {isMobile && (
          <Drawer isOpen={isOpen} placement="left" onClose={onClose}>
            <DrawerOverlay />
            <DrawerContent>
              <DrawerCloseButton />
              <DrawerHeader>Seller Services</DrawerHeader>
              <DrawerBody>
                <DashboardLinks />
              </DrawerBody>
            </DrawerContent>
          </Drawer>
        )}

        {/* Main content */}
        <div className="content-box">
          <Product />
          <hr className="section-divider" />
          <DashboardCharts />
          <div style={{ marginTop: '2.5rem' }}>
            <DashboardNotifications />
          </div>
        </div>
      </div>
    </div>
  );
};

export default SellerDashboard;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\SellerNavbar.jsx (starts at line 13233)

import React from 'react';
import {
  Box,
  Flex,
  HStack,
  IconButton,
  Button,
  Menu,
  MenuButton,
  MenuList,
  MenuItem,
  Avatar,
  Link as ChakraLink,
  useDisclosure,
  Stack,
  Text,
  Icon,
  Spacer,
  useColorModeValue,
} from '@chakra-ui/react';
import { HamburgerIcon, CloseIcon } from '@chakra-ui/icons';
import { Link, NavLink, useNavigate } from 'react-router-dom';
import {
  FiHome,
  FiBox,
  FiShoppingCart,
  FiUsers,
  FiBarChart2,
  FiBell,
  FiSettings,
  FiLogOut,
} from 'react-icons/fi';

const navLinks = [
  { name: 'Dashboard', path: '/seller/dashboard', icon: FiHome },
  { name: 'Products', path: '/seller/products', icon: FiBox },
  { name: 'Orders', path: '/seller/orders', icon: FiShoppingCart },
  { name: 'Customers', path: '/seller/customers', icon: FiUsers },
  { name: 'Analytics', path: '/seller/analytics', icon: FiBarChart2 },
  { name: 'Notifications', path: '/seller/notifications', icon: FiBell },
  { name: 'Settings', path: '/seller/profile', icon: FiSettings },
];

const SellerNavbar = ({ onToggleSidebar }) => {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const navigate = useNavigate();

  // Handler for logout - replace with your auth logic
  const handleLogout = () => {
    console.log('Logging out...');
    navigate('/');
  };

  // Active link style
  const activeLinkStyle = {
    fontWeight: 'bold',
    color: useColorModeValue('brand.600', 'brand.300'),
  };

  return (
    <Box
      bg={useColorModeValue('white', 'gray.900')}
      px={4}
      boxShadow="sm"
      position="sticky"
      top="0"
      zIndex="1000"
    >
      <Flex h={16} alignItems="center" justifyContent="space-between" maxW="1200px" mx="auto">
        {/* Logo / Brand */}
        <Box>
          <ChakraLink
            as={Link}
            to="/seller/dashboard"
            fontSize="xl"
            fontWeight="bold"
            color={useColorModeValue('brand.600', 'brand.300')}
            _hover={{ textDecoration: 'none', color: useColorModeValue('brand.700', 'brand.400') }}
          >
            VirMar Seller
          </ChakraLink>
        </Box>

        {/* Desktop Nav Links */}
        <HStack spacing={8} alignItems="center" display={{ base: 'none', md: 'flex' }}>
          {navLinks.map(({ name, path, icon: IconComponent }) => (
            <ChakraLink
              key={name}
              as={NavLink}
              to={path}
              px={3}
              py={2}
              rounded="md"
              display="flex"
              alignItems="center"
              gap={2}
              _hover={{ bg: useColorModeValue('gray.100', 'gray.700'), textDecoration: 'none' }}
              style={({ isActive }) => (isActive ? activeLinkStyle : undefined)}
            >
              <Icon as={IconComponent} />
              <Text>{name}</Text>
            </ChakraLink>
          ))}
        </HStack>

        <Spacer />

        {/* Mobile Menu Button */}
        <IconButton
          size="md"
          icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}
          aria-label="Toggle Sidebar"
          display={{ md: 'none' }}
          onClick={onToggleSidebar} // Trigger drawer toggle from parent
        />

        {/* User Profile Menu */}
        <Menu>
          <MenuButton as={Button} rounded="full" variant="link" cursor="pointer" minW={0} ml={4}>
            <Avatar
              size="sm"
              name="Seller User"
              src="https://bit.ly/broken-link" // Replace with seller's avatar URL
            />
          </MenuButton>
          <MenuList>
            <MenuItem as={Link} to="/seller/profile" icon={<FiSettings />}>
              Profile Settings
            </MenuItem>
            <MenuItem onClick={handleLogout} icon={<FiLogOut />}>
              Logout
            </MenuItem>
          </MenuList>
        </Menu>
      </Flex>

      {/* Mobile Menu Links (optional, can remove or keep) */}
    </Box>
  );
};

export default SellerNavbar;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\SellerProfile.jsx (starts at line 13376)

import React from 'react';

const SellerProfile = () => {
    return (
        <div>
            <h1>Seller Profile</h1>
            <p>Edit your seller profile information here.</p>
        </div>
    );
};

export default SellerProfile;


================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\TrustScoreCard.jsx (starts at line 13388)

import React from 'react';

const TrustScoreCard = () => {
    return (
        <div className="card">
            <div className="card-content">
                <div className="media">
                    <div className="media-content">
                        <p className="title is-4">Trust Score</p>
                    </div>
                </div>
                <div className="content">
                    <p className="title is-1">85</p>
                    <p>out of 100</p>
                </div>
            </div>
        </div>
    );
};

export default TrustScoreCard;


================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\escrow\SellerEscrowStatus.jsx (starts at line 13409)

// src/seller/components/escrow/SellerEscrowStatus.jsx
import React from "react";
import {
  Box,
  Badge,
  Text,
  VStack,
  Icon,
  HStack,
  Tooltip,
} from "@chakra-ui/react";
import { LockIcon, UnlockIcon, WarningIcon } from "@chakra-ui/icons";

const statusInfo = {
  held: {
    color: "yellow",
    label: "Funds Held",
    icon: LockIcon,
    description: "Payment is securely held in escrow until buyer confirms delivery.",
  },
  released: {
    color: "green",
    label: "Funds Released",
    icon: UnlockIcon,
    description: "Funds have been released to your wallet.",
  },
  cancelled: {
    color: "red",
    label: "Transaction Cancelled",
    icon: WarningIcon,
    description: "This order was cancelled. No funds were released.",
  },
};

const SellerEscrowStatus = ({ status = "held" }) => {
  const info = statusInfo[status] || statusInfo["held"];

  return (
    <Box
      p={5}
      borderWidth="1px"
      borderRadius="xl"
      boxShadow="md"
      bg="white"
      maxW="lg"
      mx="auto"
    >
      <VStack spacing={4}>
        <HStack>
          <Icon as={info.icon} color={`${info.color}.500`} boxSize={6} />
          <Badge colorScheme={info.color} fontSize="1em">
            {info.label}
          </Badge>
        </HStack>
        <Tooltip label={info.description} fontSize="sm" hasArrow>
          <Text fontSize="sm" color="gray.600" textAlign="center">
            {info.description}
          </Text>
        </Tooltip>
      </VStack>
    </Box>
  );
};

export default SellerEscrowStatus;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\geolocation\AreaSelector.jsx (starts at line 13475)

// src/seller/components/geolocation/AreaSelector.jsx

import React, { useEffect, useState } from 'react';
import { Box, Select, VStack } from '@chakra-ui/react';

// Sample static data for Rwanda admin hierarchy (simplified)
// Ideally, load this from an API or JSON file for real app
const rwandaAdminData = {
  Kigali: {
    Gasabo: {
      Kimihurura: ['Cell A', 'Cell B', 'Cell C'],
      Kacyiru: ['Cell D', 'Cell E'],
    },
    Nyarugenge: {
      Nyamirambo: ['Cell F', 'Cell G'],
      Kigali: ['Cell H'],
    },
  },
  Southern: {
    Huye: {
      Ngoma: ['Cell I', 'Cell J'],
      Ruhashya: ['Cell K'],
    },
  },
};

const AreaSelector = ({ selection, setSelection }) => {
  const [provinces, setProvinces] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [sectors, setSectors] = useState([]);
  const [cells, setCells] = useState([]);

  // Load provinces on mount
  useEffect(() => {
    setProvinces(Object.keys(rwandaAdminData));
  }, []);

  // When province changes, update districts dropdown
  useEffect(() => {
    if (selection.province && rwandaAdminData[selection.province]) {
      setDistricts(Object.keys(rwandaAdminData[selection.province]));
    } else {
      setDistricts([]);
    }
    setSelection((prev) => ({ ...prev, district: '', sector: '', cell: '' }));
    setSectors([]);
    setCells([]);
  }, [selection.province, setSelection]);

  // When district changes, update sectors dropdown
  useEffect(() => {
    if (selection.province && selection.district) {
      const sectorObj = rwandaAdminData[selection.province][selection.district];
      if (sectorObj) {
        setSectors(Object.keys(sectorObj));
      } else {
        setSectors([]);
      }
    } else {
      setSectors([]);
    }
    setSelection((prev) => ({ ...prev, sector: '', cell: '' }));
    setCells([]);
  }, [selection.district, selection.province, setSelection]);

  // When sector changes, update cells dropdown
  useEffect(() => {
    if (selection.province && selection.district && selection.sector) {
      const cellsArr = rwandaAdminData[selection.province][selection.district][selection.sector];
      if (cellsArr) {
        setCells(cellsArr);
      } else {
        setCells([]);
      }
    } else {
      setCells([]);
    }
    setSelection((prev) => ({ ...prev, cell: '' }));
  }, [selection.sector, selection.district, selection.province, setSelection]);

  // Handle dropdown changes
  const handleChange = (level) => (e) => {
    const value = e.target.value;
    setSelection((prev) => ({ ...prev, [level]: value }));
  };

  return (
    <VStack spacing={4} align="stretch" mt={2}>
      {/* Province */}
      <Box>
        <Select
          placeholder="Select Province"
          value={selection.province}
          onChange={handleChange('province')}
        >
          {provinces.map((prov) => (
            <option key={prov} value={prov}>
              {prov}
            </option>
          ))}
        </Select>
      </Box>

      {/* District */}
      <Box>
        <Select
          placeholder="Select District"
          value={selection.district}
          onChange={handleChange('district')}
          isDisabled={!districts.length}
        >
          {districts.map((dist) => (
            <option key={dist} value={dist}>
              {dist}
            </option>
          ))}
        </Select>
      </Box>

      {/* Sector */}
      <Box>
        <Select
          placeholder="Select Sector"
          value={selection.sector}
          onChange={handleChange('sector')}
          isDisabled={!sectors.length}
        >
          {sectors.map((sect) => (
            <option key={sect} value={sect}>
              {sect}
            </option>
          ))}
        </Select>
      </Box>

      {/* Cell */}
      <Box>
        <Select
          placeholder="Select Cell"
          value={selection.cell}
          onChange={handleChange('cell')}
          isDisabled={!cells.length}
        >
          {cells.map((cell) => (
            <option key={cell} value={cell}>
              {cell}
            </option>
          ))}
        </Select>
      </Box>
    </VStack>
  );
};

export default AreaSelector;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\geolocation\DeliveryAreasManager.jsx (starts at line 13631)

// src/seller/components/geolocation/DeliveryAreasManager.jsx

import React, { useState } from 'react';
import { Box, Button, Heading, VStack, List, ListItem, Text, HStack, useToast } from '@chakra-ui/react';
import AreaSelector from './AreaSelector';

/**
 * DeliveryAreasManager
 * Sellers add and manage delivery areas.
 */
const DeliveryAreasManager = () => {
  const [selectedAreas, setSelectedAreas] = useState([]);
  const [currentSelection, setCurrentSelection] = useState({
    province: '',
    district: '',
    sector: '',
    cell: '',
  });

  const toast = useToast();

  // Add selected area to list
  const addArea = () => {
    const { province, district, sector, cell } = currentSelection;
    if (!province || !district || !sector || !cell) {
      toast({
        title: 'Incomplete selection',
        description: 'Please select all levels: province, district, sector, and cell.',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    // Check for duplicates
    const areaString = `${province} / ${district} / ${sector} / ${cell}`;
    if (selectedAreas.includes(areaString)) {
      toast({
        title: 'Area exists',
        description: 'You have already added this delivery area.',
        status: 'info',
        duration: 3000,
        isClosable: true,
      });
      return;
    }

    setSelectedAreas((prev) => [...prev, areaString]);
    setCurrentSelection({ province: '', district: '', sector: '', cell: '' });
  };

  // Remove area from list
  const removeArea = (area) => {
    setSelectedAreas((prev) => prev.filter((a) => a !== area));
  };

  return (
    <Box maxW="700px" mx="auto" p={6} bg="white" boxShadow="md" rounded="md">
      <Heading size="md" mb={4}>Manage Delivery Areas</Heading>

      <AreaSelector
        selection={currentSelection}
        setSelection={setCurrentSelection}
      />

      <Button mt={4} colorScheme="blue" onClick={addArea}>
        Add Delivery Area
      </Button>

      <Box mt={6}>
        <Heading size="sm" mb={2}>Your Delivery Areas:</Heading>
        {selectedAreas.length === 0 ? (
          <Text color="gray.500">No delivery areas added yet.</Text>
        ) : (
          <List spacing={2}>
            {selectedAreas.map((area) => (
              <ListItem key={area} p={2} borderWidth="1px" borderRadius="md" display="flex" justifyContent="space-between" alignItems="center">
                <Text>{area}</Text>
                <Button size="sm" colorScheme="red" onClick={() => removeArea(area)}>Remove</Button>
              </ListItem>
            ))}
          </List>
        )}
      </Box>
    </Box>
  );
};

export default DeliveryAreasManager;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\geolocation\DeliveryFeesForm.jsx (starts at line 13722)

// src/seller/components/geolocation/DeliveryFeesForm.jsx

import React, { useState } from 'react';
import {
  Box,
  Heading,
  VStack,
  FormControl,
  FormLabel,
  Input,
  Button,
  Text,
  HStack,
  Select,
  useToast,
} from '@chakra-ui/react';

// Simplified list of delivery areas (replace with real data or prop)
const sampleAreas = [
  'Kigali / Gasabo / Kimihurura / Cell A',
  'Kigali / Nyarugenge / Nyamirambo / Cell F',
  'Southern / Huye / Ngoma / Cell I',
];

const DeliveryFeesForm = () => {
  const toast = useToast();
  const [feesData, setFeesData] = useState(
    sampleAreas.reduce((acc, area) => {
      acc[area] = '';
      return acc;
    }, {})
  );

  const handleFeeChange = (area) => (e) => {
    const value = e.target.value;
    setFeesData((prev) => ({ ...prev, [area]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Validate fees are numeric and positive
    for (const [area, fee] of Object.entries(feesData)) {
      if (!fee || isNaN(fee) || Number(fee) < 0) {
        toast({
          title: 'Invalid fee value',
          description: `Please enter a valid positive number for "${area}".`,
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
        return;
      }
    }

    // TODO: Submit feesData to backend
    console.log('Submitting delivery fees:', feesData);
    toast({
      title: 'Delivery fees saved',
      status: 'success',
      duration: 3000,
      isClosable: true,
    });
  };

  return (
    <Box maxW="700px" mx="auto" p={6} bg="white" boxShadow="md" rounded="md" mt={8}>
      <Heading size="md" mb={4}>
        Set Delivery Fees by Area
      </Heading>

      <form onSubmit={handleSubmit}>
        <VStack spacing={4} align="stretch">
          {sampleAreas.map((area) => (
            <FormControl key={area} id={`fee-${area}`} isRequired>
              <FormLabel>{area}</FormLabel>
              <Input
                type="number"
                placeholder="Enter delivery fee (e.g., 2000)"
                value={feesData[area]}
                onChange={handleFeeChange(area)}
                min={0}
              />
            </FormControl>
          ))}

          <Button type="submit" colorScheme="blue" mt={4}>
            Save Fees
          </Button>
        </VStack>
      </form>
    </Box>
  );
};

export default DeliveryFeesForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\geolocation\GeolocationDashboard.jsx (starts at line 13819)

// src/seller/components/geolocation/GeolocationDashboard.jsx

import React, { useState } from 'react';
import {
  Box,
  Tabs,
  TabList,
  TabPanels,
  Tab,
  TabPanel,
  Heading,
} from '@chakra-ui/react';

import DeliveryAreasManager from './DeliveryAreasManager';
import DeliveryFeesForm from './DeliveryFeesForm';
import MapView from './MapView';

const GeolocationDashboard = () => {
  const [tabIndex, setTabIndex] = useState(0);

  return (
    <Box maxW="900px" mx="auto" p={6} bg="white" boxShadow="md" rounded="md">
      <Heading mb={6} textAlign="center" fontWeight="bold" fontSize="xl">
        Geolocation & Delivery Settings
      </Heading>

      <Tabs index={tabIndex} onChange={setTabIndex} variant="enclosed">
        <TabList mb={4} justifyContent="center">
          <Tab>Delivery Areas</Tab>
          <Tab>Delivery Fees</Tab>
          <Tab>Map View</Tab>
        </TabList>

        <TabPanels>
          <TabPanel>
            <DeliveryAreasManager />
          </TabPanel>

          <TabPanel>
            <DeliveryFeesForm />
          </TabPanel>

          <TabPanel>
            <MapView />
          </TabPanel>
        </TabPanels>
      </Tabs>
    </Box>
  );
};

export default GeolocationDashboard;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\geolocation\MapView.jsx (starts at line 13872)

// src/seller/components/geolocation/MapView.jsx

import React from 'react';
import { Box, Text } from '@chakra-ui/react';

const MapView = () => {
  return (
    <Box
      w="100%"
      h="400px"
      bg="gray.100"
      border="1px solid"
      borderColor="gray.300"
      rounded="md"
      display="flex"
      alignItems="center"
      justifyContent="center"
    >
      <Text color="gray.500" fontSize="lg">
        MapView placeholder: Map will be rendered here when integrated with a Maps API.
      </Text>
    </Box>
  );
};

export default MapView;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\BuyerInsightsModule.jsx (starts at line 13899)

// src/components/seller/marketplace/BuyerInsightsModule.jsx

import React, { useEffect, useState } from 'react';
import {
  Box,
  Heading,
  Text,
  VStack,
  Progress,
  Spinner,
  Center,
  useToast,
} from '@chakra-ui/react';
import axios from 'axios';

const BuyerInsightsModule = () => {
  const [insights, setInsights] = useState([]);
  const [loading, setLoading] = useState(true);
  const toast = useToast();

  useEffect(() => {
    const fetchBuyerInsights = async () => {
      try {
        const response = await axios.get(
          'http://localhost:5000/api/seller/analytics/buyer-insights',
          { withCredentials: true }
        );

        // Example expected response format:
        // { data: [{ label: 'Returning Buyers', value: 74 }, ...] }
        if (Array.isArray(response.data)) {
          setInsights(response.data);
        } else if (Array.isArray(response.data.data)) {
          setInsights(response.data.data);
        } else {
          throw new Error('Unexpected data format from server.');
        }
      } catch (error) {
        console.error('Error fetching buyer insights:', error.message);
        toast({
          title: 'Error loading insights',
          description: error.message,
          status: 'error',
          duration: 4000,
          isClosable: true,
        });
      } finally {
        setLoading(false);
      }
    };

    fetchBuyerInsights();
  }, [toast]);

  return (
    <Box
      bg="white"
      p={5}
      borderRadius="lg"
      boxShadow="md"
      borderWidth={1}
      mb={4}
    >
      <Heading size="md" mb={4}>Buyer Insights</Heading>

      {loading ? (
        <Center>
          <Spinner size="lg" color="green.500" />
        </Center>
      ) : (
        <VStack spacing={3} align="stretch">
          {insights.map((item, i) => (
            <Box key={i}>
              <Text fontWeight="semibold">{item.label}</Text>
              <Progress value={item.value} colorScheme="green" borderRadius="sm" />
              <Text fontSize="sm" color="gray.500">{item.value}%</Text>
            </Box>
          ))}
        </VStack>
      )}
    </Box>
  );
};

export default BuyerInsightsModule;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\CardSummary.jsx (starts at line 13985)

// src/components/seller/marketplace/SummaryCards.jsx

import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  Box,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  useColorModeValue,
  Spinner,
  Center,
  Text,
} from '@chakra-ui/react';

/**
 * SummaryCards Component
 *
 * Fetches and displays key marketplace metrics from backend.
 */
const SummaryCards = () => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  const cardBg = useColorModeValue('white', 'gray.800');

  useEffect(() => {
    const fetchSummary = async () => {
      try {
        const res = await axios.get('http://localhost:5000/public/market-summary');
        setData(res.data);
      } catch (err) {
        setError('Failed to load summary metrics.');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchSummary();
  }, []);

  if (loading) {
    return (
      <Center py={8}>
        <Spinner size="lg" />
      </Center>
    );
  }

  if (error) {
    return (
      <Center py={8}>
        <Text color="red.500">{error}</Text>
      </Center>
    );
  }

  const summaryData = [
    {
      label: 'Active Buyers',
      value: data.activeBuyers.toLocaleString(),
      helpText: data.growth.buyers,
    },
    {
      label: 'Total Orders',
      value: data.totalOrders.toLocaleString(),
      helpText: data.growth.orders,
    },
    {
      label: 'Sales Volume',
      value: `RWF ${data.salesVolume.toLocaleString()}`,
      helpText: data.growth.sales,
    },
    {
      label: 'Active Sellers',
      value: data.activeSellers.toLocaleString(),
      helpText: data.growth.sellers,
    },
    {
      label: 'Top Trending Category',
      value: data.topCategory,
      helpText: data.growth.category,
    },
  ];

  return (
    <SimpleGrid
      columns={{ base: 1, md: 2, lg: 3 }}
      spacing={6}
      p={4}
      borderRadius="lg"
    >
      {summaryData.map((item, index) => (
        <Box
          key={index}
          bg={cardBg}
          p={5}
          shadow="md"
          borderRadius="lg"
          border="1px solid"
          borderColor="gray.200"
          _hover={{ transform: 'scale(1.02)', transition: '0.2s ease' }}
        >
          <Stat>
            <StatLabel fontSize="sm" color="gray.500">
              {item.label}
            </StatLabel>
            <StatNumber fontWeight="bold" fontSize="2xl">
              {item.value}
            </StatNumber>
            <StatHelpText fontSize="xs">{item.helpText}</StatHelpText>
          </Stat>
        </Box>
      ))}
    </SimpleGrid>
  );
};

export default SummaryCards;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\FiltersPanel.jsx (starts at line 14109)

// src/components/seller/marketplace/FiltersPanel.jsx

import React from 'react';
import {
  Box,
  Stack,
  Select,
  Input,
  Button,
  Heading,
} from '@chakra-ui/react';

/**
 * FiltersPanel Component
 *
 * Allows filtering marketplace data by date, category, location, etc.
 */
function FiltersPanel() {
  return (
    <Box
      p={4}
      borderWidth={1}
      borderRadius="lg"
      bg="white"
      boxShadow="sm"
    >
      <Heading size="sm" mb={4}>Filter Insights</Heading>
      <Stack direction={{ base: 'column', md: 'row' }} spacing={4}>
        <Select placeholder="Select Category">
          <option>Electronics</option>
          <option>Fashion</option>
          <option>Groceries</option>
        </Select>
        <Input placeholder="Search by Location" />
        <Select placeholder="Sort by">
          <option>Most Recent</option>
          <option>Most Sold</option>
        </Select>
        <Button colorScheme="blue">Apply</Button>
      </Stack>
    </Box>
  );
}

export default FiltersPanel;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\MarketConditionAnalytics.jsx (starts at line 14155)

// src/components/seller/marketplace/MarketConditionAnalytics.jsx

import React from 'react';
import {
  Box,
  Heading,
  Text,
  Divider,
  VStack,
} from '@chakra-ui/react';

/**
 * MarketConditionAnalytics Component
 *
 * Shows trends, demand shifts, and region-specific data.
 */
function MarketConditionAnalytics() {
  return (
    <Box
      bg="white"
      p={5}
      borderRadius="lg"
      boxShadow="md"
      borderWidth={1}
      mb={4}
    >
      <Heading size="md" mb={4}>Market Conditions</Heading>
      <VStack spacing={4} align="stretch">
        <Box>
          <Text fontWeight="semibold">Top Region: Kigali</Text>
          <Text fontSize="sm">↑ +12.4% growth in Electronics</Text>
        </Box>
        <Divider />
        <Box>
          <Text fontWeight="semibold">Rising Category</Text>
          <Text fontSize="sm">Groceries demand up 9% across rural zones</Text>
        </Box>
        <Divider />
        <Box>
          <Text fontWeight="semibold">Inflation Watch</Text>
          <Text fontSize="sm">Stable: +1.2% avg. price rise in July</Text>
        </Box>
      </VStack>
    </Box>
  );
}

export default MarketConditionAnalytics;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\MarketplaceDashboard.jsx (starts at line 14204)

// src/seller/components/MarketplaceDashboard.jsx

import React from 'react';
import { Link } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';

import FiltersPanel from './FiltersPanel';
import SummaryCards from './CardSummary';
import BuyerInsightsModule from './BuyerInsightsModule';
import MarketConditionAnalytics from './MarketConditionAnalytics';
import SellerCompetitiveInsights from './SellerCompetitiveInsights';
import TrendingProductsModule from './TrendingProductsModule';
import DashboardLinks from '../DashboardLinks';

import '../../styles/MarketplaceDashboard.css'; // Make sure this exists and styles are scoped

function MarketplaceDashboard() {
  return (
    <div className="marketplace-dashboard-container">
      {/* Sidebar */}
      <aside className="marketplace-sidebar">
        <DashboardLinks />

        {/* Back to Seller Dashboard */}
        <Link to="/seller/dashboard" className="back-link">
          <ArrowLeft size={18} className="back-icon" />
          Back to Seller Dashboard
        </Link>
      </aside>

      {/* Main Dashboard Content */}
      <main className="marketplace-main">
        <h1 className="marketplace-title">Marketplace Overview</h1>

        {/* Filter Controls */}
        <div className="filters-wrapper">
          <FiltersPanel />
        </div>

        {/* Summary Cards */}
        <div className="summary-cards-wrapper">
          <SummaryCards />
        </div>

        {/* Two-Column Layout */}
        <div className="dashboard-modules-grid">
          {/* Left Column */}
          <div className="dashboard-column">
            <MarketConditionAnalytics />
            <SellerCompetitiveInsights />
          </div>

          {/* Right Column */}
          <div className="dashboard-column">
            <BuyerInsightsModule />
            <TrendingProductsModule />
          </div>
        </div>
      </main>
    </div>
  );
}

export default MarketplaceDashboard;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\SellerCompetitiveInsights.jsx (starts at line 14269)

// src/components/seller/marketplace/SellerCompetitiveInsights.jsx

import React from 'react';
import {
  Box,
  Heading,
  List,
  ListItem,
  ListIcon,
} from '@chakra-ui/react';
import { CheckCircleIcon } from '@chakra-ui/icons';

/**
 * SellerCompetitiveInsights Component
 *
 * Compares seller performance and trends.
 */
function SellerCompetitiveInsights() {
  return (
    <Box
      bg="white"
      p={5}
      borderRadius="lg"
      boxShadow="md"
      borderWidth={1}
      mb={4}
    >
      <Heading size="md" mb={4}>Competitive Insights</Heading>
      <List spacing={3}>
        <ListItem>
          <ListIcon as={CheckCircleIcon} color="green.500" />
          You are in top 20% for order volume in your category
        </ListItem>
        <ListItem>
          <ListIcon as={CheckCircleIcon} color="green.500" />
          Response time faster than 78% of sellers
        </ListItem>
        <ListItem>
          <ListIcon as={CheckCircleIcon} color="green.500" />
          You have 98% positive buyer feedback
        </ListItem>
      </List>
    </Box>
  );
}

export default SellerCompetitiveInsights;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\marketplace\TrendingProductsModule.jsx (starts at line 14317)

// src/components/seller/marketplace/TrendingProductsModule.jsx

import React from 'react';
import {
  Box,
  Heading,
  VStack,
  HStack,
  Avatar,
  Text,
  Badge,
} from '@chakra-ui/react';

/**
 * TrendingProductsModule Component
 *
 * Displays hot-selling products with visual emphasis.
 */
function TrendingProductsModule() {
  const trending = [
    { name: 'Samsung A32', category: 'Electronics', sales: '1.2K' },
    { name: 'Agro Fertilizer Kit', category: 'Farming', sales: '740' },
    { name: 'LED Smart Bulb', category: 'Home Tech', sales: '520' },
  ];

  return (
    <Box
      bg="white"
      p={5}
      borderRadius="lg"
      boxShadow="md"
      borderWidth={1}
    >
      <Heading size="md" mb={4}>Trending Products</Heading>
      <VStack spacing={4} align="stretch">
        {trending.map((item, i) => (
          <HStack key={i} spacing={4}>
            <Avatar name={item.name} />
            <Box>
              <Text fontWeight="semibold">{item.name}</Text>
              <Badge colorScheme="blue" fontSize="0.7em">
                {item.category}
              </Badge>
              <Text fontSize="sm" color="gray.500">
                {item.sales} sales
              </Text>
            </Box>
          </HStack>
        ))}
      </VStack>
    </Box>
  );
}

export default TrendingProductsModule;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\EditProfileForm.jsx (starts at line 14373)

import React, { useState } from "react";

function EditProfileForm({ seller, onCancel, onSave }) {
  const [formData, setFormData] = useState({
    name: seller.name || "",
    email: seller.email || "",
    phone: seller.phone || "",
    bio: seller.bio || "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (onSave) {
      onSave(formData);
    }
  };

  return (
    <div style={{ padding: "1rem", border: "1px solid #ccc", borderRadius: "8px" }}>
      <h3>Edit Profile</h3>
      <form onSubmit={handleSubmit}>
        <div style={{ marginBottom: "0.8rem" }}>
          <label>
            Name: <br />
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              style={{ width: "100%", padding: "0.5rem" }}
              required
            />
          </label>
        </div>
        <div style={{ marginBottom: "0.8rem" }}>
          <label>
            Email: <br />
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              style={{ width: "100%", padding: "0.5rem" }}
              required
            />
          </label>
        </div>
        <div style={{ marginBottom: "0.8rem" }}>
          <label>
            Phone: <br />
            <input
              type="text"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              style={{ width: "100%", padding: "0.5rem" }}
            />
          </label>
        </div>
        <div style={{ marginBottom: "0.8rem" }}>
          <label>
            Bio: <br />
            <textarea
              name="bio"
              value={formData.bio}
              onChange={handleChange}
              style={{ width: "100%", padding: "0.5rem", minHeight: "80px" }}
            />
          </label>
        </div>
        <div style={{ marginTop: "1rem", display: "flex", justifyContent: "flex-end" }}>
          <button
            type="button"
            onClick={onCancel}
            style={{
              padding: "0.5rem 1rem",
              marginRight: "0.5rem",
              backgroundColor: "#eee",
              border: "1px solid #aaa",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            Cancel
          </button>
          <button
            type="submit"
            style={{
              padding: "0.5rem 1rem",
              backgroundColor: "#007bff",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: "pointer",
            }}
          >
            Save
          </button>
        </div>
      </form>
    </div>
  );
}

export default EditProfileForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProductsGrid.jsx (starts at line 14487)

import React, { useEffect, useState } from "react";
import { SimpleGrid, Image, Box, Text, Spinner, Center } from "@chakra-ui/react";
import { useSeller } from "../context/SellerContext"; // adjust path

const ProductsGrid = () => {
  const { fetchStoreItems, seller } = useSeller();
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!seller?.storeId) {
      setError("Seller store not found.");
      setLoading(false);
      return;
    }
    const loadProducts = async () => {
      setLoading(true);
      setError(null);
      try {
        const items = await fetchStoreItems(seller.storeId);
        setProducts(items);
      } catch (err) {
        setError(err.message || "Failed to load products.");
      } finally {
        setLoading(false);
      }
    };
    loadProducts();
  }, [fetchStoreItems, seller]);

  if (loading) return <Center><Spinner size="xl" /></Center>;
  if (error) return <Center color="red.500">{error}</Center>;

  if (!products.length)
    return <Center>No products found. Please add some.</Center>;

  return (
    <SimpleGrid columns={{ base: 2, md: 3 }} spacing={4}>
      {products.map((product) => (
        <Box
          key={product._id}
          borderRadius="md"
          overflow="hidden"
          cursor="pointer"
          boxShadow="sm"
          _hover={{ boxShadow: "md" }}
        >
          <Image
            src={product.imageUrl || "https://via.placeholder.com/200"}
            alt={product.name}
            objectFit="cover"
            width="100%"
            height="200px"
          />
          <Box p={2}>
            <Text fontSize="sm" fontWeight="medium" noOfLines={1}>
              {product.name}
            </Text>
          </Box>
        </Box>
      ))}
    </SimpleGrid>
  );
};

export default ProductsGrid;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProfileHeader.jsx (starts at line 14555)

import React from "react";
import { Box, Flex, Avatar, Heading, Text, Button } from "@chakra-ui/react";

function ProfileHeader({ seller, onEditClick }) {
  return (
    <Flex align="center" gap={4} mb={4}>
      <Avatar
        size="xl"
        name={seller.name}
        src={seller.profilePic || seller.avatar}
      />
      <Box>
        <Heading size="lg">{seller.name}</Heading>
        <Text>{seller.email}</Text>
        <Text>{seller.phone}</Text>
        <Text>{seller.bio}</Text>
        <Button
          mt={2}
          colorScheme="blue"
          onClick={onEditClick}
          size="sm"
          fontWeight="semibold"
        >
          Edit Profile
        </Button>
      </Box>
    </Flex>
  );
}

export default ProfileHeader;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\ProfileTabs.jsx (starts at line 14587)

import React from "react";
import { Tabs, TabList, TabPanels, Tab, TabPanel } from "@chakra-ui/react";

const ProfileTabs = ({ activeTab, setActiveTab }) => {
  const tabIndexMap = { posts: 0, about: 1, followers: 2 };
  const tabNameMap = ["posts", "about", "followers"];

  return (
    <Tabs
      index={tabIndexMap[activeTab]}
      onChange={(index) => setActiveTab(tabNameMap[index])}
      variant="soft-rounded"
      colorScheme="blue"
      mb={6}
    >
      <TabList>
        <Tab>Posts</Tab>
        <Tab>About</Tab>
        <Tab>Followers</Tab>
      </TabList>
    </Tabs>
  );
};

export default ProfileTabs;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\SellerProfile.jsx (starts at line 14613)

import React, { useState, useEffect } from "react";
import {
  Box,
  Flex,
  Avatar,
  Text,
  Heading,
  Button,
  useToast,
  Badge,
  Stack,
  Divider,
} from "@chakra-ui/react";
import { Edit } from "lucide-react";

import { useSeller } from "../../context/SellerContext"; // adjust path
import EditProfileForm from "./EditProfileForm";

const SellerProfile = () => {
  const { seller, fetchProfile, updateProfile } = useSeller();
  const toast = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [localSeller, setLocalSeller] = useState(null);

  useEffect(() => {
    const loadProfile = async () => {
      try {
        await fetchProfile();
      } catch {
        toast({
          title: "Failed to load profile",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      }
    };
    loadProfile();
  }, [fetchProfile, toast]);

  // Keep local copy for editing
  useEffect(() => {
    if (seller) {
      setLocalSeller(seller);
    }
  }, [seller]);

  const handleSave = async (updatedData) => {
    try {
      await updateProfile(updatedData);
      toast({
        title: "Profile updated",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      setIsEditing(false);
    } catch (error) {
      toast({
        title: "Update failed",
        description: error.response?.data?.message || "Could not update profile.",
        status: "error",
        duration: 4000,
        isClosable: true,
      });
    }
  };

  if (!localSeller) return null; // or loading spinner

  return (
    <Box maxW="900px" mx="auto" mt={10} px={6} py={8} bg="white" borderRadius="lg" boxShadow="lg">
      {!isEditing ? (
        <>
          <Flex direction={{ base: "column", md: "row" }} align="center" justify="space-between">
            <Flex align="center" gap={4}>
              <Avatar size="xl" src={localSeller.profilePic} name={localSeller.name} />
              <Box>
                <Heading size="lg">{localSeller.name}</Heading>
                <Text color="gray.500">@{localSeller.username}</Text>
                {localSeller.verified && <Badge colorScheme="green">Verified</Badge>}
              </Box>
            </Flex>

            <Button
              mt={{ base: 6, md: 0 }}
              colorScheme="blue"
              leftIcon={<Edit />}
              onClick={() => setIsEditing(true)}
            >
              Edit Profile
            </Button>
          </Flex>

          <Divider my={6} />

          <Stack spacing={3}>
            <Text>
              <strong>Store:</strong> {localSeller.storeName}
            </Text>
            <Text>
              <strong>Email:</strong> {localSeller.email}
            </Text>
            <Text>
              <strong>Location:</strong> {localSeller.location}
            </Text>
            <Text>
              <strong>Rating:</strong> {localSeller.rating} ★
            </Text>
            <Text>
              <strong>Followers:</strong> {localSeller.followers?.toLocaleString()}
            </Text>
            <Text>
              <strong>Bio:</strong> {localSeller.bio}
            </Text>
            <Text color="gray.500" fontSize="sm">
              Joined {localSeller.joined}
            </Text>
          </Stack>
        </>
      ) : (
        <EditProfileForm
          seller={localSeller}
          onCancel={() => setIsEditing(false)}
          onSave={handleSave}
        />
      )}
    </Box>
  );
};

export default SellerProfile;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\components\userAccount\TrustScoreBadge.jsx (starts at line 14746)

import React from "react";
import { Badge, Tooltip } from "@chakra-ui/react";
import { Star } from "lucide-react";

const TrustScoreBadge = ({ score }) => {
  const stars = Math.round(score * 2) / 2;
  const fullStars = Math.floor(stars);
  const halfStar = stars % 1 !== 0;

  return (
    <Tooltip label={`Trust score: ${score} / 5`} fontSize="sm">
      <Badge
        colorScheme="yellow"
        px={2}
        py={1}
        borderRadius="md"
        display="flex"
        alignItems="center"
        gap={1}
      >
        {[...Array(fullStars)].map((_, i) => (
          <Star key={`full-${i}`} size={14} fill="#FFD700" color="#FFD700" />
        ))}
        {halfStar && <Star key="half" size={14} fill="url(#half)" color="#FFD700" />}
      </Badge>
    </Tooltip>
  );
};

export default TrustScoreBadge;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\forms\AddProductForm.jsx (starts at line 14777)

import React, { useState } from 'react';
import {
  Box,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  Button,
  useToast,
  Heading,
} from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';

const AddProductForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: '',
    imageUrl: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const toast = useToast();
  const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setIsLoading(true);

    // Mock API call
    setTimeout(() => {
      console.log('Form data submitted:', formData);
      setIsLoading(false);
      toast({
        title: 'Product added.',
        description: "We've added your product for you.",
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      navigate('/seller/dashboard');
    }, 2000);
  };

  return (
    <Box p={5}>
      <Heading as="h1" mb={5}>
        Add a New Product
      </Heading>
      <form onSubmit={handleSubmit}>
        <FormControl id="name" isRequired>
          <FormLabel>Product Name</FormLabel>
          <Input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
          />
        </FormControl>
        <FormControl id="description" mt={4} isRequired>
          <FormLabel>Description</FormLabel>
          <Textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
          />
        </FormControl>
        <FormControl id="price" mt={4} isRequired>
          <FormLabel>Price</FormLabel>
          <Input
            type="number"
            name="price"
            value={formData.price}
            onChange={handleChange}
          />
        </FormControl>
        <FormControl id="imageUrl" mt={4} isRequired>
          <FormLabel>Image URL</FormLabel>
          <Input
            type="text"
            name="imageUrl"
            value={formData.imageUrl}
            onChange={handleChange}
          />
        </FormControl>
        <Button
          mt={4}
          colorScheme="teal"
          isLoading={isLoading}
          type="submit"
        >
          Add Product
        </Button>
      </form>
    </Box>
  );
};

export default AddProductForm;


================================================================================

File: frontend\VirMar-RWANDA\src\Seller\forms\ProductForm.jsx (starts at line 14879)

import React, { useState, useEffect } from 'react';
import Modal from '../components/Modal.jsx';
import '../components/Product.css';

const ProductForm = ({ initialData, onCancel, onSave }) => {
  const [name, setName] = useState(initialData?.name || '');
  const [price, setPrice] = useState(initialData?.price || '');
  const [description, setDescription] = useState(initialData?.description || '');

  useEffect(() => {
    setName(initialData?.name || '');
    setPrice(initialData?.price || '');
    setDescription(initialData?.description || '');
  }, [initialData]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!name.trim() || !price.trim()) {
      alert('Please enter name and price');
      return;
    }

    onSave({
      id: initialData?.id || Date.now(),
      name: name.trim(),
      price: price.trim(),
      description: description.trim(),
    });
  };

  return (
    <Modal isOpen={true} onClose={onCancel}>
      <form className="product-form" onSubmit={handleSubmit}>
        <label>
          Product Name
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </label>

        <label>
          Price
          <input
            type="text"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
            required
          />
        </label>

        <label>
          Description
          <textarea
            rows={3}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </label>

        <div className="form-buttons">
          <button type="submit" className="btn btn-save">
            Save
          </button>
          <button type="button" className="btn btn-cancel" onClick={onCancel}>
            Cancel
          </button>
        </div>
      </form>
    </Modal>
  );
};

export default ProductForm;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\orderChart\chat.css (starts at line 14956)

/* src/seller/orderChat/chat.css */
.chat-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 1rem;
  background: #f7f7f7;
  border-radius: 8px;
}

.chat-messages {
  max-height: 400px;
  overflow-y: auto;
  margin-bottom: 1rem;
}

.chat-bubble {
  margin: 0.5rem 0;
  padding: 0.6rem 1rem;
  border-radius: 12px;
  max-width: 80%;
  position: relative;
}

.chat-bubble.sent {
  background: #cce5ff;
  align-self: flex-end;
  margin-left: auto;
}

.chat-bubble.received {
  background: #e2e2e2;
  align-self: flex-start;
  margin-right: auto;
}

.timestamp {
  font-size: 0.7rem;
  color: gray;
  display: block;
  margin-top: 4px;
  text-align: right;
}

.chat-input {
  display: flex;
  gap: 0.5rem;
}

.chat-input input {
  flex: 1;
  padding: 0.6rem;
  border-radius: 6px;
  border: 1px solid #ccc;
}

.chat-input button {
  padding: 0.6rem 1rem;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.chat-container {
  max-width: 600px;
  margin: auto;
  border: 1px solid #ddd;
  padding: 20px;
  border-radius: 12px;
  background: #fafafa;
}

.chat-messages {
  max-height: 300px;
  overflow-y: auto;
  margin-bottom: 10px;
}

.chat-bubble {
  padding: 10px;
  margin: 5px 0;
  border-radius: 10px;
  max-width: 80%;
}

.chat-bubble.sent {
  background-color: #dcf8c6;
  align-self: flex-end;
  text-align: right;
}

.chat-bubble.received {
  background-color: #eee;
  align-self: flex-start;
}

.chat-input {
  display: flex;
  gap: 10px;
}

.chat-input input {
  flex: 1;
  padding: 8px;
}

.chat-input button {
  padding: 8px 12px;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\orderChart\SellerChatInputBox.jsx (starts at line 15067)

import React, { useState } from 'react';

const SellerChatInputBox = ({ onSend, senderId, receiverId, orderId }) => {
  const [text, setText] = useState('');

  const sendMessage = () => {
    if (text.trim() === '') return;

    const newMsg = {
      senderId,
      receiverId,
      orderId,
      message: text,
      timestamp: new Date(),
    };

    onSend(newMsg);
    setText('');
  };

  return (
    <div className="chat-input">
      <input
        type="text"
        placeholder="Type a message..."
        value={text}
        onChange={(e) => setText(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && sendMessage()}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

export default SellerChatInputBox;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\orderChart\SellerChatMessageList.jsx (starts at line 15103)

import React from 'react';

const SellerChatMessageList = ({ messages, sellerId }) => {
  return (
    <div className="chat-messages">
      {messages.map((msg, index) => (
        <div
          key={index}
          className={`chat-bubble ${msg.senderId === sellerId ? 'sent' : 'received'}`}
        >
          <p>{msg.message}</p>
          <span className="timestamp">
            {new Date(msg.timestamp).toLocaleTimeString()}
          </span>
        </div>
      ))}
    </div>
  );
};

export default SellerChatMessageList;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\orderChart\SellerOrderChatPage.jsx (starts at line 15125)

import React, { useState, useEffect } from 'react';
import SellerChatMessageList from './SellerChatMessageList';
import SellerChatInputBox from './SellerChatInputBox';
import useSellerOrderChatSocket from './useSellerOrderChatSocket';
import { io } from 'socket.io-client';
import './chat.css';

const SellerOrderChatPage = ({ orderId }) => {
  const [messages, setMessages] = useState([]);
  const sellerId = 'seller456'; // TODO: Replace with logged-in seller ID
  const buyerId = 'buyer123';  // TODO: Replace with real buyer ID

  useEffect(() => {
    // Optional: Fetch past messages from backend via API
    setMessages([
      { senderId: buyerId, message: 'Hi, is my order shipped?', timestamp: new Date() },
      { senderId: sellerId, message: 'Yes, it’s on the way!', timestamp: new Date() },
    ]);
  }, [orderId]);

  const handleNewMessage = (newMsg) => {
    setMessages((prev) => [...prev, newMsg]);
  };

  // Hook to handle socket logic
  useSellerOrderChatSocket(orderId, handleNewMessage);

  const handleSend = (newMsg) => {
    setMessages((prev) => [...prev, newMsg]);

    const socket = io('http://localhost:5000', {
      withCredentials: true,
    });

    socket.emit('sendMessage', newMsg);
  };

  return (
    <div className="chat-container">
      <h2>Order Chat</h2>
      <SellerChatMessageList messages={messages} sellerId={sellerId} />
      <SellerChatInputBox
        onSend={handleSend}
        senderId={sellerId}
        receiverId={buyerId}
        orderId={orderId}
      />
    </div>
  );
};

export default SellerOrderChatPage;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\orderChart\useSellerOrderChatSocket.js (starts at line 15178)

import { useEffect } from 'react';
import { io } from 'socket.io-client';

const useSellerOrderChatSocket = (orderId, handleNewMessage) => {
  useEffect(() => {
    const socket = io('http://localhost:5000', {
      withCredentials: true,
    });

    socket.emit('joinRoom', { orderId });

    socket.on(`chat-${orderId}`, (messageData) => {
      handleNewMessage(messageData);
    });

    return () => {
      socket.disconnect();
    };
  }, [orderId, handleNewMessage]);
};

export default useSellerOrderChatSocket;



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\pages\Marketplace.jsx (starts at line 15201)




================================================================================

File: frontend\VirMar-RWANDA\src\Seller\styles\DashBoard.css (starts at line 15202)

/* dashboard.css */

body {
  background-color: #f7fafc;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.dashboard-wrapper {
  display: flex;
  flex-direction: column;
  padding: 24px;
  background-color: #f7fafc;
  min-height: 100vh;
}

.dashboard-main {
  display: flex;
  flex-direction: row;
  gap: 24px;
  margin-top: 24px;
}

.sidebar-box {
  min-width: 250px;
  background-color: #ffffff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
  border-radius: 12px;
  padding: 16px;
}

.content-box {
  flex: 1;
  background-color: #ffffff;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
  border-radius: 12px;
  padding: 24px;
}

.dashboard-heading {
  font-size: 24px;
  font-weight: bold;
  color: #2F80ED;
  margin-bottom: 16px;
}

.section-divider {
  border: none;
  height: 1px;
  background-color: #56CCF2;
  margin: 32px 0;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\styles\MarketplaceDashboard.css (starts at line 15254)

/* src/styles/MarketplaceDashboard.css */

.marketplace-dashboard {
  padding: 24px;
  background-color: #f9f9f9;
  font-family: 'Inter', sans-serif;
}

.marketplace-title {
  font-family: 'Poppins', sans-serif;
  font-size: 28px;
  margin-bottom: 24px;
  color: #202124;
}

.marketplace-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
}

.marketplace-column {
  flex: 1;
  min-width: 320px;
}
/* src/styles/MarketplaceDashboard.css */

/* General layout */
.marketplace-dashboard {
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 24px;
  background-color: #f9f9f9;
}

/* Module container box */
.module-box {
  background-color: #ffffff;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
  border: 1px solid #e2e8f0;
  transition: transform 0.2s ease;
}

.module-box:hover {
  transform: translateY(-3px);
}

/* Headings for modules */
.module-heading {
  font-size: 1.4rem;
  font-weight: 600;
  color: #2d3748;
  margin-bottom: 16px;
  border-bottom: 2px solid #edf2f7;
  padding-bottom: 8px;
}

/* Table styles */
.module-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 16px;
}

.module-table th,
.module-table td {
  text-align: left;
  padding: 12px;
  font-size: 0.95rem;
  border-bottom: 1px solid #e2e8f0;
}

.module-table th {
  background-color: #f0f4f8;
  color: #4a5568;
}

/* Filter panel styles */
.filters-container {
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
}

.filters-container select,
.filters-container input {
  padding: 8px 12px;
  border: 1px solid #cbd5e0;
  border-radius: 8px;
  font-size: 0.95rem;
  min-width: 160px;
}

.filters-container button {
  padding: 8px 14px;
  border-radius: 8px;
  background-color: #3182ce;
  color: white;
  font-weight: 500;
  border: none;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.filters-container button:hover {
  background-color: #2b6cb0;
}

/* Summary card grid styles */
.summary-card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
  gap: 20px;
}

.summary-card {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  border: 1px solid #e2e8f0;
  transition: transform 0.2s ease;
}

.summary-card:hover {
  transform: scale(1.02);
}

.summary-card-label {
  font-size: 0.9rem;
  color: #718096;
}

.summary-card-value {
  font-size: 1.6rem;
  font-weight: 600;
  color: #2d3748;
}

.summary-card-help {
  font-size: 0.8rem;
  color: #a0aec0;
  margin-top: 4px;
}

/* Responsive tweaks */
@media screen and (max-width: 768px) {
  .filters-container {
    flex-direction: column;
    align-items: stretch;
  }

  .summary-card-grid {
    grid-template-columns: 1fr;
  }
}

/* src/styles/MarketplaceDashboard.css */

.marketplace-dashboard-container {
  display: flex;
  gap: 24px;
  padding: 24px;
}

.marketplace-sidebar {
  width: 280px;
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
}

.back-link {
  display: flex;
  align-items: center;
  margin-top: 2rem;
  text-decoration: none;
  color: #3182ce;
  font-weight: 600;
  font-size: 0.95rem;
  transition: color 0.2s ease;
}

.back-link:hover {
  color: #2b6cb0;
}

.marketplace-main {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.marketplace-title {
  font-size: 1.75rem;
  font-weight: bold;
  margin-bottom: 8px;
}

.filters-wrapper,
.summary-cards-wrapper {
  width: 100%;
}

.dashboard-modules-grid {
  display: flex;
  gap: 24px;
  flex-wrap: wrap;
}

.dashboard-column {
  flex: 1;
  min-width: 320px;
  display: flex;
  flex-direction: column;
  gap: 24px;
}

/* src/styles/MarketplaceDashboard.css */

.marketplace-dashboard-container {
  display: flex;
  min-height: 100vh;
  background-color: #f8f9fc;
  padding: 1rem;
}

.marketplace-sidebar {
  width: 240px;
  padding: 1rem;
  border-right: 1px solid #e2e8f0;
}

.back-link {
  display: flex;
  align-items: center;
  margin-top: 2rem;
  color: #2b6cb0;
  text-decoration: none;
  font-size: 0.9rem;
}

.back-icon {
  margin-right: 6px;
}

.marketplace-main {
  flex: 1;
  padding: 1.5rem;
}

.marketplace-title {
  font-size: 1.8rem;
  font-weight: 700;
  margin-bottom: 1.5rem;
}

.filters-wrapper {
  margin-bottom: 1.5rem;
}

.summary-cards-wrapper {
  margin-bottom: 2rem;
}

.dashboard-modules-grid {
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
}

.dashboard-column {
  flex: 1;
  min-width: 300px;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}



================================================================================

File: frontend\VirMar-RWANDA\src\Seller\styles\uiTokens.js (starts at line 15537)

// src/styles/uiTokens.js
export const COLORS = {
  primary: '#1A73E8',
  secondary: '#E8F0FE',
  textDark: '#202124',
  textLight: '#5f6368',
  bgLight: '#ffffff',
  bgDark: '#f1f3f4',
  success: '#34A853',
  danger: '#EA4335',
};

export const FONTS = {
  heading: `'Poppins', sans-serif`,
  body: `'Inter', sans-serif`,
};

export const SHADOWS = {
  card: '0 2px 6px rgba(0, 0, 0, 0.08)',
};

export const RADIUS = {
  card: '12px',
};

export const SPACING = {
  padding: '16px',
  margin: '16px',
};



================================================================================